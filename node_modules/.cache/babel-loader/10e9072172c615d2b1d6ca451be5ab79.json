{"ast":null,"code":"const testGrid = [[7, 9, 10, 3, 5], [1, 5, 3, 6, 8], [5, 4, 6, 2, 9]];\nexport default function breadthSearchFirst(grid, startNode, endNode) {\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid);\n  return pathOfNodes;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction breadthSearchFirstHelp(currentNode, grid, neighbors, array = []) {\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  if (currentNode.isFinish) return;\n  let queue = [currentNode];\n\n  for (let i = 0; i < explore.length; i++) {\n    if (!currentNode.isStart) {\n      currentNode.isVisited = true;\n      array.push(currentNode);\n    }\n\n    neighbors = getNeighbors(currentNode, grid);\n    queue.push(...neighbors);\n  }\n\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/breadthFirstSearch.js"],"names":["testGrid","breadthSearchFirst","grid","startNode","endNode","pathOfNodes","breadthSearchFirstHelp","sortNodesByDistance","unvisitedNodes","sort","nodeOne","nodeTwo","distance","currentNode","neighbors","array","isFinish","queue","i","explore","length","isStart","isVisited","push","getNeighbors","node","col","row","updateNeighbors","neighbor","getAllNodes","nodes"],"mappings":"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","sourcesContent":["const testGrid = [\n  [7, 9, 10, 3, 5],\n  [1, 5, 3, 6, 8],\n  [5, 4, 6, 2, 9]\n]\n\nexport default function breadthSearchFirst(grid, startNode, endNode) {\n\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction breadthSearchFirstHelp(currentNode, grid, neighbors, array = []) {\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  if (currentNode.isFinish) return;\n  let queue = [currentNode]\n  for (let i = 0; i < explore.length; i++) {\n    if (!currentNode.isStart) {\n      currentNode.isVisited = true;\n      array.push(currentNode);\n    }\n    neighbors = getNeighbors(currentNode, grid);\n    queue.push(...neighbors)\n  }\n\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}