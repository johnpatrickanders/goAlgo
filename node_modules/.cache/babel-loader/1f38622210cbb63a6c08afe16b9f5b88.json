{"ast":null,"code":"const testGrid = [[7, 9, 10, 3, 5], [1, 5, 3, 6, 8], [5, 4, 6, 2, 9]];\nexport default function depthFirstSearch(grid, startNode, endNode) {\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid);\n  return pathOfNodes;\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  neighbors = getNeighbors(currentNode, grid); // console.log('array:', array);\n  // console.log('current node:', currentNode)\n\n  if (currentNode.isFinish) return;\n\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n  }\n\n  array.push(currentNode);\n  depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/depthFirstSearch.js"],"names":["testGrid","depthFirstSearch","grid","startNode","endNode","pathOfNodes","depthFirstSearchHelp","currentNode","neighbors","array","getNeighbors","isFinish","isStart","isVisited","push","node","col","row","length"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CACf,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAX,EAAc,CAAd,CADe,EAEf,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAFe,EAGf,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAHe,CAAjB;AAMA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoD;AAEjE,QAAMC,WAAW,GAAGC,oBAAoB,CAACH,SAAD,EAAYD,IAAZ,CAAxC;AACA,SAAOG,WAAP;AAED;;AAED,SAASC,oBAAT,CAA8BC,WAA9B,EAA2CL,IAA3C,EAAiDM,SAAjD,EAA4DC,KAAK,GAAG,EAApE,EAAwE;AACtED,EAAAA,SAAS,GAAGE,YAAY,CAACH,WAAD,EAAcL,IAAd,CAAxB,CADsE,CAEtE;AACA;;AACA,MAAIK,WAAW,CAACI,QAAhB,EAA0B;;AAC1B,MAAI,CAACJ,WAAW,CAACK,OAAjB,EAA0B;AACxBL,IAAAA,WAAW,CAACM,SAAZ,GAAwB,IAAxB;AACD;;AACDJ,EAAAA,KAAK,CAACK,IAAN,CAAWP,WAAX;AACAD,EAAAA,oBAAoB,CAACE,SAAS,CAAC,CAAD,CAAV,EAAeN,IAAf,EAAqBM,SAArB,EAAgCC,KAAhC,CAApB;AACA,SAAOA,KAAP;AACD;;AAGD,SAASC,YAAT,CAAsBK,IAAtB,EAA4Bb,IAA5B,EAAkC;AAChC,QAAMM,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEQ,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeF,IAArB;AACA,MAAIE,GAAG,GAAG,CAAN,IAAW,CAACf,IAAI,CAACe,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBH,SAAnC,EAA8CL,SAAS,CAACM,IAAV,CAAeZ,IAAI,CAACe,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAHd,CAGkD;;AAClF,MAAIA,GAAG,GAAGd,IAAI,CAAC,CAAD,CAAJ,CAAQgB,MAAR,GAAiB,CAAvB,IAA4B,CAAChB,IAAI,CAACe,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBH,SAApD,EAA+DL,SAAS,CAACM,IAAV,CAAeZ,IAAI,CAACe,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EAJ/B,CAIkE;;AAClG,MAAIC,GAAG,GAAGf,IAAI,CAACgB,MAAL,GAAc,CAApB,IAAyB,CAAChB,IAAI,CAACe,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBH,SAAjD,EAA4DL,SAAS,CAACM,IAAV,CAAeZ,IAAI,CAACe,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAL5B,CAKgE;;AAChG,MAAIA,GAAG,GAAG,CAAN,IAAW,CAACd,IAAI,CAACe,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBH,SAAnC,EAA8CL,SAAS,CAACM,IAAV,CAAeZ,IAAI,CAACe,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EANd,CAMiD;;AACjF,SAAOR,SAAP;AACD","sourcesContent":["const testGrid = [\n  [7, 9, 10, 3, 5],\n  [1, 5, 3, 6, 8],\n  [5, 4, 6, 2, 9]\n]\n\nexport default function depthFirstSearch(grid, startNode, endNode) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  neighbors = getNeighbors(currentNode, grid);\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  if (currentNode.isFinish) return;\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n  }\n  array.push(currentNode);\n  depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n"]},"metadata":{},"sourceType":"module"}