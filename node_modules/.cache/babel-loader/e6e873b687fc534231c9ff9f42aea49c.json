{"ast":null,"code":"export default function dijkstra(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true; // if (nearestNode.isWall) continue;\n\n    if (nearestNode === endNode || nearestNode.distance === Infinity) {\n      visitedNodesInOrder.shift();\n      return visitedNodesInOrder;\n    }\n\n    updateUnvisitedNeighbors(nearestNode, grid);\n    visitedNodesInOrder.push(nearestNode);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors.filter(neighbor => !neighbor.isVisited && !neighbor.isWall);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const neighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPath(finishNode) {\n  const shortestPath = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    shortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return shortestPath;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/dijkstra.js"],"names":["dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","nearestNode","shift","isVisited","Infinity","updateUnvisitedNeighbors","push","sort","nodeOne","nodeTwo","getUnvisitedNeighbors","node","neighbors","col","row","filter","neighbor","isWall","previousNode","nodes","getNodesInShortestPath","finishNode","shortestPath","currentNode","unshift"],"mappings":"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","sourcesContent":["export default function dijkstra(grid, startNode, endNode) {\n\n  const visitedNodesInOrder = [];\n\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes)\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    // if (nearestNode.isWall) continue;\n    if (nearestNode === endNode || nearestNode.distance === Infinity) {\n      visitedNodesInOrder.shift();\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(nearestNode, grid);\n    visitedNodesInOrder.push(nearestNode);\n  }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors.filter(neighbor => !neighbor.isVisited && !neighbor.isWall);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const neighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPath(finishNode) {\n  const shortestPath = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    shortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPath;\n}\n"]},"metadata":{},"sourceType":"module"}