{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/src/SortingViz/SortingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nimport Slider from './SpeedControls';\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  let [NUM_BARS, SET_NUM_BARS] = useState(20);\n\n  const handleBarChange = e => {\n    NUM_BARS = e.target.value;\n    SET_NUM_BARS(NUM_BARS);\n    resetArray();\n    resetColors();\n  };\n\n  let [SPEED, setSpeed] = useState(200);\n\n  const handleChange = e => {\n    SPEED = e.target.value;\n    setSpeed(SPEED);\n  };\n\n  let convertedSpeed = SPEED >= 100 && SPEED < 300 ? 400 - SPEED - 30 : SPEED >= 300 && SPEED < 350 ? 400 - SPEED - 94 : SPEED >= 350 && SPEED < 400 ? 400 - SPEED - 48 : 400 - SPEED;\n  console.log('converted speed:', convertedSpeed);\n  let comparisonColor = 'green';\n  let swapColor = 'white';\n  let otherColor = 'orange';\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  let stopLoop = false;\n  let numStops = 0;\n  let sorting = false;\n\n  const resetColors = color => {\n    const bars = document.getElementsByClassName('array-bar');\n\n    for (const bar of bars) {\n      bar.style.backgroundColor = color;\n    }\n  };\n\n  const resetArray = () => {\n    const array = [];\n\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight));\n    }\n\n    setArray(array);\n  };\n\n  const stop = () => {\n    if (!stopLoop) {\n      stopLoop = !stopLoop;\n      stopLoop = !stopLoop;\n    }\n\n    while (numStops >= 0) {\n      clearTimeout(numStops);\n      console.log(\"STOPPPPPP\");\n      numStops--;\n    }\n\n    numStops = 0;\n  };\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    sorting = true;\n    const animations = bubbleSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          if (i === animations.length - 1) enableButtons();\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n\n            if (barOneIdx === bars.length - 1) {\n              resetColors('green');\n            }\n          }\n        }, i * convertedSpeed);\n      }\n\n      numStops += 1;\n    }\n  };\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    console.log(array.length);\n    console.log(animations);\n    const bars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animations.length; i++) {\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = otherColor;\n\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i];\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          let [prevCurrIdx, prevOtherIdx] = animations[i - 3] ? animations[i - 3] : [0, 0];\n\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n\n            const splice = (currIdx, startIdx, subArr) => {\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height;\n                subArr[currIdx - 1].style.height = temp;\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor;\n                subArr[currIdx - 1].style.backgroundColor = tempColor;\n                currIdx -= 1;\n              }\n            };\n\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                splice(currIdx, otherIdx, bars);\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          }\n\n          if (i === animations.length - 1) bars[currIdx - 1].style.backgroundColor = comparisonColor;\n        }, i * convertedSpeed);\n      }\n    } // resetColors(comparisonColor);\n\n  };\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1];\n\n          if (barOneIdx !== prevBarOneIdx || barTwoIdx !== prevBarTwoIdx || barTwoIdx === array.length - 1 || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n          }\n\n          if (i === animations.length - 1) resetColors('green');\n        }, i * convertedSpeed);\n      }\n    }\n  };\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? otherColor : comparisonColor; // if the index falls on the \"swap\" value...\n\n          barPivot.backgroundColor = swapColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n          || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = comparisonColor;\n            barTwo.backgroundColor = comparisonColor;\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            // special \"pivot\" swap\n            barPivot.backgroundColor = swapColor;\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = comparisonColor;\n          }\n\n          barTwo.backgroundColor = comparisonColor;\n        }, i * convertedSpeed);\n      }\n    }\n  };\n\n  const animateAlgo = () => {\n    const sortButtons = document.getElementsByClassName('disable');\n    Array.from(sortButtons).forEach(button => button.disabled = true);\n    const algos = [bubbleSortAnimate, insertionSortAnimate, selectionSortAnimate, quickSortAnimate];\n    const algoIdxString = document.getElementById('sorting-options').options.selectedIndex;\n    const algoIdx = Number(algoIdxString);\n    algos[algoIdx]();\n  };\n\n  function enableButtons() {\n    const sortButtons = document.getElementsByClassName('disable');\n    Array.from(sortButtons).forEach(button => button.disabled = false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"algo-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, array.map((value, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-bar\",\n    key: i,\n    style: {\n      height: `${value / 11}vh`,\n      backgroundColor: 'orangered',\n      width: `${90 / NUM_BARS}vh`,\n      display: 'inline-block',\n      margin: 1,\n      borderRadius: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"controls-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slidercontainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slideritem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange,\n    type: \"range\" // list='tickmarks'\n    ,\n    min: \"200\",\n    max: \"400\" // value={SPEED}\n    // onChange={setSpeed}\n    ,\n    step: \"50\",\n    className: \"slidercontianer disable\",\n    id: \"my-range\",\n    name: \"Speed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"sliderlabel\",\n    for: \"myRange\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, \"Speed\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slideritem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleBarChange,\n    type: \"range\",\n    min: \"8\",\n    max: \"200\",\n    value: NUM_BARS,\n    className: \"slider disable\",\n    id: \"myBarRange\",\n    name: \"Length\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"sliderlabel\",\n    for: \"myBarRange\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }\n  }, \"Length\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    className: \"disable\",\n    label: \"Choose an Algo\",\n    name: \"sorting-options\",\n    id: \"sorting-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    label: \"Bubble\",\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    label: \"Insertion\",\n    value: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    label: \"Selection\",\n    value: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    label: \"Quick\",\n    value: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"disable\",\n    onClick: animateAlgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 11\n    }\n  }, \"Sort!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"disable\",\n    onClick: () => {\n      resetArray();\n      resetColors('orangered');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 11\n    }\n  }, \"Reset\"))));\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min);\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/SortingViz/SortingViz.js"],"names":["React","useState","useEffect","bubbleSort","insertionSort","selectionSort","quickSort","Slider","SortingViz","array","setArray","NUM_BARS","SET_NUM_BARS","handleBarChange","e","target","value","resetArray","resetColors","SPEED","setSpeed","handleChange","convertedSpeed","console","log","comparisonColor","swapColor","otherColor","maxBarHeight","Math","floor","window","screen","availHeight","stopLoop","numStops","sorting","color","bars","document","getElementsByClassName","bar","style","backgroundColor","i","push","randomInt","stop","clearTimeout","bubbleSortAnimate","animations","length","barOneIdx","barTwoIdx","barOne","barTwo","isColorChange","setTimeout","currentBarColor","enableButtons","tempHeight","height","insertionSortAnimate","currIdx","otherIdx","prevCurrIdx","prevOtherIdx","initIdx","splice","startIdx","subArr","temp","tempColor","selectionSortAnimate","prevBarOneIdx","prevBarTwoIdx","quickSortAnimate","pivotIdx","barPivot","animateAlgo","sortButtons","Array","from","forEach","button","disabled","algos","algoIdxString","getElementById","options","selectedIndex","algoIdx","Number","map","width","display","margin","borderRadius","min","max","random"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nimport Slider from './SpeedControls';\n\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  let [NUM_BARS, SET_NUM_BARS] = useState(20);\n  const handleBarChange = (e) => {\n    NUM_BARS = e.target.value;\n    SET_NUM_BARS(NUM_BARS);\n    resetArray()\n    resetColors()\n  }\n\n  let [SPEED, setSpeed] = useState(200)\n  const handleChange = (e) => {\n    SPEED = e.target.value;\n    setSpeed(SPEED)\n  }\n  let convertedSpeed = SPEED >= 100 && SPEED < 300\n    ? 400 - SPEED - 30\n    : SPEED >= 300 && SPEED < 350\n      ? 400 - SPEED - 94\n      : SPEED >= 350 && SPEED < 400\n        ? 400 - SPEED - 48\n        : 400 - SPEED;\n  console.log('converted speed:', convertedSpeed)\n\n  let comparisonColor = 'green';\n  let swapColor = 'white';\n  let otherColor = 'orange';\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n\n  let stopLoop = false;\n  let numStops = 0;\n  let sorting = false;\n\n  const resetColors = (color) => {\n    const bars = document.getElementsByClassName('array-bar');\n    for (const bar of bars) {\n      bar.style.backgroundColor = color;\n    }\n  }\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight))\n    }\n    setArray(array)\n  }\n\n\n  const stop = () => {\n    if (!stopLoop) {\n      stopLoop = !stopLoop;\n      stopLoop = !stopLoop;\n    }\n    while (numStops >= 0) {\n      clearTimeout(numStops);\n      console.log(\"STOPPPPPP\");\n      numStops--;\n    }\n    numStops = 0;\n  }\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    sorting = true;\n    const animations = bubbleSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          if (i === animations.length - 1) enableButtons();\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n            if (barOneIdx === bars.length - 1) {\n              resetColors('green')\n            }\n          }\n        }, i * convertedSpeed);\n      }\n      numStops += 1;\n    }\n  }\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    console.log(array.length)\n    console.log(animations)\n    const bars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = otherColor;\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i]\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          let [prevCurrIdx, prevOtherIdx] = animations[i - 3] ? animations[i - 3] : [0, 0]\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n            const splice = (currIdx, startIdx, subArr) => {\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height\n                subArr[currIdx - 1].style.height = temp\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor\n                subArr[currIdx - 1].style.backgroundColor = tempColor\n                currIdx -= 1;\n              }\n            }\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                splice(currIdx, otherIdx, bars)\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          }\n          if (i === animations.length - 1) bars[currIdx - 1].style.backgroundColor = comparisonColor;\n        }, i * convertedSpeed)\n      }\n    }\n    // resetColors(comparisonColor);\n  }\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1];\n          if (barOneIdx !== prevBarOneIdx\n            || barTwoIdx !== prevBarTwoIdx\n            || barTwoIdx === array.length - 1\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n          }\n          if (i === animations.length - 1) resetColors('green');\n\n        }, i * convertedSpeed)\n      }\n    }\n\n  }\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? otherColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barPivot.backgroundColor = swapColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = comparisonColor;\n            barTwo.backgroundColor = comparisonColor;\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) { // special \"pivot\" swap\n            barPivot.backgroundColor = swapColor;\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = comparisonColor;\n\n          }\n          barTwo.backgroundColor = comparisonColor;\n        }, i * convertedSpeed)\n      }\n    }\n  }\n\n  const animateAlgo = () => {\n    const sortButtons = document.getElementsByClassName('disable');\n    Array.from(sortButtons).forEach(button => button.disabled = true);\n    const algos = [bubbleSortAnimate, insertionSortAnimate, selectionSortAnimate, quickSortAnimate]\n    const algoIdxString = document.getElementById('sorting-options').options.selectedIndex;\n    const algoIdx = Number(algoIdxString)\n    algos[algoIdx]();\n  }\n\n  function enableButtons() {\n    const sortButtons = document.getElementsByClassName('disable');\n    Array.from(sortButtons).forEach(button => button.disabled = false);\n  }\n\n  return (\n    <div className=\"algo-container\">\n      <div className=\"array-container\">\n        {array.map((value, i) => (\n          <div\n            className=\"array-bar\"\n            key={i}\n            style={{\n              height: `${value / 11}vh`,\n              backgroundColor: 'orangered',\n              width: `${90 / NUM_BARS}vh`,\n              display: 'inline-block',\n              margin: 1,\n              borderRadius: '10px'\n            }}\n          >\n          </div>\n        ))}\n      </div>\n      <div className='controls-container'>\n        <div className=\"slidercontainer\">\n          <div className='slideritem'>\n            <input onChange={handleChange}\n              type=\"range\"\n              // list='tickmarks'\n              min=\"200\"\n              max=\"400\"\n              // value={SPEED}\n              // onChange={setSpeed}\n              step='50'\n              className=\"slidercontianer disable\"\n              id=\"my-range\"\n              name='Speed'\n            />\n            <label className='sliderlabel' for='myRange'>Speed</label>\n          </div>\n          <div className='slideritem'>\n            <input onChange={handleBarChange}\n              type=\"range\"\n              min=\"8\"\n              max=\"200\"\n              value={NUM_BARS}\n              className=\"slider disable\"\n              id=\"myBarRange\"\n              name='Length'\n            />\n            <label className='sliderlabel' for='myBarRange'>Length</label>\n          </div>\n        </div>\n        {/* <div className=\"slidercontainer\"> */}\n        {/* </div> */}\n        <div className=\"buttons\">\n          {/* <button onClick={stop}>Stop</button> */}\n          {/* <button onClick={resetColors}>Reset Colors</button> */}\n          <select className='disable' label='Choose an Algo' name=\"sorting-options\" id=\"sorting-options\">\n            <option label='Bubble' value='0'></option>\n            <option label='Insertion' value='1'></option>\n            <option label='Selection' value='2'></option>\n            <option label='Quick' value='3'></option>\n          </select>\n          <button className='disable' onClick={animateAlgo}>Sort!</button>\n          <button className='disable' onClick={() => {\n            resetArray();\n            resetColors('orangered');\n          }}>Reset</button>\n        </div>\n      </div>\n    </div >\n  )\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min)\n}\n"]},"metadata":{},"sourceType":"module"}