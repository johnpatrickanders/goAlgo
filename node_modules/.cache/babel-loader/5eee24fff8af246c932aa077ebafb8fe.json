{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/jpa/Desktop/goAlgo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";export default function depthFirstSearch(grid,startNode,endNode){var pathOfNodes=depthFirstSearchHelp(startNode,grid);return pathOfNodes;}function depthFirstSearchHelp(currentNode,grid,neighbors){var array=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];// console.log('array:', array);\n// console.log('current node:', currentNode)\n// if (!currentNode) currentNode = array.pop();\nif(currentNode.isFinish)return;console.log(currentNode,grid);if(!currentNode.isStart){currentNode.isVisited=true;if(array.length===1||currentNode!==array[array.length-1]){array.push(currentNode);}}neighbors=getNeighbors(currentNode,grid);// let nextNode = neighbors[0] ? neighbors[0] : array[array.length - 2]\nif(neighbors[0]){depthFirstSearchHelp(neighbors[0],grid,neighbors,array);}else if(array[array.length-2]&&getNeighbors(array[array.length-2],grid)){array.pop();depthFirstSearchHelp(array[array.length-1],grid,neighbors,array);}return array;}function getNeighbors(node,grid){var neighbors=[];var col=node.col,row=node.row;if(row>0&&!grid[row-1][col].isVisited&&!grid[row-1][col].isWall&&!grid[row-1][col].isStart)neighbors.push(grid[row-1][col]);// \"top\"\n// else neighbors.push(grid[row + 1][col]);\nif(col<grid[0].length-1&&!grid[row][col+1].isVisited&&!grid[row][col+1].isWall&&!grid[row][col+1].isStart)neighbors.push(grid[row][col+1]);// \"right\"\n// else neighbors.push(grid[row][col - 1]);\nif(row<grid.length-1&&!grid[row+1][col].isVisited&&!grid[row+1][col].isWall&&!grid[row+1][col].isStart)neighbors.push(grid[row+1][col]);// \"bottom\"\n// else neighbors.push(grid[row - 1][col]);\nif(col>0&&!grid[row][col-1].isVisited&&!grid[row][col-1].isWall&&!grid[row][col-1].isStart)neighbors.push(grid[row][col-1]);// \"left\"\n// else neighbors.push(grid[row][col + 1]);\nreturn neighbors;}function updateNeighbors(node,grid){var neighbors=getNeighbors(node,grid);var _iterator=_createForOfIteratorHelper(neighbors),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var neighbor=_step.value;neighbor.distance=node.distance+1;}}catch(err){_iterator.e(err);}finally{_iterator.f();}}function sortNodesByDistance(unvisitedNodes){unvisitedNodes.sort(function(nodeOne,nodeTwo){return nodeOne.distance-nodeTwo.distance;});}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/depthFirstSearch.js"],"names":["depthFirstSearch","grid","startNode","endNode","pathOfNodes","depthFirstSearchHelp","currentNode","neighbors","array","isFinish","console","log","isStart","isVisited","length","push","getNeighbors","pop","node","col","row","isWall","updateNeighbors","neighbor","distance","sortNodesByDistance","unvisitedNodes","sort","nodeOne","nodeTwo"],"mappings":"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","sourcesContent":["export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  // if (!currentNode) currentNode = array.pop();\n  if (currentNode.isFinish) return;\n  console.log(currentNode, grid)\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    if (array.length === 1 || currentNode !== array[array.length - 1]) {\n      array.push(currentNode);\n    }\n  }\n  neighbors = getNeighbors(currentNode, grid);\n  // let nextNode = neighbors[0] ? neighbors[0] : array[array.length - 2]\n  if (neighbors[0]) {\n    depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  } else if (array[array.length - 2] && getNeighbors(array[array.length - 2], grid)) {\n    array.pop()\n    depthFirstSearchHelp(array[array.length - 1], grid, neighbors, array);\n  }\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0\n    && !grid[row - 1][col].isVisited\n    && !grid[row - 1][col].isWall\n    && !grid[row - 1][col].isStart\n  ) neighbors.push(grid[row - 1][col]); // \"top\"\n  // else neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1\n    && !grid[row][col + 1].isVisited\n    && !grid[row][col + 1].isWall\n    && !grid[row][col + 1].isStart\n  ) neighbors.push(grid[row][col + 1]) // \"right\"\n  // else neighbors.push(grid[row][col - 1]);\n  if (row < grid.length - 1\n    && !grid[row + 1][col].isVisited\n    && !grid[row + 1][col].isWall\n    && !grid[row + 1][col].isStart) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  // else neighbors.push(grid[row - 1][col]);\n  if (col > 0\n    && !grid[row][col - 1].isVisited\n    && !grid[row][col - 1].isWall\n    && !grid[row][col - 1].isStart) neighbors.push(grid[row][col - 1]) // \"left\"\n  // else neighbors.push(grid[row][col + 1]);\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n"]},"metadata":{},"sourceType":"module"}