{"ast":null,"code":"const testGrid = [[7, 9, 10, 3, 5], [1, 5, 3, 6, 8], [5, 4, 6, 2, 9]];\nexport default function depthFirstSearch(grid, startNode, endNode) {\n  const copyGrid = copyGrid.slice(); // while (unvisitedNodes.length >= 0) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, copyGrid);\n  console.log('RESULT:', pathOfNodes);\n  return pathOfNodes; // sortNodesByDistance(unvisitedNodes)\n  // const nearestNode = unvisitedNodes.shift();\n  // nearestNode.isVisited = true;\n  // if (nearestNode === endNode) return visitedNodesInOrder;\n  // updateNeighbors(nearestNode, copyGrid);\n  // }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction depthFirstSearchHelp(currentNode, copyGrid, neighbors, array = []) {\n  neighbors = getNeighbors(currentNode, copyGrid);\n  console.log('array:', array);\n  console.log('current node:', currentNode);\n  if (currentNode.isFinish) return;\n  currentNode.isVisited = true;\n  array.push(currentNode);\n  depthFirstSearchHelp(neighbors[0], copyGrid, neighbors, array);\n  return array;\n}\n\nfunction getNeighbors(node, copyGrid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !copyGrid[row - 1][col].isVisited) neighbors.push(copyGrid[row - 1][col]); // \"top\"\n\n  if (col < copyGrid[0].length - 1 && !copyGrid[row][col + 1].isVisited) neighbors.push(copyGrid[row][col + 1]); // \"right\"\n\n  if (row < copyGrid.length - 1 && !copyGrid[row + 1][col].isVisited) neighbors.push(copyGrid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !copyGrid[row][col - 1].isVisited) neighbors.push(copyGrid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}\n\nfunction updateNeighbors(node, copyGrid) {\n  const neighbors = getNeighbors(node, copyGrid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(copyGrid) {\n  const nodes = [];\n\n  for (const row of copyGrid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/depthFirstSearch.js"],"names":["testGrid","depthFirstSearch","grid","startNode","endNode","copyGrid","slice","pathOfNodes","depthFirstSearchHelp","console","log","sortNodesByDistance","unvisitedNodes","sort","nodeOne","nodeTwo","distance","currentNode","neighbors","array","getNeighbors","isFinish","isVisited","push","node","col","row","length","updateNeighbors","neighbor","getAllNodes","nodes"],"mappings":"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","sourcesContent":["const testGrid = [\n  [7, 9, 10, 3, 5],\n  [1, 5, 3, 6, 8],\n  [5, 4, 6, 2, 9]\n]\n\nexport default function depthFirstSearch(grid, startNode, endNode) {\n\n\n  const copyGrid = copyGrid.slice();\n\n  // while (unvisitedNodes.length >= 0) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, copyGrid)\n  console.log('RESULT:', pathOfNodes);\n  return pathOfNodes;\n\n  // sortNodesByDistance(unvisitedNodes)\n  // const nearestNode = unvisitedNodes.shift();\n  // nearestNode.isVisited = true;\n  // if (nearestNode === endNode) return visitedNodesInOrder;\n  // updateNeighbors(nearestNode, copyGrid);\n  // }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction depthFirstSearchHelp(currentNode, copyGrid, neighbors, array = []) {\n  neighbors = getNeighbors(currentNode, copyGrid);\n  console.log('array:', array);\n  console.log('current node:', currentNode)\n  if (currentNode.isFinish) return;\n  currentNode.isVisited = true;\n  array.push(currentNode);\n  depthFirstSearchHelp(neighbors[0], copyGrid, neighbors, array);\n  return array;\n}\n\n\nfunction getNeighbors(node, copyGrid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !copyGrid[row - 1][col].isVisited) neighbors.push(copyGrid[row - 1][col]); // \"top\"\n  if (col < copyGrid[0].length - 1 && !copyGrid[row][col + 1].isVisited) neighbors.push(copyGrid[row][col + 1]) // \"right\"\n  if (row < copyGrid.length - 1 && !copyGrid[row + 1][col].isVisited) neighbors.push(copyGrid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !copyGrid[row][col - 1].isVisited) neighbors.push(copyGrid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, copyGrid) {\n  const neighbors = getNeighbors(node, copyGrid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(copyGrid) {\n  const nodes = [];\n  for (const row of copyGrid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}