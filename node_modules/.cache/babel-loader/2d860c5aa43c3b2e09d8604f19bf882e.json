{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/src/PathfindingViz/PathfindingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\nimport './PathfindingViz.css';\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false; // const START_NODE_ROW = 8;\n  // const START_NODE_COL = 12;\n  // const END_NODE_ROW = 22;\n  // const END_NODE_COL = 37;\n\n  const START_NODE_ROW = Math.floor(window.innerHeight / 55);\n  console.log(Math.floor(window.innerHeight / 50));\n  const START_NODE_COL = 12;\n  const END_NODE_ROW = 22;\n  const END_NODE_COL = 37;\n  const GRID_HEIGHT = window.innerHeight / 27;\n  useEffect(() => {\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL));\n  }, []);\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n\n    if (row === START_NODE_ROW && col === START_NODE_COL || row === END_NODE_ROW && col === END_NODE_COL) {\n      return;\n    }\n\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  };\n\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed || row === START_NODE_ROW && col === START_NODE_COL || row === END_NODE_ROW && col === END_NODE_COL || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  };\n\n  const handleMouseUp = () => {\n    mousePressed = false;\n  };\n\n  const depthFirstSearchAnimate = pathOfNodes => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval);\n    }\n  };\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes);\n  };\n\n  const breadthFirstSearchAnimate = pathOfNodes => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval);\n    }\n  };\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    breadthFirstSearchAnimate(pathOfNodes);\n  };\n\n  const dijkstraVisualize = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n            }, newInterval);\n          }\n        }\n      }, interval);\n    }\n  };\n\n  const dijkstraAnimate = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode);\n    dijkstraVisualize(visitiedNodesInOrder, shortestPath);\n  };\n\n  const resetGrid = () => {\n    grid.forEach(row => row.forEach(node => {\n      const currentDomNode = document.getElementById(`loc-${node.row}-${node.col}`);\n      currentDomNode.classList.remove('node-visited', 'node-is-wall', 'node-short-visited');\n    }));\n    setGrid([]);\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL)); // updateDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp)\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Reset Grid\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dijkstraAnimate(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, \"Dijkstra\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => depthFirstSearchVisualize(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, \"Depth First Search\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => breadthFirstSearchVisualize(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, \"Breadth First Search\"), getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp));\n}\n\nfunction getBlankGrid(startRow, startCol, endRow, endCol) {\n  const grid = [];\n\n  for (let row = 0; row < 40; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      const currentNode = {\n        col,\n        row,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === endRow && col === endCol,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n      currentRow.push(currentNode);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nfunction getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, grid.map((row, rowIdx) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIdx,\n      className: \"grid-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }\n    }, row.map((node, nodeIdx) => {\n      const {\n        isStart,\n        isFinish,\n        isVisited,\n        col,\n        row\n      } = node;\n      return /*#__PURE__*/React.createElement(Node, {\n        isStart: isStart,\n        isFinish: isFinish,\n        key: col + '-' + row,\n        location: row + '-' + col,\n        test: 'hello there',\n        isVisited: isVisited,\n        row: row,\n        col: col,\n        onMouseDown: handleMouseDown,\n        onMouseEnter: handleMouseEnter,\n        onMouseUp: handleMouseUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      });\n    }));\n  }));\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/PathfindingViz.js"],"names":["React","useState","useEffect","depthFirstSearch","breadthFirstSearch","dijkstra","getNodesInShortestPath","Node","PathfindingViz","grid","setGrid","SPEED","SET_SPEED","mousePressed","START_NODE_ROW","Math","floor","window","innerHeight","console","log","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_HEIGHT","getBlankGrid","handleMouseDown","row","col","targetNode","isWall","targetDomNode","document","getElementById","classList","add","remove","handleMouseEnter","handleMouseUp","depthFirstSearchAnimate","pathOfNodes","i","length","interval","setTimeout","currentPathNode","currentDomNode","depthFirstSearchVisualize","startNode","endNode","breadthFirstSearchAnimate","breadthFirstSearchVisualize","dijkstraVisualize","shortestPath","j","newInterval","currentShortNode","currentShortDomNode","dijkstraAnimate","visitiedNodesInOrder","resetGrid","forEach","node","getInitialDomGrid","startRow","startCol","endRow","endCol","currentRow","currentNode","isStart","isFinish","distance","Infinity","isVisited","previousNode","push","map","rowIdx","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,QAAP,IAAmBC,sBAAnB,QAAiD,YAAjD;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,sBAAP;AAEA,eAAe,SAASC,cAAT,GAA0B;AACvC,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACU,KAAD,EAAQC,SAAR,IAAqBX,QAAQ,CAAC,EAAD,CAAnC;AACA,MAAIY,YAAY,GAAG,KAAnB,CAHuC,CAKvC;AACA;AACA;AACA;;AACA,QAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,WAAP,GAAqB,EAAhC,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,WAAP,GAAqB,EAAhC,CAAZ;AACA,QAAMG,cAAc,GAAG,EAAvB;AACA,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,YAAY,GAAG,EAArB;AAEA,QAAMC,WAAW,GAAGP,MAAM,CAACC,WAAP,GAAqB,EAAzC;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,OAAO,CAACe,YAAY,CAACX,cAAD,EAAiBO,cAAjB,EAAiCC,YAAjC,EAA+CC,YAA/C,CAAb,CAAP;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMG,eAAe,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpC,UAAMC,UAAU,GAAGpB,IAAI,CAACkB,GAAD,CAAJ,CAAUC,GAAV,CAAnB;;AACA,QAAID,GAAG,KAAKb,cAAR,IAA0Bc,GAAG,KAAKP,cAAlC,IACCM,GAAG,KAAKL,YAAR,IAAwBM,GAAG,KAAKL,YADrC,EACmD;AACjD;AACD;;AACDV,IAAAA,YAAY,GAAG,IAAf;AACAgB,IAAAA,UAAU,CAACC,MAAX,GAAoB,CAACD,UAAU,CAACC,MAAhC;AACA,UAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAT,CAAyB,OAAMN,GAAI,IAAGC,GAAI,EAA1C,CAAtB;AACAC,IAAAA,UAAU,CAACC,MAAX,GAAoBC,aAAa,CAACG,SAAd,CAAwBC,GAAxB,CAA4B,cAA5B,CAApB,GAAkEJ,aAAa,CAACG,SAAd,CAAwBE,MAAxB,CAA+B,cAA/B,CAAlE;AACD,GAVD;;AAWA,QAAMC,gBAAgB,GAAG,CAACV,GAAD,EAAMC,GAAN,KAAc;AACrC,UAAMC,UAAU,GAAGpB,IAAI,CAACkB,GAAD,CAAJ,CAAUC,GAAV,CAAnB;AACA,QAAI,CAACf,YAAD,IACCc,GAAG,KAAKb,cAAR,IAA0Bc,GAAG,KAAKP,cADnC,IAECM,GAAG,KAAKL,YAAR,IAAwBM,GAAG,KAAKL,YAFjC,IAGCM,UAAU,CAACC,MAHhB,EAGwB;AACxBD,IAAAA,UAAU,CAACC,MAAX,GAAoB,CAACD,UAAU,CAACC,MAAhC;AACA,UAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAT,CAAyB,OAAMN,GAAI,IAAGC,GAAI,EAA1C,CAAtB;AACAC,IAAAA,UAAU,CAACC,MAAX,GAAoBC,aAAa,CAACG,SAAd,CAAwBC,GAAxB,CAA4B,cAA5B,CAApB,GAAkEJ,aAAa,CAACG,SAAd,CAAwBE,MAAxB,CAA+B,cAA/B,CAAlE;AACD,GATD;;AAUA,QAAME,aAAa,GAAG,MAAM;AAC1BzB,IAAAA,YAAY,GAAG,KAAf;AACD,GAFD;;AAGA,QAAM0B,uBAAuB,GAAIC,WAAD,IAAiB;AAC/C,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,YAAME,QAAQ,GAAGF,CAAC,GAAG9B,KAArB;AACAiC,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMC,eAAe,GAAGL,WAAW,CAACC,CAAD,CAAnC;AACA,cAAMK,cAAc,GAAGd,QAAQ,CAACC,cAAT,CAAyB,OAAMY,eAAe,CAAClB,GAAI,IAAGkB,eAAe,CAACjB,GAAI,EAA1E,CAAvB;AACAkB,QAAAA,cAAc,CAACZ,SAAf,CAAyBC,GAAzB,CAA6B,cAA7B;AACD,OAJS,EAIPQ,QAJO,CAAV;AAKD;AACF,GATD;;AAWA,QAAMI,yBAAyB,GAAG,MAAM;AACtC,UAAMC,SAAS,GAAGvC,IAAI,CAACK,cAAD,CAAJ,CAAqBO,cAArB,CAAlB;AACA,UAAM4B,OAAO,GAAGxC,IAAI,CAACa,YAAD,CAAJ,CAAmBC,YAAnB,CAAhB;AACA,UAAMiB,WAAW,GAAGrC,gBAAgB,CAACM,IAAD,EAAOuC,SAAP,EAAkBC,OAAlB,CAApC;AACAV,IAAAA,uBAAuB,CAACC,WAAD,CAAvB;AACD,GALD;;AAOA,QAAMU,yBAAyB,GAAIV,WAAD,IAAiB;AACjD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,YAAME,QAAQ,GAAGF,CAAC,GAAG9B,KAArB;AACAiC,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMC,eAAe,GAAGL,WAAW,CAACC,CAAD,CAAnC;AACA,cAAMK,cAAc,GAAGd,QAAQ,CAACC,cAAT,CAAyB,OAAMY,eAAe,CAAClB,GAAI,IAAGkB,eAAe,CAACjB,GAAI,EAA1E,CAAvB;AACAkB,QAAAA,cAAc,CAACZ,SAAf,CAAyBC,GAAzB,CAA6B,cAA7B;AACD,OAJS,EAIPQ,QAJO,CAAV;AAKD;AACF,GATD;;AAWA,QAAMQ,2BAA2B,GAAG,MAAM;AACxC,UAAMH,SAAS,GAAGvC,IAAI,CAACK,cAAD,CAAJ,CAAqBO,cAArB,CAAlB;AACA,UAAM4B,OAAO,GAAGxC,IAAI,CAACa,YAAD,CAAJ,CAAmBC,YAAnB,CAAhB;AACA,UAAMiB,WAAW,GAAGpC,kBAAkB,CAACK,IAAD,EAAOuC,SAAP,EAAkBC,OAAlB,CAAtC;AACAC,IAAAA,yBAAyB,CAACV,WAAD,CAAzB;AACD,GALD;;AAQA,QAAMY,iBAAiB,GAAG,CAACZ,WAAD,EAAca,YAAd,KAA+B;AACvD,SAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,YAAME,QAAQ,GAAGF,CAAC,GAAG9B,KAArB;AACAiC,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMC,eAAe,GAAGL,WAAW,CAACC,CAAD,CAAnC;AACA,cAAMK,cAAc,GAAGd,QAAQ,CAACC,cAAT,CAAyB,OAAMY,eAAe,CAAClB,GAAI,IAAGkB,eAAe,CAACjB,GAAI,EAA1E,CAAvB;AACAkB,QAAAA,cAAc,CAACZ,SAAf,CAAyBC,GAAzB,CAA6B,cAA7B;;AACA,YAAIM,CAAC,KAAKD,WAAW,CAACE,MAAZ,GAAqB,CAA/B,EAAkC;AAChC,eAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACX,MAAjC,EAAyCY,CAAC,EAA1C,EAA8C;AAC5C,kBAAMC,WAAW,GAAGD,CAAC,GAAG3C,KAAxB;AACAiC,YAAAA,UAAU,CAAC,MAAM;AACf,oBAAMY,gBAAgB,GAAGH,YAAY,CAACC,CAAD,CAArC;AACA,oBAAMG,mBAAmB,GAAGzB,QAAQ,CAACC,cAAT,CAAyB,OAAMuB,gBAAgB,CAAC7B,GAAI,IAAG6B,gBAAgB,CAAC5B,GAAI,EAA5E,CAA5B;AACA6B,cAAAA,mBAAmB,CAACvB,SAApB,CAA8BC,GAA9B,CAAkC,oBAAlC;AACD,aAJS,EAIPoB,WAJO,CAAV;AAKD;AACF;AACF,OAdS,EAcPZ,QAdO,CAAV;AAeD;AACF,GAnBD;;AAqBA,QAAMe,eAAe,GAAG,MAAM;AAC5B,UAAMV,SAAS,GAAGvC,IAAI,CAACK,cAAD,CAAJ,CAAqBO,cAArB,CAAlB;AACA,UAAM4B,OAAO,GAAGxC,IAAI,CAACa,YAAD,CAAJ,CAAmBC,YAAnB,CAAhB;AACA,UAAMoC,oBAAoB,GAAGtD,QAAQ,CAACI,IAAD,EAAOuC,SAAP,EAAkBC,OAAlB,CAArC;AACA,UAAMI,YAAY,GAAG/C,sBAAsB,CAAC2C,OAAD,CAA3C;AACAG,IAAAA,iBAAiB,CAACO,oBAAD,EAAuBN,YAAvB,CAAjB;AACD,GAND;;AAQA,QAAMO,SAAS,GAAG,MAAM;AACtBnD,IAAAA,IAAI,CAACoD,OAAL,CAAalC,GAAG,IAAIA,GAAG,CAACkC,OAAJ,CAAYC,IAAI,IAAI;AACtC,YAAMhB,cAAc,GAAGd,QAAQ,CAACC,cAAT,CAAyB,OAAM6B,IAAI,CAACnC,GAAI,IAAGmC,IAAI,CAAClC,GAAI,EAApD,CAAvB;AACAkB,MAAAA,cAAc,CAACZ,SAAf,CAAyBE,MAAzB,CAAgC,cAAhC,EAAgD,cAAhD,EAAgE,oBAAhE;AACD,KAHmB,CAApB;AAIA1B,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAA,IAAAA,OAAO,CAACe,YAAY,CAACX,cAAD,EAAiBO,cAAjB,EAAiCC,YAAjC,EAA+CC,YAA/C,CAAb,CAAP,CANsB,CAOtB;AACD,GARD;;AAUA,sBACE,uDACE;AAAQ,IAAA,OAAO,EAAEqC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,IAAA,OAAO,EAAE,MAAMF,eAAe,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,IAAA,OAAO,EAAE,MAAMX,yBAAyB,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHF,eAIE;AAAQ,IAAA,OAAO,EAAE,MAAMI,2BAA2B,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJF,EAKGY,iBAAiB,CAACtD,IAAD,EAAOiB,eAAP,EAAwBW,gBAAxB,EAA0CC,aAA1C,CALpB,CADF;AASD;;AAGD,SAASb,YAAT,CAAsBuC,QAAtB,EAAgCC,QAAhC,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0D;AACxD,QAAM1D,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIkB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,UAAMyC,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIxC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,YAAMyC,WAAW,GAAG;AAClBzC,QAAAA,GADkB;AAElBD,QAAAA,GAFkB;AAGlB2C,QAAAA,OAAO,EAAE3C,GAAG,KAAKqC,QAAR,IAAoBpC,GAAG,KAAKqC,QAHnB;AAIlBM,QAAAA,QAAQ,EAAE5C,GAAG,KAAKuC,MAAR,IAAkBtC,GAAG,KAAKuC,MAJlB;AAKlBK,QAAAA,QAAQ,EAAEC,QALQ;AAMlBC,QAAAA,SAAS,EAAE,KANO;AAOlB5C,QAAAA,MAAM,EAAE,KAPU;AAQlB6C,QAAAA,YAAY,EAAE;AARI,OAApB;AAUAP,MAAAA,UAAU,CAACQ,IAAX,CAAgBP,WAAhB;AACD;;AACD5D,IAAAA,IAAI,CAACmE,IAAL,CAAUR,UAAV;AACD;;AACD,SAAO3D,IAAP;AACD;;AAED,SAASsD,iBAAT,CAA2BtD,IAA3B,EAAiCiB,eAAjC,EAAkDW,gBAAlD,EAAoEC,aAApE,EAAmF;AACjF,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG7B,IAAI,CAACoE,GAAL,CAAS,CAAClD,GAAD,EAAMmD,MAAN,KAAiB;AACzB,wBACE;AAAK,MAAA,GAAG,EAAEA,MAAV;AAAkB,MAAA,SAAS,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGnD,GAAG,CAACkD,GAAJ,CAAQ,CAACf,IAAD,EAAOiB,OAAP,KAAmB;AAC1B,YAAM;AAAET,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBG,QAAAA,SAArB;AAAgC9C,QAAAA,GAAhC;AAAqCD,QAAAA;AAArC,UAA6CmC,IAAnD;AACA,0BACE,oBAAC,IAAD;AACE,QAAA,OAAO,EAAEQ,OADX;AAEE,QAAA,QAAQ,EAAEC,QAFZ;AAGE,QAAA,GAAG,EAAE3C,GAAG,GAAG,GAAN,GAAYD,GAHnB;AAIE,QAAA,QAAQ,EAAEA,GAAG,GAAG,GAAN,GAAYC,GAJxB;AAKE,QAAA,IAAI,EAAE,aALR;AAME,QAAA,SAAS,EAAE8C,SANb;AAOE,QAAA,GAAG,EAAE/C,GAPP;AAQE,QAAA,GAAG,EAAEC,GARP;AASE,QAAA,WAAW,EAAEF,eATf;AAUE,QAAA,YAAY,EAAEW,gBAVhB;AAWE,QAAA,SAAS,EAAEC,aAXb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAeD,KAjBA,CADH,CADF;AAsBD,GAvBA,CADH,CADF;AA4BD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n\n  // const START_NODE_ROW = 8;\n  // const START_NODE_COL = 12;\n  // const END_NODE_ROW = 22;\n  // const END_NODE_COL = 37;\n  const START_NODE_ROW = Math.floor(window.innerHeight / 55);\n  console.log(Math.floor(window.innerHeight / 50));\n  const START_NODE_COL = 12;\n  const END_NODE_ROW = 22;\n  const END_NODE_COL = 37;\n\n  const GRID_HEIGHT = window.innerHeight / 27;\n\n  useEffect(() => {\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL));\n  }, [])\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n    if (row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL) {\n      return;\n    }\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  }\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed\n      || row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  }\n  const handleMouseUp = () => {\n    mousePressed = false;\n  }\n  const depthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const breadthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    breadthFirstSearchAnimate(pathOfNodes)\n  }\n\n\n  const dijkstraVisualize = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n            }, newInterval);\n          }\n        }\n      }, interval)\n    }\n  }\n\n  const dijkstraAnimate = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode)\n    dijkstraVisualize(visitiedNodesInOrder, shortestPath)\n  }\n\n  const resetGrid = () => {\n    grid.forEach(row => row.forEach(node => {\n      const currentDomNode = document.getElementById(`loc-${node.row}-${node.col}`)\n      currentDomNode.classList.remove('node-visited', 'node-is-wall', 'node-short-visited')\n    }))\n    setGrid([])\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL));\n    // updateDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp)\n  }\n\n  return (\n    <>\n      <button onClick={resetGrid}>Reset Grid</button>\n      <button onClick={() => dijkstraAnimate()}>Dijkstra</button>\n      <button onClick={() => depthFirstSearchVisualize()}>Depth First Search</button>\n      <button onClick={() => breadthFirstSearchVisualize()}>Breadth First Search</button>\n      {getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp)}\n    </>\n  );\n}\n\n\nfunction getBlankGrid(startRow, startCol, endRow, endCol) {\n  const grid = [];\n  for (let row = 0; row < 40; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      const currentNode = {\n        col,\n        row,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === endRow && col === endCol,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n      currentRow.push(currentNode);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\nfunction getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp) {\n  return (\n    <div className='grid'>\n      {grid.map((row, rowIdx) => {\n        return (\n          <div key={rowIdx} className='grid-row'>\n            {row.map((node, nodeIdx) => {\n              const { isStart, isFinish, isVisited, col, row } = node;\n              return (\n                <Node\n                  isStart={isStart}\n                  isFinish={isFinish}\n                  key={col + '-' + row}\n                  location={row + '-' + col}\n                  test={'hello there'}\n                  isVisited={isVisited}\n                  row={row}\n                  col={col}\n                  onMouseDown={handleMouseDown}\n                  onMouseEnter={handleMouseEnter}\n                  onMouseUp={handleMouseUp}\n                ></Node>\n              );\n            })}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}