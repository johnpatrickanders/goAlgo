{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/PathfindingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport Node from './Node/Node';\nimport './PathfindingViz.css';\nexport default function PathfindingViz() {\n  const [grid, setGrid] = useState([]);\n  const START_NODE_ROW = 10;\n  const START_NODE_COL = 15;\n  const END_NODE_ROW = 10;\n  const END_NODE_COL = 35;\n  useEffect(() => {\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === 10 && col === 5,\n          isFinish: row === 10 && col === 45,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    setGrid([...grid]);\n  }, []);\n\n  const depthFirstSearchAnimate = () => {\n    console.log(grid);\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const animations = depthFirstSearch(grid, startNode, endNode);\n  };\n\n  const dijkstraAnimate = () => {};\n\n  console.log(grid);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: depthFirstSearchAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Find the Path\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, grid.map((row, rowIdx) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIdx,\n      className: \"grid-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, row.map((node, nodeIdx) => {\n      const {\n        isStart,\n        isFinish\n      } = node;\n      return /*#__PURE__*/React.createElement(Node, {\n        isStart: isStart,\n        isFinish: isFinish,\n        key: nodeIdx,\n        test: 'hello there',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }\n      });\n    }));\n  })));\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/PathfindingViz.js"],"names":["React","useState","useEffect","depthFirstSearch","Node","PathfindingViz","grid","setGrid","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","row","currentRow","col","currentNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","push","depthFirstSearchAnimate","console","log","startNode","endNode","animations","dijkstraAnimate","map","rowIdx","node","nodeIdx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  const [grid, setGrid] = useState([]);\n\n  const START_NODE_ROW = 10;\n  const START_NODE_COL = 15;\n  const END_NODE_ROW = 10;\n  const END_NODE_COL = 35;\n\n  useEffect(() => {\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === 10 && col === 5,\n          isFinish: row === 10 && col === 45,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n      grid.push(currentRow);\n    }\n    setGrid([...grid]);\n\n  }, [])\n\n  const depthFirstSearchAnimate = () => {\n    console.log(grid)\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const animations = depthFirstSearch(grid, startNode, endNode);\n  }\n\n  const dijkstraAnimate = () => {\n\n  }\n\n  console.log(grid);\n  return (\n    <>\n      <button onClick={depthFirstSearchAnimate}>Find the Path</button>\n      <div className='grid'>\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} className='grid-row'>\n              {row.map((node, nodeIdx) => {\n                const { isStart, isFinish } = node;\n                return (\n                  <Node\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    key={nodeIdx}\n                    test={'hello there'}\n                  ></Node>\n                );\n              })}\n            </div>\n          )\n        })}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}