{"ast":null,"code":"import _toConsumableArray from\"/Users/jpa/Desktop/goAlgo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/jpa/Desktop/goAlgo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import depthFirstSearch from'./depthFirstSearch';import breadthFirstSearch from'./breadthFirstSearch';import dijkstra,{getNodesInShortestPath}from'./dijkstra';import Node from'./Node/Node';import'./PathfindingViz.css';export default function PathfindingViz(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),grid=_useState2[0],setGrid=_useState2[1];var _useState3=useState(20),_useState4=_slicedToArray(_useState3,2),SPEED=_useState4[0],SET_SPEED=_useState4[1];var mousePressed=false;var START_NODE_ROW=10;var START_NODE_COL=15;var END_NODE_ROW=10;var END_NODE_COL=35;useEffect(function(){for(var row=0;row<20;row++){var currentRow=[];for(var col=0;col<50;col++){var currentNode={col:col,row:row,isStart:row===START_NODE_ROW&&col===START_NODE_COL,isFinish:row===END_NODE_ROW&&col===END_NODE_COL,distance:Infinity,isVisited:false,isWall:false,previousNode:null};currentRow.push(currentNode);}grid.push(currentRow);}setGrid(_toConsumableArray(grid));console.log('useEffect once?');},[]);var handleMouseDown=function handleMouseDown(row,col){var targetNode=grid[row][col];if(row===START_NODE_ROW&&col===START_NODE_COL||row===END_NODE_ROW&&col===END_NODE_COL){return;}mousePressed=true;targetNode.isWall=!targetNode.isWall;var targetDomNode=document.getElementById(\"loc-\".concat(row,\"-\").concat(col));targetNode.isWall?targetDomNode.classList.add('node-is-wall'):targetDomNode.classList.remove('node-is-wall');console.log(row,col,grid);};var handleMouseEnter=function handleMouseEnter(row,col){var targetNode=grid[row][col];if(!mousePressed||row===START_NODE_ROW&&col===START_NODE_COL||row===END_NODE_ROW&&col===END_NODE_COL||targetNode.isWall)return;targetNode.isWall=!targetNode.isWall;var targetDomNode=document.getElementById(\"loc-\".concat(row,\"-\").concat(col));targetNode.isWall?targetDomNode.classList.add('node-is-wall'):targetDomNode.classList.remove('node-is-wall');console.log(row,col,grid);};var handleMouseUp=function handleMouseUp(){mousePressed=false;};var depthFirstSearchAnimate=function depthFirstSearchAnimate(pathOfNodes){var _loop=function _loop(i){var interval=i*SPEED;console.log(\"interval: \",interval);setTimeout(function(){var currentPathNode=pathOfNodes[i];var currentDomNode=document.getElementById(\"loc-\".concat(currentPathNode.row,\"-\").concat(currentPathNode.col));currentDomNode.classList.add('node-visited');},interval);};for(var i=0;i<pathOfNodes.length;i++){_loop(i);}};var depthFirstSearchVisualize=function depthFirstSearchVisualize(){var startNode=grid[START_NODE_ROW][START_NODE_COL];var endNode=grid[END_NODE_ROW][END_NODE_COL];var pathOfNodes=depthFirstSearch(grid,startNode,endNode);depthFirstSearchAnimate(pathOfNodes);};var breadthFirstSearchAnimate=function breadthFirstSearchAnimate(pathOfNodes){var _loop2=function _loop2(i){var interval=i*SPEED;console.log(\"interval: \",interval);setTimeout(function(){var currentPathNode=pathOfNodes[i];var currentDomNode=document.getElementById(\"loc-\".concat(currentPathNode.row,\"-\").concat(currentPathNode.col));currentDomNode.classList.add('node-visited');},interval);};for(var i=0;i<pathOfNodes.length;i++){_loop2(i);}};var breadthFirstSearchVisualize=function breadthFirstSearchVisualize(){var startNode=grid[START_NODE_ROW][START_NODE_COL];var endNode=grid[END_NODE_ROW][END_NODE_COL];var pathOfNodes=breadthFirstSearch(grid,startNode,endNode);console.log(pathOfNodes);breadthFirstSearchAnimate(pathOfNodes);};var dijkstraVisualize=function dijkstraVisualize(pathOfNodes,shortestPath){var _loop3=function _loop3(i){var interval=i*SPEED;console.log(\"interval: \",interval);setTimeout(function(){var currentPathNode=pathOfNodes[i];var currentDomNode=document.getElementById(\"loc-\".concat(currentPathNode.row,\"-\").concat(currentPathNode.col));currentDomNode.classList.add('node-visited');if(i===pathOfNodes.length-1){var _loop4=function _loop4(j){var newInterval=j*SPEED;setTimeout(function(){var currentShortNode=shortestPath[j];var currentShortDomNode=document.getElementById(\"loc-\".concat(currentShortNode.row,\"-\").concat(currentShortNode.col));currentShortDomNode.classList.add('node-short-visited');},newInterval);};for(var j=0;j<shortestPath.length;j++){_loop4(j);}}},interval);};for(var i=0;i<pathOfNodes.length;i++){_loop3(i);}};var dijkstraAnimate=function dijkstraAnimate(){var startNode=grid[START_NODE_ROW][START_NODE_COL];var endNode=grid[END_NODE_ROW][END_NODE_COL];var visitiedNodesInOrder=dijkstra(grid,startNode,endNode);var shortestPath=getNodesInShortestPath(endNode);console.log(shortestPath);dijkstraVisualize(visitiedNodesInOrder,shortestPath);};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return dijkstraAnimate();}},\"Dijkstra\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return depthFirstSearchVisualize();}},\"Depth First Search\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return breadthFirstSearchVisualize();}},\"Breadth First Search\"),/*#__PURE__*/React.createElement(\"div\",{className:\"grid\"},grid.map(function(row,rowIdx){return/*#__PURE__*/React.createElement(\"div\",{key:rowIdx,className:\"grid-row\"},row.map(function(node,nodeIdx){var isStart=node.isStart,isFinish=node.isFinish,isVisited=node.isVisited,col=node.col,row=node.row;return/*#__PURE__*/React.createElement(Node,{isStart:isStart,isFinish:isFinish,key:col+'-'+row,location:row+'-'+col,test:'hello there',isVisited:isVisited,row:row,col:col,onMouseDown:handleMouseDown,onMouseEnter:handleMouseEnter,onMouseUp:handleMouseUp});}));})));}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/PathfindingViz.js"],"names":["React","useState","useEffect","depthFirstSearch","breadthFirstSearch","dijkstra","getNodesInShortestPath","Node","PathfindingViz","grid","setGrid","SPEED","SET_SPEED","mousePressed","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","row","currentRow","col","currentNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","push","console","log","handleMouseDown","targetNode","targetDomNode","document","getElementById","classList","add","remove","handleMouseEnter","handleMouseUp","depthFirstSearchAnimate","pathOfNodes","i","interval","setTimeout","currentPathNode","currentDomNode","length","depthFirstSearchVisualize","startNode","endNode","breadthFirstSearchAnimate","breadthFirstSearchVisualize","dijkstraVisualize","shortestPath","j","newInterval","currentShortNode","currentShortDomNode","dijkstraAnimate","visitiedNodesInOrder","map","rowIdx","node","nodeIdx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n\n  const START_NODE_ROW = 10;\n  const START_NODE_COL = 15;\n  const END_NODE_ROW = 10;\n  const END_NODE_COL = 35;\n\n  useEffect(() => {\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === END_NODE_ROW && col === END_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n      grid.push(currentRow);\n    }\n    setGrid([...grid]);\n    console.log('useEffect once?')\n  }, [])\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n    if (row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL) {\n      return;\n    }\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  }\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed\n      || row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  }\n  const handleMouseUp = () => {\n    mousePressed = false;\n  }\n  const depthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const breadthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    console.log(pathOfNodes)\n    breadthFirstSearchAnimate(pathOfNodes)\n  }\n\n\n  const dijkstraVisualize = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n            }, newInterval);\n          }\n        }\n      }, interval)\n    }\n  }\n\n  const dijkstraAnimate = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode)\n    console.log(shortestPath);\n    dijkstraVisualize(visitiedNodesInOrder, shortestPath)\n  }\n  return (\n    <>\n      <button onClick={() => dijkstraAnimate()}>Dijkstra</button>\n      <button onClick={() => depthFirstSearchVisualize()}>Depth First Search</button>\n      <button onClick={() => breadthFirstSearchVisualize()}>Breadth First Search</button>\n      <div className='grid'>\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} className='grid-row'>\n              {row.map((node, nodeIdx) => {\n                const { isStart, isFinish, isVisited, col, row } = node;\n                return (\n                  <Node\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    key={col + '-' + row}\n                    location={row + '-' + col}\n                    test={'hello there'}\n                    isVisited={isVisited}\n                    row={row}\n                    col={col}\n                    onMouseDown={handleMouseDown}\n                    onMouseEnter={handleMouseEnter}\n                    onMouseUp={handleMouseUp}\n                  ></Node>\n                );\n              })}\n            </div>\n          )\n        })}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}