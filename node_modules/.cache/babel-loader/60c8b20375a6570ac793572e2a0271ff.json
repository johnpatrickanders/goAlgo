{"ast":null,"code":"export default function depthFirstSearch(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  console.log(unvisitedNodes);\n\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    if (nearestNode === endNode) return visitedNodesInOrder;\n    updateNeighbors(nearestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  if (col < grid[0][col].length - 1) neighbors.push(grid[row][col + 1]); // \"bottom\"\n\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/dijkstra.js"],"names":["depthFirstSearch","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","console","log","length","sortNodesByDistance","nearestNode","shift","isVisited","updateNeighbors","sort","nodeOne","nodeTwo","getNeighbors","node","neighbors","col","row","push","neighbor","nodes"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoD;AAEjE,QAAMC,mBAAmB,GAAG,EAA5B;AAEAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;;AACA,SAAOA,cAAc,CAACI,MAAf,GAAwB,CAA/B,EAAkC;AAChCC,IAAAA,mBAAmB,CAACL,cAAD,CAAnB;AACA,UAAMM,WAAW,GAAGN,cAAc,CAACO,KAAf,EAApB;AACAD,IAAAA,WAAW,CAACE,SAAZ,GAAwB,IAAxB;AACA,QAAIF,WAAW,KAAKT,OAApB,EAA6B,OAAOC,mBAAP;AAC7BW,IAAAA,eAAe,CAACH,WAAD,EAAcX,IAAd,CAAf;AACD;AACF;;AAED,SAASU,mBAAT,CAA6BL,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACU,IAAf,CAAoB,CAACC,OAAD,EAAUC,OAAV,KAAsBD,OAAO,CAACZ,QAAR,GAAmBa,OAAO,CAACb,QAArE;AACD;;AAED,SAASc,YAAT,CAAsBC,IAAtB,EAA4BnB,IAA5B,EAAkC;AAChC,QAAMoB,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeH,IAArB;AACA,MAAIG,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACG,IAAV,CAAevB,IAAI,CAACsB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAHmB,CAGiB;;AACjD,MAAIC,GAAG,GAAGtB,IAAI,CAACS,MAAL,GAAc,CAAxB,EAA2BW,SAAS,CAACG,IAAV,CAAevB,IAAI,CAACsB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAJK,CAI+B;;AAC/D,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACG,IAAV,CAAevB,IAAI,CAACsB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EALmB,CAKgB;;AAChD,MAAIA,GAAG,GAAGrB,IAAI,CAAC,CAAD,CAAJ,CAAQqB,GAAR,EAAaZ,MAAb,GAAsB,CAAhC,EAAmCW,SAAS,CAACG,IAAV,CAAevB,IAAI,CAACsB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EANH,CAMsC;;AACtE,SAAOD,SAAP;AACD;;AAED,SAASN,eAAT,CAAyBK,IAAzB,EAA+BnB,IAA/B,EAAqC;AACnC,QAAMoB,SAAS,GAAGF,YAAY,CAACC,IAAD,EAAOnB,IAAP,CAA9B;;AACA,OAAK,MAAMwB,QAAX,IAAuBJ,SAAvB,EAAkC;AAChCI,IAAAA,QAAQ,CAACpB,QAAT,GAAoBe,IAAI,CAACf,QAAL,GAAgB,CAApC;AACD;AACF;;AAED,SAASE,WAAT,CAAqBN,IAArB,EAA2B;AACzB,QAAMyB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMH,GAAX,IAAkBtB,IAAlB,EAAwB;AACtB,SAAK,MAAMmB,IAAX,IAAmBG,GAAnB,EAAwB;AACtBG,MAAAA,KAAK,CAACF,IAAN,CAAWJ,IAAX;AACD;AACF;;AACD,SAAOM,KAAP;AACD","sourcesContent":["export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const visitedNodesInOrder = [];\n\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  console.log(unvisitedNodes);\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes)\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    if (nearestNode === endNode) return visitedNodesInOrder;\n    updateNeighbors(nearestNode, grid)\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0) neighbors.push(grid[row][col - 1]) // \"left\"\n  if (col < grid[0][col].length - 1) neighbors.push(grid[row][col + 1]) // \"bottom\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}