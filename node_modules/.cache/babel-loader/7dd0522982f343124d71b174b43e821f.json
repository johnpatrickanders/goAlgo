{"ast":null,"code":"export default function breadthSearchFirst(grid, startNode, endNode) {\n  console.log('BST start ===');\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid);\n  return pathOfNodes;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction breadthSearchFirstHelp(startNode, grid) {\n  console.log('BST help...', grid);\n  const array = [];\n  const queue = [startNode];\n\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    console.log(currentNode);\n    if (currentNode.isFinish) return array;\n\n    if (!currentNode.isStart) {\n      currentNode.isVisited = true;\n      array.push(currentNode);\n    }\n\n    const neighbors = getNeighbors(currentNode, grid);\n    queue.push(...neighbors);\n  }\n\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/breadthFirstSearch.js"],"names":["breadthSearchFirst","grid","startNode","endNode","console","log","pathOfNodes","breadthSearchFirstHelp","sortNodesByDistance","unvisitedNodes","sort","nodeOne","nodeTwo","distance","array","queue","length","currentNode","shift","isFinish","isStart","isVisited","push","neighbors","getNeighbors","node","col","row","updateNeighbors","neighbor","getAllNodes","nodes"],"mappings":"AAAA,eAAe,SAASA,kBAAT,CAA4BC,IAA5B,EAAkCC,SAAlC,EAA6CC,OAA7C,EAAsD;AACnEC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMC,WAAW,GAAGC,sBAAsB,CAACL,SAAD,EAAYD,IAAZ,CAA1C;AACA,SAAOK,WAAP;AAED;;AAED,SAASE,mBAAT,CAA6BC,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,OAAD,EAAUC,OAAV,KAAsBD,OAAO,CAACE,QAAR,GAAmBD,OAAO,CAACC,QAArE;AACD;;AAED,SAASN,sBAAT,CAAgCL,SAAhC,EAA2CD,IAA3C,EAAiD;AAC/CG,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,IAA3B;AACA,QAAMa,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,CAACb,SAAD,CAAd;;AACA,SAAOa,KAAK,CAACC,MAAN,GAAe,CAAtB,EAAyB;AACvB,UAAMC,WAAW,GAAGF,KAAK,CAACG,KAAN,EAApB;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYY,WAAZ;AACA,QAAIA,WAAW,CAACE,QAAhB,EAA0B,OAAOL,KAAP;;AAC1B,QAAI,CAACG,WAAW,CAACG,OAAjB,EAA0B;AACxBH,MAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAP,MAAAA,KAAK,CAACQ,IAAN,CAAWL,WAAX;AACD;;AACD,UAAMM,SAAS,GAAGC,YAAY,CAACP,WAAD,EAAchB,IAAd,CAA9B;AACAc,IAAAA,KAAK,CAACO,IAAN,CAAW,GAAGC,SAAd;AACD;;AAED,SAAOT,KAAP;AACD;;AAGD,SAASU,YAAT,CAAsBC,IAAtB,EAA4BxB,IAA5B,EAAkC;AAChC,QAAMsB,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEG,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeF,IAArB;AACA,MAAIE,GAAG,GAAG,CAAN,IAAW,CAAC1B,IAAI,CAAC0B,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBL,SAAnC,EAA8CE,SAAS,CAACD,IAAV,CAAerB,IAAI,CAAC0B,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAHd,CAGkD;;AAClF,MAAIA,GAAG,GAAGzB,IAAI,CAAC,CAAD,CAAJ,CAAQe,MAAR,GAAiB,CAAvB,IAA4B,CAACf,IAAI,CAAC0B,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBL,SAApD,EAA+DE,SAAS,CAACD,IAAV,CAAerB,IAAI,CAAC0B,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EAJ/B,CAIkE;;AAClG,MAAIC,GAAG,GAAG1B,IAAI,CAACe,MAAL,GAAc,CAApB,IAAyB,CAACf,IAAI,CAAC0B,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBL,SAAjD,EAA4DE,SAAS,CAACD,IAAV,CAAerB,IAAI,CAAC0B,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAL5B,CAKgE;;AAChG,MAAIA,GAAG,GAAG,CAAN,IAAW,CAACzB,IAAI,CAAC0B,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBL,SAAnC,EAA8CE,SAAS,CAACD,IAAV,CAAerB,IAAI,CAAC0B,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EANd,CAMiD;;AACjF,SAAOH,SAAP;AACD;;AAED,SAASK,eAAT,CAAyBH,IAAzB,EAA+BxB,IAA/B,EAAqC;AACnC,QAAMsB,SAAS,GAAGC,YAAY,CAACC,IAAD,EAAOxB,IAAP,CAA9B;;AACA,OAAK,MAAM4B,QAAX,IAAuBN,SAAvB,EAAkC;AAChCM,IAAAA,QAAQ,CAAChB,QAAT,GAAoBY,IAAI,CAACZ,QAAL,GAAgB,CAApC;AACD;AACF;;AAED,SAASiB,WAAT,CAAqB7B,IAArB,EAA2B;AACzB,QAAM8B,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMJ,GAAX,IAAkB1B,IAAlB,EAAwB;AACtB,SAAK,MAAMwB,IAAX,IAAmBE,GAAnB,EAAwB;AACtBI,MAAAA,KAAK,CAACT,IAAN,CAAWG,IAAX;AACD;AACF;;AACD,SAAOM,KAAP;AACD","sourcesContent":["export default function breadthSearchFirst(grid, startNode, endNode) {\n  console.log('BST start ===')\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction breadthSearchFirstHelp(startNode, grid) {\n  console.log('BST help...', grid)\n  const array = []\n  const queue = [startNode]\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    console.log(currentNode)\n    if (currentNode.isFinish) return array;\n    if (!currentNode.isStart) {\n      currentNode.isVisited = true;\n      array.push(currentNode);\n    }\n    const neighbors = getNeighbors(currentNode, grid);\n    queue.push(...neighbors)\n  }\n\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}