{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport './SortingViz.css';\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  const SPEED = 10;\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 120);\n\n  const resetArray = () => {\n    const array = [];\n\n    for (let i = 0; i < maxBarContainerWidth; i += 1) {\n      array.push(randomInt(5, maxBarHeight));\n    }\n\n    setArray(array);\n  };\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    const framedAnimations = [];\n\n    for (const animation of animations) {\n      framedAnimations.push(animation.comparison);\n      framedAnimations.push(animation.comparison);\n      framedAnimations.push(animation.swap);\n    }\n\n    console.log(animations);\n    console.log(framedAnimations);\n\n    for (let i = 0; i < framedAnimations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = framedAnimations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor; // setTimeout(() => {\n          //   bars[comparison[1]].style.backgroundColor = 'red';\n          //   bars[comparison[0]].style.backgroundColor = 'red';\n          // }, (i + 1) * SPEED)\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          // if (barOneIdx < barTwoIdx) {\n          // const firstHeight = framedAnimations[barOneIdx];\n          // const secondHeight = framedAnimations[barTwoIdx];\n          const tempHeight = barOne.height;\n          barOne.height = barTwo.height;\n          barTwo.height = tempHeight; // }\n        }, i * SPEED);\n      }\n    }\n  }; // const mergeSort = () => {\n  //   const jsSortedArray = array.slice()\n  //   jsSortedArray.sort((a, b) => a - b)\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, array.map((value, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-bar\",\n    key: i,\n    style: {\n      height: `${value}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Get New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: bubbleSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Bubble Sort\"));\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min);\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n\n  return true;\n} // console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js"],"names":["React","useState","useEffect","bubbleSort","SortingViz","array","setArray","SPEED","maxBarHeight","Math","floor","window","screen","availHeight","maxBarContainerWidth","availWidth","resetArray","i","push","randomInt","bubbleSortAnimate","animations","framedAnimations","animation","comparison","swap","console","log","length","bars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOne","style","barTwo","isColorChange","setTimeout","currentBarColor","backgroundColor","tempHeight","height","map","value","min","max","random","arraysEqual","array1","array2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport './SortingViz.css';\n\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n\n  const SPEED = 10;\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 120);\n\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < maxBarContainerWidth; i += 1) {\n      array.push(randomInt(5, maxBarHeight))\n    }\n    setArray(array)\n  }\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    const framedAnimations = [];\n    for (const animation of animations) {\n      framedAnimations.push(animation.comparison);\n      framedAnimations.push(animation.comparison);\n      framedAnimations.push(animation.swap);\n    }\n    console.log(animations)\n    console.log(framedAnimations)\n\n    for (let i = 0; i < framedAnimations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = framedAnimations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          // setTimeout(() => {\n          //   bars[comparison[1]].style.backgroundColor = 'red';\n          //   bars[comparison[0]].style.backgroundColor = 'red';\n          // }, (i + 1) * SPEED)\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          // if (barOneIdx < barTwoIdx) {\n\n          // const firstHeight = framedAnimations[barOneIdx];\n          // const secondHeight = framedAnimations[barTwoIdx];\n          const tempHeight = barOne.height;\n          barOne.height = barTwo.height;\n          barTwo.height = tempHeight;\n          // }\n        }, i * SPEED)\n      }\n    }\n  }\n\n  // const mergeSort = () => {\n  //   const jsSortedArray = array.slice()\n  //   jsSortedArray.sort((a, b) => a - b)\n  // }\n\n  return (\n    <div className=\"array-container\">\n      {array.map((value, i) => (\n        <div\n          className=\"array-bar\"\n          key={i}\n          style={{ height: `${value}px` }}\n        >\n        </div>\n      ))}\n      <button onClick={resetArray}>Get New Array</button>\n      <button onClick={bubbleSortAnimate}>Bubble Sort</button>\n    </div>\n  )\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min)\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n  return true;\n}\n\n// console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))\n"]},"metadata":{},"sourceType":"module"}