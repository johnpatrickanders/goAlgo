{"ast":null,"code":"import _toConsumableArray from\"/Users/jpa/Desktop/goAlgo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";export default function breadthSearchFirst(grid,startNode,endNode){var pathOfNodes=breadthSearchFirstHelp(startNode,grid);return pathOfNodes;}function breadthSearchFirstHelp(startNode,grid){var array=[];var queue=[startNode];while(queue.length>0){var currentNode=queue.shift();if(currentNode.isWall)continue;currentNode.isVisited=true;if(currentNode.isFinish)return array;if(!currentNode.isStart){array.push(currentNode);}var neighbors=getNeighbors(currentNode,grid);neighbors.forEach(function(node){return node.isVisited=true;});queue.push.apply(queue,_toConsumableArray(neighbors));}return array;}function getNeighbors(node,grid){var neighbors=[];var col=node.col,row=node.row;if(row>0&&!grid[row-1][col].isVisited)neighbors.push(grid[row-1][col]);// \"top\"\nif(col<grid[0].length-1&&!grid[row][col+1].isVisited)neighbors.push(grid[row][col+1]);// \"right\"\nif(row<grid.length-1&&!grid[row+1][col].isVisited)neighbors.push(grid[row+1][col]);// \"bottom\"\nif(col>0&&!grid[row][col-1].isVisited)neighbors.push(grid[row][col-1]);// \"left\"\nreturn neighbors;}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/breadthFirstSearch.js"],"names":["breadthSearchFirst","grid","startNode","endNode","pathOfNodes","breadthSearchFirstHelp","array","queue","length","currentNode","shift","isWall","isVisited","isFinish","isStart","push","neighbors","getNeighbors","forEach","node","col","row"],"mappings":"wJAAA,cAAe,SAASA,CAAAA,kBAAT,CAA4BC,IAA5B,CAAkCC,SAAlC,CAA6CC,OAA7C,CAAsD,CACnE,GAAMC,CAAAA,WAAW,CAAGC,sBAAsB,CAACH,SAAD,CAAYD,IAAZ,CAA1C,CACA,MAAOG,CAAAA,WAAP,CAED,CAED,QAASC,CAAAA,sBAAT,CAAgCH,SAAhC,CAA2CD,IAA3C,CAAiD,CAC/C,GAAMK,CAAAA,KAAK,CAAG,EAAd,CACA,GAAMC,CAAAA,KAAK,CAAG,CAACL,SAAD,CAAd,CACA,MAAOK,KAAK,CAACC,MAAN,CAAe,CAAtB,CAAyB,CACvB,GAAMC,CAAAA,WAAW,CAAGF,KAAK,CAACG,KAAN,EAApB,CACA,GAAID,WAAW,CAACE,MAAhB,CAAwB,SACxBF,WAAW,CAACG,SAAZ,CAAwB,IAAxB,CACA,GAAIH,WAAW,CAACI,QAAhB,CAA0B,MAAOP,CAAAA,KAAP,CAC1B,GAAI,CAACG,WAAW,CAACK,OAAjB,CAA0B,CACxBR,KAAK,CAACS,IAAN,CAAWN,WAAX,EACD,CACD,GAAMO,CAAAA,SAAS,CAAGC,YAAY,CAACR,WAAD,CAAcR,IAAd,CAA9B,CACAe,SAAS,CAACE,OAAV,CAAkB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACP,SAAL,CAAiB,IAArB,EAAtB,EACAL,KAAK,CAACQ,IAAN,OAAAR,KAAK,oBAASS,SAAT,EAAL,CACD,CAED,MAAOV,CAAAA,KAAP,CACD,CAGD,QAASW,CAAAA,YAAT,CAAsBE,IAAtB,CAA4BlB,IAA5B,CAAkC,CAChC,GAAMe,CAAAA,SAAS,CAAG,EAAlB,CADgC,GAExBI,CAAAA,GAFwB,CAEXD,IAFW,CAExBC,GAFwB,CAEnBC,GAFmB,CAEXF,IAFW,CAEnBE,GAFmB,CAGhC,GAAIA,GAAG,CAAG,CAAN,EAAW,CAACpB,IAAI,CAACoB,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBR,SAAnC,CAA8CI,SAAS,CAACD,IAAV,CAAed,IAAI,CAACoB,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAAoC;AAClF,GAAIA,GAAG,CAAGnB,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,CAAiB,CAAvB,EAA4B,CAACP,IAAI,CAACoB,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,EAAmBR,SAApD,CAA+DI,SAAS,CAACD,IAAV,CAAed,IAAI,CAACoB,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,CAAf,EAAmC;AAClG,GAAIC,GAAG,CAAGpB,IAAI,CAACO,MAAL,CAAc,CAApB,EAAyB,CAACP,IAAI,CAACoB,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBR,SAAjD,CAA4DI,SAAS,CAACD,IAAV,CAAed,IAAI,CAACoB,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAAoC;AAChG,GAAIA,GAAG,CAAG,CAAN,EAAW,CAACnB,IAAI,CAACoB,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,EAAmBR,SAAnC,CAA8CI,SAAS,CAACD,IAAV,CAAed,IAAI,CAACoB,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,CAAf,EAAmC;AACjF,MAAOJ,CAAAA,SAAP,CACD","sourcesContent":["export default function breadthSearchFirst(grid, startNode, endNode) {\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction breadthSearchFirstHelp(startNode, grid) {\n  const array = []\n  const queue = [startNode]\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    if (currentNode.isWall) continue;\n    currentNode.isVisited = true;\n    if (currentNode.isFinish) return array;\n    if (!currentNode.isStart) {\n      array.push(currentNode);\n    }\n    const neighbors = getNeighbors(currentNode, grid);\n    neighbors.forEach(node => node.isVisited = true);\n    queue.push(...neighbors)\n  }\n\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n"]},"metadata":{},"sourceType":"module"}