{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/jpa/Desktop/goAlgo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"/Users/jpa/Desktop/goAlgo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";export default function breadthSearchFirst(grid,startNode,endNode){console.log('BST start ===');var pathOfNodes=breadthSearchFirstHelp(startNode,grid);return pathOfNodes;}function sortNodesByDistance(unvisitedNodes){unvisitedNodes.sort(function(nodeOne,nodeTwo){return nodeOne.distance-nodeTwo.distance;});}function breadthSearchFirstHelp(startNode,grid){console.log('BST help...',grid);var array=[];var queue=[startNode];// let i = 10\nwhile(queue.length>0){var currentNode=queue.shift();if(currentNode.isWall)continue;currentNode.isVisited=true;console.log(currentNode);if(currentNode.isFinish)return array;if(!currentNode.isStart){array.push(currentNode);}// grid[currentNode.row][currentNode.col].isVisited = true\nvar neighbors=getNeighbors(currentNode,grid);neighbors.forEach(function(node){return node.isVisited=true;});// console.log(neighbors)\nqueue.push.apply(queue,_toConsumableArray(neighbors));// i--;\n}return array;}function getNeighbors(node,grid){var neighbors=[];var col=node.col,row=node.row;if(row>0&&!grid[row-1][col].isVisited)neighbors.push(grid[row-1][col]);// \"top\"\nif(col<grid[0].length-1&&!grid[row][col+1].isVisited)neighbors.push(grid[row][col+1]);// \"right\"\nif(row<grid.length-1&&!grid[row+1][col].isVisited)neighbors.push(grid[row+1][col]);// \"bottom\"\nif(col>0&&!grid[row][col-1].isVisited)neighbors.push(grid[row][col-1]);// \"left\"\nreturn neighbors;}function updateNeighbors(node,grid){var neighbors=getNeighbors(node,grid);var _iterator=_createForOfIteratorHelper(neighbors),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var neighbor=_step.value;neighbor.distance=node.distance+1;}}catch(err){_iterator.e(err);}finally{_iterator.f();}}function getAllNodes(grid){var nodes=[];var _iterator2=_createForOfIteratorHelper(grid),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var row=_step2.value;for(var node in row){nodes.push(node);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return nodes;}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/breadthFirstSearch.js"],"names":["breadthSearchFirst","grid","startNode","endNode","console","log","pathOfNodes","breadthSearchFirstHelp","sortNodesByDistance","unvisitedNodes","sort","nodeOne","nodeTwo","distance","array","queue","length","currentNode","shift","isWall","isVisited","isFinish","isStart","push","neighbors","getNeighbors","forEach","node","col","row","updateNeighbors","neighbor","getAllNodes","nodes"],"mappings":"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","sourcesContent":["export default function breadthSearchFirst(grid, startNode, endNode) {\n  console.log('BST start ===')\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction breadthSearchFirstHelp(startNode, grid) {\n  console.log('BST help...', grid)\n  const array = []\n  const queue = [startNode]\n  // let i = 10\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    if (currentNode.isWall) continue;\n    currentNode.isVisited = true;\n    console.log(currentNode)\n    if (currentNode.isFinish) return array;\n    if (!currentNode.isStart) {\n      array.push(currentNode);\n    }\n    // grid[currentNode.row][currentNode.col].isVisited = true\n    const neighbors = getNeighbors(currentNode, grid);\n    neighbors.forEach(node => node.isVisited = true);\n    // console.log(neighbors)\n    queue.push(...neighbors)\n    // i--;\n  }\n\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}