{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/src/PathfindingViz/PathfindingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\nimport './PathfindingViz.css';\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n  const START_NODE_ROW = 8;\n  const START_NODE_COL = 12;\n  const END_NODE_ROW = 22;\n  const END_NODE_COL = 37;\n  useEffect(() => {\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL));\n  }, []);\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n\n    if (row === START_NODE_ROW && col === START_NODE_COL || row === END_NODE_ROW && col === END_NODE_COL) {\n      return;\n    }\n\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  };\n\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed || row === START_NODE_ROW && col === START_NODE_COL || row === END_NODE_ROW && col === END_NODE_COL || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  };\n\n  const handleMouseUp = () => {\n    mousePressed = false;\n  };\n\n  const depthFirstSearchAnimate = pathOfNodes => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval);\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval);\n    }\n  };\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes);\n  };\n\n  const breadthFirstSearchAnimate = pathOfNodes => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval);\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval);\n    }\n  };\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    console.log(pathOfNodes);\n    breadthFirstSearchAnimate(pathOfNodes);\n  };\n\n  const dijkstraVisualize = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval);\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n            }, newInterval);\n          }\n        }\n      }, interval);\n    }\n  };\n\n  const dijkstraAnimate = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode);\n    console.log(shortestPath);\n    dijkstraVisualize(visitiedNodesInOrder, shortestPath);\n  };\n\n  const resetGrid = () => {\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, \"Reset Grid\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dijkstraAnimate(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Dijkstra\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => depthFirstSearchVisualize(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"Depth First Search\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => breadthFirstSearchVisualize(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, \"Breadth First Search\"));\n}\n\nfunction getBlankGrid(startRow, startCol, endRow, endCol) {\n  const grid = [];\n\n  for (let row = 0; row < 40; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      const currentNode = {\n        col,\n        row,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === endRow && col === endCol,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n      currentRow.push(currentNode);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/PathfindingViz.js"],"names":["React","useState","useEffect","depthFirstSearch","breadthFirstSearch","dijkstra","getNodesInShortestPath","Node","PathfindingViz","grid","setGrid","SPEED","SET_SPEED","mousePressed","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","getBlankGrid","handleMouseDown","row","col","targetNode","isWall","targetDomNode","document","getElementById","classList","add","remove","console","log","handleMouseEnter","handleMouseUp","depthFirstSearchAnimate","pathOfNodes","i","length","interval","setTimeout","currentPathNode","currentDomNode","depthFirstSearchVisualize","startNode","endNode","breadthFirstSearchAnimate","breadthFirstSearchVisualize","dijkstraVisualize","shortestPath","j","newInterval","currentShortNode","currentShortDomNode","dijkstraAnimate","visitiedNodesInOrder","resetGrid","startRow","startCol","endRow","endCol","currentRow","currentNode","isStart","isFinish","distance","Infinity","isVisited","previousNode","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n\n  const START_NODE_ROW = 8;\n  const START_NODE_COL = 12;\n  const END_NODE_ROW = 22;\n  const END_NODE_COL = 37;\n\n  useEffect(() => {\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL));\n  }, [])\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n    if (row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL) {\n      return;\n    }\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  }\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed\n      || row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  }\n  const handleMouseUp = () => {\n    mousePressed = false;\n  }\n  const depthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const breadthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    console.log(pathOfNodes)\n    breadthFirstSearchAnimate(pathOfNodes)\n  }\n\n\n  const dijkstraVisualize = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n            }, newInterval);\n          }\n        }\n      }, interval)\n    }\n  }\n\n  const dijkstraAnimate = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode)\n    console.log(shortestPath);\n    dijkstraVisualize(visitiedNodesInOrder, shortestPath)\n  }\n\n  const resetGrid = () => {\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL));\n  }\n\n  return (\n    <>\n      <button onClick={resetGrid}>Reset Grid</button>\n      <button onClick={() => dijkstraAnimate()}>Dijkstra</button>\n      <button onClick={() => depthFirstSearchVisualize()}>Depth First Search</button>\n      <button onClick={() => breadthFirstSearchVisualize()}>Breadth First Search</button>\n      {/* <div className='grid'>\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} className='grid-row'>\n              {row.map((node, nodeIdx) => {\n                const { isStart, isFinish, isVisited, col, row } = node;\n                return (\n                  <Node\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    key={col + '-' + row}\n                    location={row + '-' + col}\n                    test={'hello there'}\n                    isVisited={isVisited}\n                    row={row}\n                    col={col}\n                    onMouseDown={handleMouseDown}\n                    onMouseEnter={handleMouseEnter}\n                    onMouseUp={handleMouseUp}\n                  ></Node>\n                );\n              })}\n            </div>\n          )\n        })}\n      </div> */}\n    </>\n  );\n}\n\nfunction getBlankGrid(startRow, startCol, endRow, endCol) {\n  const grid = [];\n  for (let row = 0; row < 40; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      const currentNode = {\n        col,\n        row,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === endRow && col === endCol,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n      currentRow.push(currentNode);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n"]},"metadata":{},"sourceType":"module"}