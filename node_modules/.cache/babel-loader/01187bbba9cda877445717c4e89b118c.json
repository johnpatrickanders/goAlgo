{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nimport Slider from './SpeedControls';\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  const [NUM_BARS, SET_NUM_BARS] = useState(20); // let SPEED = 150;\n\n  let [SPEED, setSpeed] = useState(0.5);\n\n  const handleChange = e => {\n    SPEED = 1 / e.target.value;\n    setSpeed(SPEED);\n  }; // const BarVars = React.createContext({ speed: SPEED, numBars: NUM_BARS })\n\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 150);\n  let stopLoop = false;\n  let numStops = 0;\n\n  const resetArray = () => {\n    const array = [];\n\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight));\n    }\n\n    setArray(array);\n  };\n\n  const resetColors = () => {\n    const bars = document.getElementsByClassName('array-bar');\n\n    for (let bar of bars) {\n      bar.style.backgroundColor = \"orangered\";\n    }\n  };\n\n  const stop = () => {\n    // for (let i = 0; i < array.length * 3; i++) {\n    if (!stopLoop) {\n      stopLoop = !stopLoop;\n      stopLoop = !stopLoop;\n    } // let i = stopTimeouts.length - 1;\n\n\n    while (numStops >= 0) {\n      clearTimeout(numStops);\n      console.log(\"STOPPPPPP\");\n      numStops--;\n    }\n\n    numStops = 0;\n  };\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED);\n      }\n\n      numStops += 1; // stopTimeouts.push(stop1);\n      // stopTimeouts.push(stop2);\n      // console.log(stopTimeouts)\n    }\n  };\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    console.log(array.length);\n    console.log(animations);\n    const bars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animations.length; i++) {\n      // const barsArr = [...bars]\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = 'orange';\n\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i];\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n\n            const splice = (currIdx, startIdx, subArr) => {\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height;\n                subArr[currIdx - 1].style.height = temp;\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor;\n                subArr[currIdx - 1].style.backgroundColor = tempColor;\n                currIdx -= 1;\n              }\n            };\n\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                splice(currIdx, otherIdx, bars);\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          } // setTimeout(() => {\n          //   barTwo.backgroundColor = 'green';\n          // }, i * SPEED)\n\n        }, i * SPEED);\n      }\n    }\n  };\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1]; // const prevSortedBar = barOneIdx > 0 ? bars[barOneIdx - 1].style : barTwo;\n          // if (barTwo.height < prevSortedBar.height) {\n          //   barTwo.backgroundColor = 'yellow'\n          // }\n\n          if (barOneIdx !== prevBarOneIdx || barTwoIdx !== prevBarTwoIdx || barTwoIdx === array.length - 1 || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED);\n      }\n    }\n  };\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barPivot.backgroundColor = 'purple';\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor; // if (barOneIdx === barTwoIdx) {\n          //   barTwo.backgroundColor = 'orange';\n          // }\n\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n          || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'green';\n            barTwo.backgroundColor = 'green';\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            // special \"pivot\" swap\n            barPivot.backgroundColor = 'purple';\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = 'green';\n          } // barPivot.backgroundColor = 'green';\n\n\n          barTwo.backgroundColor = 'green';\n        }, i * SPEED);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"algo-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }\n  }, array.map((value, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-bar\",\n    key: i,\n    style: {\n      height: `${value}px`,\n      backgroundColor: 'orangered',\n      width: `${90 / NUM_BARS}vh`,\n      display: 'inline-block',\n      margin: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slidecontainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange,\n    type: \"range\",\n    min: \"0\",\n    max: \"1\",\n    value: SPEED,\n    className: \"slider\",\n    id: \"myRange\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetColors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, \"Reset Colors\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, \"Get New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: bubbleSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: insertionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: selectionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }, \"Selection Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: quickSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }\n  }, \"Quick Sort\")));\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min);\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n\n  return true;\n} // console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js"],"names":["React","useState","useEffect","bubbleSort","insertionSort","selectionSort","quickSort","Slider","SortingViz","array","setArray","NUM_BARS","SET_NUM_BARS","SPEED","setSpeed","handleChange","e","target","value","maxBarHeight","Math","floor","window","screen","availHeight","maxBarContainerWidth","availWidth","stopLoop","numStops","resetArray","i","push","randomInt","resetColors","bars","document","getElementsByClassName","bar","style","backgroundColor","stop","clearTimeout","console","log","bubbleSortAnimate","animations","length","barOneIdx","barTwoIdx","barOne","barTwo","isColorChange","setTimeout","currentBarColor","tempHeight","height","insertionSortAnimate","currIdx","otherIdx","initIdx","splice","startIdx","subArr","temp","tempColor","selectionSortAnimate","prevBarOneIdx","prevBarTwoIdx","quickSortAnimate","pivotIdx","barPivot","map","width","display","margin","min","max","random","arraysEqual","array1","array2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nimport Slider from './SpeedControls';\n\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  const [NUM_BARS, SET_NUM_BARS] = useState(20);\n\n  // let SPEED = 150;\n  let [SPEED, setSpeed] = useState(0.5)\n  const handleChange = (e) => {\n    SPEED = 1 / e.target.value;\n    setSpeed(SPEED)\n  }\n\n  // const BarVars = React.createContext({ speed: SPEED, numBars: NUM_BARS })\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 150);\n\n  let stopLoop = false;\n  let numStops = 0;\n\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight))\n    }\n    setArray(array)\n  }\n\n  const resetColors = () => {\n    const bars = document.getElementsByClassName('array-bar');\n    for (let bar of bars) {\n      bar.style.backgroundColor = \"orangered\"\n    }\n  }\n\n  const stop = () => {\n    // for (let i = 0; i < array.length * 3; i++) {\n    if (!stopLoop) {\n      stopLoop = !stopLoop;\n      stopLoop = !stopLoop;\n    }\n    // let i = stopTimeouts.length - 1;\n    while (numStops >= 0) {\n      clearTimeout(numStops);\n      console.log(\"STOPPPPPP\");\n      numStops--;\n    }\n    numStops = 0;\n  }\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED);\n      }\n      numStops += 1;\n      // stopTimeouts.push(stop1);\n      // stopTimeouts.push(stop2);\n      // console.log(stopTimeouts)\n    }\n\n  }\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    console.log(array.length)\n    console.log(animations)\n    const bars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      // const barsArr = [...bars]\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = 'orange';\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i]\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n            const splice = (currIdx, startIdx, subArr) => {\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height\n                subArr[currIdx - 1].style.height = temp\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor\n                subArr[currIdx - 1].style.backgroundColor = tempColor\n                currIdx -= 1;\n              }\n            }\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                splice(currIdx, otherIdx, bars)\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          }\n          // setTimeout(() => {\n          //   barTwo.backgroundColor = 'green';\n\n          // }, i * SPEED)\n        }, i * SPEED)\n      }\n    }\n  }\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1];\n          // const prevSortedBar = barOneIdx > 0 ? bars[barOneIdx - 1].style : barTwo;\n          // if (barTwo.height < prevSortedBar.height) {\n          //   barTwo.backgroundColor = 'yellow'\n          // }\n          if (barOneIdx !== prevBarOneIdx\n            || barTwoIdx !== prevBarTwoIdx\n            || barTwoIdx === array.length - 1\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED)\n      }\n    }\n\n  }\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barPivot.backgroundColor = 'purple';\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          // if (barOneIdx === barTwoIdx) {\n          //   barTwo.backgroundColor = 'orange';\n          // }\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'green';\n            barTwo.backgroundColor = 'green';\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) { // special \"pivot\" swap\n            barPivot.backgroundColor = 'purple';\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = 'green';\n\n          }\n          // barPivot.backgroundColor = 'green';\n          barTwo.backgroundColor = 'green';\n        }, i * SPEED)\n      }\n    }\n\n  }\n\n  return (\n    <div className=\"algo-container\">\n      <div className=\"array-container\">\n        {array.map((value, i) => (\n          <div\n            className=\"array-bar\"\n            key={i}\n            style={{\n              height: `${value}px`,\n              backgroundColor: 'orangered',\n              width: `${90 / NUM_BARS}vh`,\n              display: 'inline-block',\n              margin: 1\n            }}\n          >\n          </div>\n        ))}\n      </div>\n      <div className=\"slidecontainer\">\n        <input onChange={handleChange} type=\"range\" min=\"0\" max=\"1\" value={SPEED} className=\"slider\" id=\"myRange\" />\n      </div>\n      <div className=\"buttons\">\n        <button onClick={stop}>Stop</button>\n        <button onClick={resetColors}>Reset Colors</button>\n        <button onClick={resetArray}>Get New Array</button>\n        <button onClick={bubbleSortAnimate}>Bubble Sort</button>\n        <button onClick={insertionSortAnimate}>Insertion Sort</button>\n        <button onClick={selectionSortAnimate}>Selection Sort</button>\n        <button onClick={quickSortAnimate}>Quick Sort</button>\n      </div>\n    </div>\n  )\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min)\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n  return true;\n}\n\n// console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))\n"]},"metadata":{},"sourceType":"module"}