{"ast":null,"code":"const testGrid = [[7, 9, 10, 3, 5], [1, 5, 3, 6, 8], [5, 4, 6, 2, 9]];\nexport default function depthFirstSearch(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  console.log('DFS grid:', grid); // while (unvisitedNodes.length >= 0) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid);\n  console.log('RESULT:', pathOfNodes);\n  return pathOfNodes; // sortNodesByDistance(unvisitedNodes)\n  // const nearestNode = unvisitedNodes.shift();\n  // nearestNode.isVisited = true;\n  // if (nearestNode === endNode) return visitedNodesInOrder;\n  // updateNeighbors(nearestNode, grid);\n  // }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  neighbors = getNeighbors(currentNode, grid);\n  console.log('array:', array);\n  console.log('current node:', currentNode);\n  if (currentNode.isFinish) return;\n  currentNode.isVisited = true;\n  array.push(currentNode);\n  depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/depthFirstSearch.js"],"names":["testGrid","depthFirstSearch","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","console","log","pathOfNodes","depthFirstSearchHelp","sortNodesByDistance","sort","nodeOne","nodeTwo","currentNode","neighbors","array","getNeighbors","isFinish","isVisited","push","node","col","row","length","updateNeighbors","neighbor","nodes"],"mappings":"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","sourcesContent":["const testGrid = [\n  [7, 9, 10, 3, 5],\n  [1, 5, 3, 6, 8],\n  [5, 4, 6, 2, 9]\n]\n\nexport default function depthFirstSearch(grid, startNode, endNode) {\n\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  console.log('DFS grid:', grid)\n\n  // while (unvisitedNodes.length >= 0) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid)\n  console.log('RESULT:', pathOfNodes);\n  return pathOfNodes;\n\n  // sortNodesByDistance(unvisitedNodes)\n  // const nearestNode = unvisitedNodes.shift();\n  // nearestNode.isVisited = true;\n  // if (nearestNode === endNode) return visitedNodesInOrder;\n  // updateNeighbors(nearestNode, grid);\n  // }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  neighbors = getNeighbors(currentNode, grid);\n  console.log('array:', array);\n  console.log('current node:', currentNode)\n  if (currentNode.isFinish) return;\n  currentNode.isVisited = true;\n  array.push(currentNode);\n  depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}