{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/src/PathfindingViz/PathfindingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\nimport './PathfindingViz.css';\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n  const GRID_HEIGHT = Math.floor(window.innerHeight / 35);\n  const GRID_WIDTH = Math.floor(window.innerWidth / 27);\n  let finding = false; // const START_NODE_ROW = 8;\n  // const START_NODE_COL = 12;\n  // const END_NODE_ROW = 22;\n  // const END_NODE_COL = 37;\n\n  const START_NODE_ROW = Math.floor(GRID_HEIGHT / 3);\n  const START_NODE_COL = Math.floor(GRID_WIDTH / 4);\n  const END_NODE_ROW = Math.floor(GRID_HEIGHT / 1.5);\n  const END_NODE_COL = Math.floor(GRID_WIDTH / 1.3);\n  useEffect(() => {\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL, GRID_WIDTH, GRID_HEIGHT));\n  }, []);\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n\n    if (row === START_NODE_ROW && col === START_NODE_COL || row === END_NODE_ROW && col === END_NODE_COL || finding) {\n      return;\n    }\n\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  };\n\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed || row === START_NODE_ROW && col === START_NODE_COL || row === END_NODE_ROW && col === END_NODE_COL || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  };\n\n  const handleMouseUp = () => {\n    mousePressed = false;\n  };\n\n  const depthFirstSearchAnimate = pathOfNodes => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n\n        if (i === pathOfNodes.length - 1) {\n          finding = false;\n          enableButtons();\n        }\n      }, interval);\n    }\n  };\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes);\n  };\n\n  const breadthFirstSearchAnimate = pathOfNodes => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n\n        if (i === pathOfNodes.length - 1) {\n          finding = false;\n          enableButtons();\n        }\n      }, interval);\n    }\n  };\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    breadthFirstSearchAnimate(pathOfNodes);\n  };\n\n  const dijkstraAnimate = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n\n              if (i === pathOfNodes.length - 1 && j === shortestPath.length - 1) {\n                finding = false;\n                enableButtons();\n              }\n            }, newInterval);\n          }\n        }\n      }, interval);\n    }\n  };\n\n  const dijkstraVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode);\n    dijkstraAnimate(visitiedNodesInOrder, shortestPath);\n  };\n\n  const resetGrid = () => {\n    grid.forEach(row => row.forEach(node => {\n      const currentDomNode = document.getElementById(`loc-${node.row}-${node.col}`);\n      currentDomNode.classList.remove('node-visited', 'node-is-wall', 'node-short-visited');\n    }));\n    setGrid([]);\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL, GRID_WIDTH, GRID_HEIGHT));\n  };\n\n  const resetPath = () => {\n    grid.forEach(row => row.forEach(node => {\n      const currentDomNode = document.getElementById(`loc-${node.row}-${node.col}`);\n      currentDomNode.classList.remove('node-visited', 'node-short-visited');\n    }));\n  };\n\n  const animateAlgo = () => {\n    resetPath();\n    finding = true;\n    const findingButtons = document.getElementsByClassName('disable');\n    Array.from(findingButtons).forEach(button => button.disabled = true);\n    const algos = [depthFirstSearchVisualize, breadthFirstSearchVisualize, dijkstraVisualize];\n    const algoIdxString = document.getElementById('pathfinding-options').options.selectedIndex;\n    const algoIdx = Number(algoIdxString);\n    algos[algoIdx]();\n  };\n\n  function enableButtons() {\n    const findingButtons = document.getElementsByClassName('disable');\n    Array.from(findingButtons).forEach(button => button.disabled = false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"grid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"grid-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    className: \"disable\",\n    label: \"Choose an Algo\",\n    name: \"pathfinding-options\",\n    id: \"pathfinding-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    label: \"Depth First Search\",\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    label: \"Breadth First Search\",\n    value: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    label: \"Dijkstra\",\n    value: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"disable\",\n    onClick: animateAlgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, \"Search!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"disable\",\n    onClick: resetGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, \"Reset Grid\")), getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp));\n}\n\nfunction getBlankGrid(startRow, startCol, endRow, endCol, gridWidth, gridHeight) {\n  const grid = [];\n\n  for (let row = 0; row < gridHeight; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < gridWidth; col++) {\n      const currentNode = {\n        col,\n        row,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === endRow && col === endCol,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n      currentRow.push(currentNode);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nfunction getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }\n  }, grid.map((row, rowIdx) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIdx,\n      className: \"grid-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }\n    }, row.map(node => {\n      const {\n        isStart,\n        isFinish,\n        isVisited,\n        col,\n        row\n      } = node;\n      return /*#__PURE__*/React.createElement(Node, {\n        isStart: isStart,\n        isFinish: isFinish,\n        key: col + '-' + row,\n        location: row + '-' + col,\n        test: 'hello there',\n        isVisited: isVisited,\n        row: row,\n        col: col,\n        onMouseDown: handleMouseDown,\n        onMouseEnter: handleMouseEnter,\n        onMouseUp: handleMouseUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 17\n        }\n      });\n    }));\n  }));\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/PathfindingViz.js"],"names":["React","useState","useEffect","depthFirstSearch","breadthFirstSearch","dijkstra","getNodesInShortestPath","Node","PathfindingViz","grid","setGrid","SPEED","SET_SPEED","mousePressed","GRID_HEIGHT","Math","floor","window","innerHeight","GRID_WIDTH","innerWidth","finding","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","getBlankGrid","handleMouseDown","row","col","targetNode","isWall","targetDomNode","document","getElementById","classList","add","remove","handleMouseEnter","handleMouseUp","depthFirstSearchAnimate","pathOfNodes","i","length","interval","setTimeout","currentPathNode","currentDomNode","enableButtons","depthFirstSearchVisualize","startNode","endNode","breadthFirstSearchAnimate","breadthFirstSearchVisualize","dijkstraAnimate","shortestPath","j","newInterval","currentShortNode","currentShortDomNode","dijkstraVisualize","visitiedNodesInOrder","resetGrid","forEach","node","resetPath","animateAlgo","findingButtons","getElementsByClassName","Array","from","button","disabled","algos","algoIdxString","options","selectedIndex","algoIdx","Number","getInitialDomGrid","startRow","startCol","endRow","endCol","gridWidth","gridHeight","currentRow","currentNode","isStart","isFinish","distance","Infinity","isVisited","previousNode","push","map","rowIdx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n  const GRID_HEIGHT = Math.floor(window.innerHeight / 35);\n  const GRID_WIDTH = Math.floor(window.innerWidth / 27);\n  let finding = false;\n\n  // const START_NODE_ROW = 8;\n  // const START_NODE_COL = 12;\n  // const END_NODE_ROW = 22;\n  // const END_NODE_COL = 37;\n  const START_NODE_ROW = Math.floor(GRID_HEIGHT / 3);\n  const START_NODE_COL = Math.floor(GRID_WIDTH / 4);\n  const END_NODE_ROW = Math.floor(GRID_HEIGHT / 1.5);\n  const END_NODE_COL = Math.floor(GRID_WIDTH / 1.3);\n\n\n  useEffect(() => {\n    setGrid(getBlankGrid(\n      START_NODE_ROW,\n      START_NODE_COL,\n      END_NODE_ROW,\n      END_NODE_COL,\n      GRID_WIDTH,\n      GRID_HEIGHT));\n  }, [])\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n    if (row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || finding) {\n      return;\n    }\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  }\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed\n      || row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  }\n  const handleMouseUp = () => {\n    mousePressed = false;\n  }\n  const depthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          finding = false;\n          enableButtons();\n        }\n      }, interval)\n    }\n  }\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const breadthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          finding = false;\n          enableButtons();\n        }\n      }, interval)\n    }\n  }\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    breadthFirstSearchAnimate(pathOfNodes)\n  }\n\n\n  const dijkstraAnimate = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n              if (i === pathOfNodes.length - 1 && j === shortestPath.length - 1) {\n                finding = false;\n                enableButtons();\n              }\n            }, newInterval);\n          }\n        }\n      }, interval)\n    }\n  }\n\n  const dijkstraVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode)\n    dijkstraAnimate(visitiedNodesInOrder, shortestPath)\n  }\n\n  const resetGrid = () => {\n    grid.forEach(row => row.forEach(node => {\n      const currentDomNode = document.getElementById(`loc-${node.row}-${node.col}`)\n      currentDomNode.classList.remove('node-visited', 'node-is-wall', 'node-short-visited')\n    }))\n    setGrid([])\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL, GRID_WIDTH, GRID_HEIGHT));\n  }\n\n  const resetPath = () => {\n    grid.forEach(row => row.forEach(node => {\n      const currentDomNode = document.getElementById(`loc-${node.row}-${node.col}`)\n      currentDomNode.classList.remove('node-visited', 'node-short-visited')\n    }))\n  }\n\n  const animateAlgo = () => {\n    resetPath();\n    finding = true;\n    const findingButtons = document.getElementsByClassName('disable');\n    Array.from(findingButtons).forEach(button => button.disabled = true);\n    const algos = [depthFirstSearchVisualize, breadthFirstSearchVisualize, dijkstraVisualize]\n    const algoIdxString = document.getElementById('pathfinding-options').options.selectedIndex;\n    const algoIdx = Number(algoIdxString)\n    algos[algoIdx]();\n  }\n\n  function enableButtons() {\n    const findingButtons = document.getElementsByClassName('disable');\n    Array.from(findingButtons).forEach(button => button.disabled = false);\n  }\n\n  return (\n    <div id='grid-container'>\n      <div id='grid-controls'>\n        <select className='disable' label='Choose an Algo' name=\"pathfinding-options\" id=\"pathfinding-options\">\n          <option label='Depth First Search' value='0'></option>\n          <option label='Breadth First Search' value='1'></option>\n          <option label='Dijkstra' value='2'></option>\n        </select>\n        <button className='disable' onClick={animateAlgo}>Search!</button>\n        <button className='disable' onClick={resetGrid}>Reset Grid</button>\n\n      </div>\n      {getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp)}\n    </div>\n  );\n}\n\n\nfunction getBlankGrid(startRow, startCol, endRow, endCol, gridWidth, gridHeight) {\n  const grid = [];\n  for (let row = 0; row < gridHeight; row++) {\n    const currentRow = [];\n    for (let col = 0; col < gridWidth; col++) {\n      const currentNode = {\n        col,\n        row,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === endRow && col === endCol,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n      currentRow.push(currentNode);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\nfunction getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp) {\n  return (\n    <div className='grid'>\n      {grid.map((row, rowIdx) => {\n        return (\n          <div key={rowIdx} className='grid-row'>\n            {row.map((node) => {\n              const { isStart, isFinish, isVisited, col, row } = node;\n              return (\n                <Node\n                  isStart={isStart}\n                  isFinish={isFinish}\n                  key={col + '-' + row}\n                  location={row + '-' + col}\n                  test={'hello there'}\n                  isVisited={isVisited}\n                  row={row}\n                  col={col}\n                  onMouseDown={handleMouseDown}\n                  onMouseEnter={handleMouseEnter}\n                  onMouseUp={handleMouseUp}\n                ></Node>\n              );\n            })}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}