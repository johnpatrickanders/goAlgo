{"ast":null,"code":"export default function breadthSearchFirst(grid, startNode, endNode) {\n  console.log('BST start ===');\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid);\n  return pathOfNodes;\n}\n\nfunction breadthSearchFirstHelp(startNode, grid) {\n  console.log('BST help...', grid);\n  const array = [];\n  const queue = [startNode];\n\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    if (currentNode.isWall) continue;\n    currentNode.isVisited = true;\n    console.log(currentNode);\n    if (currentNode.isFinish) return array;\n\n    if (!currentNode.isStart) {\n      array.push(currentNode);\n    }\n\n    const neighbors = getNeighbors(currentNode, grid);\n    neighbors.forEach(node => node.isVisited = true);\n    queue.push(...neighbors);\n  }\n\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/PathfindingViz/breadthFirstSearch.js"],"names":["breadthSearchFirst","grid","startNode","endNode","console","log","pathOfNodes","breadthSearchFirstHelp","array","queue","length","currentNode","shift","isWall","isVisited","isFinish","isStart","push","neighbors","getNeighbors","forEach","node","col","row"],"mappings":"AAAA,eAAe,SAASA,kBAAT,CAA4BC,IAA5B,EAAkCC,SAAlC,EAA6CC,OAA7C,EAAsD;AACnEC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMC,WAAW,GAAGC,sBAAsB,CAACL,SAAD,EAAYD,IAAZ,CAA1C;AACA,SAAOK,WAAP;AAED;;AAED,SAASC,sBAAT,CAAgCL,SAAhC,EAA2CD,IAA3C,EAAiD;AAC/CG,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,IAA3B;AACA,QAAMO,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,CAACP,SAAD,CAAd;;AACA,SAAOO,KAAK,CAACC,MAAN,GAAe,CAAtB,EAAyB;AACvB,UAAMC,WAAW,GAAGF,KAAK,CAACG,KAAN,EAApB;AACA,QAAID,WAAW,CAACE,MAAhB,EAAwB;AACxBF,IAAAA,WAAW,CAACG,SAAZ,GAAwB,IAAxB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYM,WAAZ;AACA,QAAIA,WAAW,CAACI,QAAhB,EAA0B,OAAOP,KAAP;;AAC1B,QAAI,CAACG,WAAW,CAACK,OAAjB,EAA0B;AACxBR,MAAAA,KAAK,CAACS,IAAN,CAAWN,WAAX;AACD;;AACD,UAAMO,SAAS,GAAGC,YAAY,CAACR,WAAD,EAAcV,IAAd,CAA9B;AACAiB,IAAAA,SAAS,CAACE,OAAV,CAAkBC,IAAI,IAAIA,IAAI,CAACP,SAAL,GAAiB,IAA3C;AACAL,IAAAA,KAAK,CAACQ,IAAN,CAAW,GAAGC,SAAd;AACD;;AAED,SAAOV,KAAP;AACD;;AAGD,SAASW,YAAT,CAAsBE,IAAtB,EAA4BpB,IAA5B,EAAkC;AAChC,QAAMiB,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEI,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeF,IAArB;AACA,MAAIE,GAAG,GAAG,CAAN,IAAW,CAACtB,IAAI,CAACsB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBR,SAAnC,EAA8CI,SAAS,CAACD,IAAV,CAAehB,IAAI,CAACsB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAHd,CAGkD;;AAClF,MAAIA,GAAG,GAAGrB,IAAI,CAAC,CAAD,CAAJ,CAAQS,MAAR,GAAiB,CAAvB,IAA4B,CAACT,IAAI,CAACsB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBR,SAApD,EAA+DI,SAAS,CAACD,IAAV,CAAehB,IAAI,CAACsB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EAJ/B,CAIkE;;AAClG,MAAIC,GAAG,GAAGtB,IAAI,CAACS,MAAL,GAAc,CAApB,IAAyB,CAACT,IAAI,CAACsB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBR,SAAjD,EAA4DI,SAAS,CAACD,IAAV,CAAehB,IAAI,CAACsB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAL5B,CAKgE;;AAChG,MAAIA,GAAG,GAAG,CAAN,IAAW,CAACrB,IAAI,CAACsB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBR,SAAnC,EAA8CI,SAAS,CAACD,IAAV,CAAehB,IAAI,CAACsB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EANd,CAMiD;;AACjF,SAAOJ,SAAP;AACD","sourcesContent":["export default function breadthSearchFirst(grid, startNode, endNode) {\n  console.log('BST start ===')\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction breadthSearchFirstHelp(startNode, grid) {\n  console.log('BST help...', grid)\n  const array = []\n  const queue = [startNode]\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    if (currentNode.isWall) continue;\n    currentNode.isVisited = true;\n    console.log(currentNode)\n    if (currentNode.isFinish) return array;\n    if (!currentNode.isStart) {\n      array.push(currentNode);\n    }\n    const neighbors = getNeighbors(currentNode, grid);\n    neighbors.forEach(node => node.isVisited = true);\n    queue.push(...neighbors)\n  }\n\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n"]},"metadata":{},"sourceType":"module"}