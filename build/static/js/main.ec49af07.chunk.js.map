{"version":3,"sources":["layout/NavBar.js","SortingViz/util.js","SortingViz/insertionSort.js","SortingViz/quickSort.js","SortingViz/SortingViz.js","SortingViz/bubbleSort.js","SortingViz/selectionSort.js","PathfindingViz/depthFirstSearch.js","PathfindingViz/breadthFirstSearch.js","PathfindingViz/dijkstra.js","PathfindingViz/Node/Node.js","PathfindingViz/PathfindingViz.js","About/WhatsAnAlgorithm.js","App.js","index.js"],"names":["NavBar","history","useHistory","console","log","id","onClick","window","location","src","style","height","width","margin","marginLeft","marginRight","href","framerize","array","framedAnimations","frame","push","comparison","swap","i","j","temp","quickSort","quickSortHelper","startIdx","endIdx","animations","pivotIdx","leftIdx","rightIdx","animation","leftSubArrIsSmaller","length","SortingViz","useState","setArray","NUM_BARS","SET_NUM_BARS","SPEED","setSpeed","convertedSpeed","maxBarHeight","Math","floor","screen","availHeight","stopLoop","resetColors","color","bars","document","getElementsByClassName","backgroundColor","resetArray","min","max","random","useEffect","bubbleSortAnimate","swapped","first","second","bubbleSort","barOneIdx","barTwoIdx","barOne","barTwo","setTimeout","currentBarColor","tempHeight","insertionSortAnimate","insertionSort","currIdx","otherIdx","enableButtons","initIdx","splice","subArr","tempColor","selectionSortAnimate","smallestIdx","tempSmallVal","selectionSort","prevBarOneIdx","prevBarTwoIdx","quickSortAnimate","barPivot","sortButtons","Array","from","forEach","button","disabled","className","map","value","key","display","borderRadius","onChange","e","target","type","step","name","for","label","algos","algoIdxString","getElementById","options","selectedIndex","Number","depthFirstSearch","grid","startNode","endNode","depthFirstSearchHelp","currentNode","neighbors","isFinish","isStart","isVisited","getNeighbors","pop","node","col","row","isWall","breadthSearchFirst","queue","shift","breadthSearchFirstHelp","visitedNodesInOrder","distance","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","nearestNode","Infinity","updateUnvisitedNeighbors","sort","nodeOne","nodeTwo","filter","neighbor","getUnvisitedNeighbors","previousNode","Node","props","children","this","onMouseDown","onMouseEnter","onMouseUp","extraClassName","React","Component","PathfindingViz","setGrid","mousePressed","GRID_HEIGHT","innerHeight","GRID_WIDTH","innerWidth","finding","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","getBlankGrid","depthFirstSearchVisualize","pathOfNodes","currentPathNode","classList","add","depthFirstSearchAnimate","breadthFirstSearchVisualize","breadthFirstSearchAnimate","breadthFirstSearch","dijkstraVisualize","shortestPath","currentShortNode","dijkstraAnimate","dijkstra","finishNode","unshift","getNodesInShortestPath","findingButtons","remove","handleMouseDown","handleMouseEnter","handleMouseUp","rowIdx","test","getInitialDomGrid","targetNode","targetDomNode","startRow","startCol","endRow","endCol","gridWidth","gridHeight","currentRow","showLines","altDomArray","domLines","domLine","hidden","exploreToggles","justifyContent","line","fontSize","App","exact","path","WhatsAnAlgorithm","ReactDOM","render"],"mappings":"iVAMe,SAASA,IACtB,IAAMC,EAAUC,cAShB,OADAC,QAAQC,IAAIH,GAEV,yBAAKI,GAAG,UACN,yBAAKC,QAAS,WAAQC,OAAOC,SAAW,KACtCH,GAAG,OACHI,IAAI,cACJC,MAAO,CACLC,OAAQ,OACRC,MAAO,OACPC,OAAQ,EACRC,WAAY,OACZC,YAAa,UAEjB,uBAAGC,KAAK,YAAR,WAGA,uBAAGA,KAAK,gBAAR,gB,WC/BS,SAASC,EAAUC,GAChC,IADuC,EACjCC,EAAmB,GADc,cAEnBD,GAFmB,IAEvC,2BAA2B,CAAC,IAAjBE,EAAgB,QACzBD,EAAiBE,KAAKD,EAAME,YAC5BH,EAAiBE,KAAKD,EAAME,YAC5BH,EAAiBE,KAAKD,EAAMG,OALS,8BAOvC,OAAOJ,ECYT,SAASI,EAAKC,EAAGC,EAAGP,GAClB,IAAMQ,EAAOR,EAAMM,GACnBN,EAAMM,GAAKN,EAAMO,GACjBP,EAAMO,GAAKC,ECpBE,SAASC,EAAUT,GAGhC,OADeD,EAIjB,SAASW,EAAgBV,EAAOW,EAAUC,GAA0B,IAAlBC,EAAiB,uDAAJ,GAC7D,GAAIF,GAAYC,EAAQ,OACxB,IAAME,EAAWH,EACbI,EAAUJ,EAAW,EACrBK,EAAWJ,EACf,KAAOI,GAAYD,GAAS,CAC1B,IAAME,EAAY,GAClBA,EAAUb,WAAa,CAACW,EAASC,EAAUF,GACvCd,EAAMe,GAAWf,EAAMc,IAAad,EAAMgB,GAAYhB,EAAMc,IAC9DT,EAAKL,EAAOe,EAASC,GACrBC,EAAUZ,KAAO,CAACU,EAASC,EAAUF,IAErCG,EAAUZ,KAAO,CAAC,EAAG,EAAGS,GAE1BD,EAAWV,KAAKc,GACZjB,EAAMe,IAAYf,EAAMc,KAAWC,GAAW,GAC9Cf,EAAMgB,IAAahB,EAAMc,KAAWE,GAAY,GAEtDX,EAAKL,EAAOc,EAAUE,GACtB,IAAMC,EAAY,GAClBA,EAAUb,WAAa,CAACU,EAAUE,EAAUF,GAC5CG,EAAUZ,KAAO,CAACS,EAAUE,EAAUF,GACtCD,EAAWV,KAAKc,GAChB,IAAMC,EAAsBF,EAAW,EAAIL,EAAWC,GAAUI,EAAW,GACvEE,GACFR,EAAgBV,EAAOW,EAAUK,EAAW,EAAGH,GAC/CH,EAAgBV,EAAOgB,EAAW,EAAGJ,EAAQC,KAE7CH,EAAgBV,EAAOgB,EAAW,EAAGJ,EAAQC,GAC7CH,EAAgBV,EAAOW,EAAUK,EAAW,EAAGH,IAEjD,OAAOA,EAnCkBH,CAAgBV,EAAO,EAAGA,EAAMmB,OAAS,IAsCpE,SAASd,EAAKL,EAAOM,EAAGC,GACtB,IAAMC,EAAOR,EAAMM,GACnBN,EAAMM,GAAKN,EAAMO,GACjBP,EAAMO,GAAKC,E,MCrCE,SAASY,IAAc,IAAD,EACTC,mBAAS,IADA,mBAC5BrB,EAD4B,KACrBsB,EADqB,OAEJD,mBAAS,IAFL,mBAE9BE,EAF8B,KAEpBC,EAFoB,OAUXH,mBAAS,KAVE,mBAU9BI,EAV8B,KAUvBC,EAVuB,KAe/BC,EAAiBF,GAAS,KAAOA,EAAQ,IACzC,IAAMA,EAAQ,GACdA,GAAS,KAAOA,EAAQ,IACtB,IAAMA,EAAQ,GACdA,GAAS,KAAOA,EAAQ,IACtB,IAAMA,EAAQ,GACd,IAAMA,EACdxC,QAAQC,IAAI,mBAAoByC,GAEhC,IAIMC,EAAeC,KAAKC,MAAMzC,OAAO0C,OAAOC,YAAc,IAExDC,GAAW,EAITC,EAAc,SAACC,GACnB,IAD6B,EACvBC,EAAOC,SAASC,uBAAuB,aADhB,cAEXF,GAFW,IAE7B,2BAAwB,SAClB5C,MAAM+C,gBAAkBJ,GAHD,gCAMzBK,EAAa,WAEjB,IADA,IAmReC,EAAKC,EAnRd1C,EAAQ,GACLM,EAAI,EAAGA,EAAIiB,EAAUjB,GAAK,EACjCN,EAAMG,MAiROsC,EAjRQ,EAiRHC,EAjRMd,EAkRrBC,KAAKC,MAAMD,KAAKc,UAAYD,EAAMD,EAAM,GAAKA,KAhRlDnB,EAAStB,IAiBX4C,qBAAU,WACRJ,MACC,IAEH,IAAMK,EAAoB,YACd,EACV,IAAMhC,EC1EK,SAAoBb,GAGjC,IAFA,IAAMa,EAAa,GACfiC,GAAU,EACPA,GAAS,CACdA,GAAU,EACV,IAAK,IAAIxC,EAAI,EAAGA,EAAIN,EAAMmB,OAAS,EAAGb,IAAK,CACzC,IAAMW,EAAY,GAElB,GADAA,EAAUb,WAAa,CAACE,EAAGA,EAAI,GAC3BN,EAAMM,GAAKN,EAAMM,EAAI,GAAI,CAC3BW,EAAUZ,KAAO,CAACC,EAAI,EAAGA,GACzB,IAAMyC,EAAQ/C,EAAMM,GACd0C,EAAShD,EAAMM,EAAI,GACzBN,EAAMM,GAAK0C,EACXhD,EAAMM,EAAI,GAAKyC,EACfD,GAAU,OAEV7B,EAAUZ,KAAO,CAACC,EAAGA,EAAI,GAE3BO,EAAWV,KAAKc,IAGpB,OAAOlB,EAAUc,GDqDIoC,CAAWjD,GAC9Bf,QAAQC,IAAI2B,GACZ,IAJ8B,eAIrBP,GACP,IAAM8B,EAAOC,SAASC,uBAAuB,aALjB,cAMGzB,EAAWP,GANd,GAMrB4C,EANqB,KAMVC,EANU,KAOtBC,EAAShB,EAAKc,GAAW1D,MACzB6D,EAASjB,EAAKe,GAAW3D,MACTc,EAAI,IAAM,EAE9BgD,YAAW,WACT,IAAMC,EAAkBjD,EAAI,IAAM,EArD1B,QADM,QAuDd8C,EAAOb,gBAAkBgB,EACzBF,EAAOd,gBAAkBgB,IACxBjD,EAAIqB,GAEP2B,YAAW,WACT,GAAIJ,EAAYC,EAAW,CACzB,IAAMK,EAAaJ,EAAO3D,OAC1B2D,EAAO3D,OAAS4D,EAAO5D,OACvB4D,EAAO5D,OAAS+D,EAChBJ,EAAOb,gBA9DA,SA+DHW,IAAcd,EAAKjB,OAAS,GAC9Be,EAAY,YAGf5B,EAAIqB,GAEG,GAzBLrB,EAAI,EAAGA,EAAIO,EAAWM,SAAWc,EAAU3B,IAAM,EAAjDA,IA6BLmD,EAAuB,WAC3B,IAAM5C,EF1GK,SAAuBb,GAEpC,IADA,IAAMa,EAAa,GACVP,EAAI,EAAGA,EAAIN,EAAMmB,OAAQb,IAAK,CACrC,IAAIC,EAAID,EAIR,IAHAO,EAAWV,KAAK,CAAEC,WAAY,CAACG,EAAGA,EAAI,GAAIF,KAAM,CAAC,EAAG,KACpDpB,QAAQC,IAAI2B,EAAW,IAEhBN,EAAI,GAAKP,EAAMO,GAAKP,EAAMO,EAAI,IACnCF,EAAKE,EAAGA,EAAI,EAAGP,GACfa,EAAWV,KAAK,CAAEC,WAAY,CAACG,EAAGA,EAAI,GAAIF,KAAM,CAACE,EAAGA,EAAI,KACxDA,GAAK,EAIT,OAAOR,EAAUc,GE4FI6C,CAAc1D,GACjCf,QAAQC,IAAIc,EAAMmB,QAClBlC,QAAQC,IAAI2B,GAEZ,IADA,IAAMuB,EAAOC,SAASC,uBAAuB,aAJZ,WAKxBhC,GALwB,kBAMLO,EAAWP,GANN,GAM1BqD,EAN0B,KAMjBC,EANiB,KAOzBR,EAAShB,EAAKuB,GAASnE,MACd4C,EAAKwB,GAAUpE,MACRc,EAAI,IAAM,EAE9BgD,YAAW,WACT,IAAMC,EAAkBjD,EAAI,IAAM,EAtF1B,QADM,QAwFd8C,EAAOb,gBAtFE,SAuFT,IAAK,IAAIjC,EAAIqD,EAAU,EAAGrD,GAAK,EAAGA,IAAK,CAC3B8B,EAAK9B,GACXd,MAAM+C,gBAAkBgB,KAE7BjD,EAAIqB,GAEP2B,YAAW,WAET,GADIhD,IAAMO,EAAWM,OAAS,GAAG0C,IAC7BF,IAAYC,EAad,IAZA,IAAIE,EAAUH,EACRI,EAAS,SAACJ,EAAShD,EAAUqD,GACjC,KAAOL,EAAUhD,GAAU,CACzB,IAAMH,EAAOwD,EAAOL,GAASnE,MAAMC,OACnCuE,EAAOL,GAASnE,MAAMC,OAASuE,EAAOL,EAAU,GAAGnE,MAAMC,OACzDuE,EAAOL,EAAU,GAAGnE,MAAMC,OAASe,EACnC,IAAMyD,EAAYD,EAAOL,GAASnE,MAAM+C,gBACxCyB,EAAOL,GAASnE,MAAM+C,gBAAkByB,EAAOL,EAAU,GAAGnE,MAAM+C,gBAClEyB,EAAOL,EAAU,GAAGnE,MAAM+C,gBAAkB0B,EAC5CN,GAAW,IAGAC,EAAWD,EAASC,IAC7BD,IAAYG,IACdC,EAAOJ,EAASC,EAAUxB,GAC1B0B,GAAW,EACXF,GAAY,GAIdtD,IAAMO,EAAWM,OAAS,IAAGiB,EAAKuB,EAAU,GAAGnE,MAAM+C,gBAtH3C,WAuHbjC,EAAIqB,IAvCFrB,EAAI,EAAGA,EAAIO,EAAWM,OAAQb,IAAM,EAApCA,IA6CL4D,EAAuB,WAC3B,IAAMrD,EE5JK,SAAuBb,GAGpC,IAFA,IAAMa,EAAa,GACfF,EAAW,EACRA,EAAWX,EAAMmB,OAAS,GAAG,CAElC,IADA,IAAIgD,EAAcxD,EACTL,EAAIK,EAAW,EAAGL,EAAIN,EAAMmB,OAAQb,IAAK,CAChD,IAAMW,EAAY,GAClBA,EAAUb,WAAa,CAACO,EAAUL,GAC9BN,EAAMM,GAAKN,EAAMmE,KACnBA,EAAc7D,GAEZA,IAAMN,EAAMmB,OAAS,EACvBF,EAAUZ,KAAO,CAACM,EAAUwD,GAE5BlD,EAAUZ,KAAOY,EAAUb,WAE7BS,EAAWV,KAAKc,GAElB,IAAMmD,EAAepE,EAAMmE,GAC3BnE,EAAMmE,GAAenE,EAAMW,GAC3BX,EAAMW,GAAYyD,EAClBzD,GAAY,EAEd,OAAOZ,EAAUc,GFqIIwD,CAAcrE,GACjCf,QAAQC,IAAI2B,GACZ,IAHiC,eAGxBP,GACP,IAAM8B,EAAOC,SAASC,uBAAuB,aAJd,cAKAzB,EAAWP,GALX,GAKxB4C,EALwB,KAKbC,EALa,KAMzBC,EAAShB,EAAKc,GAAW1D,MACzB6D,EAASjB,EAAKe,GAAW3D,MACTc,EAAI,IAAM,EAE9BgD,YAAW,WACT,IAAMC,EAAkBjD,EAAI,IAAM,EAvI1B,QADM,QAyId8C,EAAOb,gBAAkBgB,EACzBF,EAAOd,gBAAkBgB,IACxBjD,EAAIqB,GAEP2B,YAAW,WACLhD,IAAMO,EAAWM,OAAS,GAAG0C,IADlB,kBAEwBhD,EAAWP,EAAI,GAFvC,GAERgE,EAFQ,KAEOC,EAFP,KAGf,GAAIrB,IAAcoB,GACbnB,IAAcoB,GACdpB,IAAcnD,EAAMmB,OAAS,GAC7Bb,IAAMO,EAAWM,OAAS,EAAG,CAChC,IAAMqC,EAAaJ,EAAO3D,OAC1B2D,EAAO3D,OAAS4D,EAAO5D,OACvB4D,EAAO5D,OAAS+D,EAChBJ,EAAOb,gBArJA,SAuJLjC,IAAMO,EAAWM,OAAS,GAAGe,EAAY,WAE5C5B,EAAIqB,IA3BFrB,EAAI,EAAGA,EAAIO,EAAWM,OAAQb,IAAM,EAApCA,IAiCLkE,EAAmB,WACvB,IAAM3D,EAAaJ,EAAUT,GAC7Bf,QAAQC,IAAI2B,GACZ,IAH6B,eAGpBP,GACP,IAAM8B,EAAOC,SAASC,uBAAuB,aAJlB,cAKczB,EAAWP,GALzB,GAKpB4C,EALoB,KAKTC,EALS,KAKErC,EALF,KAMrBsC,EAAShB,EAAKc,GAAW1D,MACzB6D,EAASjB,EAAKe,GAAW3D,MACzBiF,EAAWrC,EAAKtB,GAAUtB,MACVc,EAAI,IAAM,EAE9BgD,YAAW,WACT,IAAMC,EAAkBjD,EAAI,IAAM,EA3KzB,SAFK,QA8KdmE,EAASlC,gBA7KD,QA8KRa,EAAOb,gBAAkBgB,EACzBF,EAAOd,gBAAkBgB,EACrBL,IAAcpC,GAAYqC,EAAY,IACxCC,EAAOb,gBAAkB,SACzBc,EAAOd,gBAAkB,YAE1BjC,EAAIqB,GAEP2B,YAAW,WAET,GADIhD,IAAMO,EAAWM,OAAS,GAAG0C,IACf,IAAdX,GAAiC,IAAdC,GAClB7C,IAAMO,EAAWM,OAAS,EAAG,CAChC,IAAMqC,EAAaJ,EAAO3D,OAC1B2D,EAAO3D,OAAS4D,EAAO5D,OACvB4D,EAAO5D,OAAS+D,EAChBJ,EAAOb,gBA9LK,QA+LZc,EAAOd,gBA/LK,aAgMP,GAAIW,IAAcpC,GAAYqC,EAAY,EAAG,CAClDsB,EAASlC,gBAhMH,QAiMN,IAAMiB,EAAaJ,EAAO3D,OAC1B2D,EAAO3D,OAAS4D,EAAO5D,OACvB4D,EAAO5D,OAAS+D,EAChBiB,EAASlC,gBArMG,QAwMdc,EAAOd,gBAxMO,UAyMbjC,EAAIqB,IArCFrB,EAAI,EAAGA,EAAIO,EAAWM,OAAQb,IAAM,EAApCA,IAmDX,SAASuD,IACP,IAAMa,EAAcrC,SAASC,uBAAuB,WACpDqC,MAAMC,KAAKF,GAAaG,SAAQ,SAAAC,GAAM,OAAIA,EAAOC,UAAW,KAG9D,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,mBACZhF,EAAMiF,KAAI,SAACC,EAAO5E,GAAR,OACT,yBACE0E,UAAU,YACVG,IAAK7E,EACLd,MAAO,CACLC,OAAO,GAAD,OAAKyF,EAAQ,GAAb,MACN3C,gBAAiB,YACjB7C,MAAM,GAAD,OAAK,GAAK6B,EAAV,MACL6D,QAAS,eACTzF,OAAQ,EACR0F,aAAc,cAMtB,yBAAKL,UAAU,sBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,cACb,2BAAOM,SA/PI,SAACC,GACpB9D,EAAQ8D,EAAEC,OAAON,MACjBxD,EAASD,IA8PCgE,KAAK,QAELhD,IAAI,MACJC,IAAI,MAGJgD,KAAK,KACLV,UAAU,0BACV7F,GAAG,WACHwG,KAAK,UAEP,2BAAOX,UAAU,cAAcY,IAAI,WAAnC,UAEF,yBAAKZ,UAAU,cACb,2BAAOM,SAtRO,SAACC,GACvBhE,EAAWgE,EAAEC,OAAON,MACpB1D,EAAaD,GACbiB,IACAN,KAmRUuD,KAAK,QACLhD,IAAI,IACJC,IAAI,MACJwC,MAAO3D,EACPyD,UAAU,iBACV7F,GAAG,aACHwG,KAAK,WAEP,2BAAOX,UAAU,cAAcY,IAAI,cAAnC,YAKJ,yBAAKZ,UAAU,WAGb,4BAAQA,UAAU,UAAUa,MAAM,iBAAiBF,KAAK,kBAAkBxG,GAAG,mBAC3E,4BAAQ0G,MAAM,SAASX,MAAM,MAC7B,4BAAQW,MAAM,YAAYX,MAAM,MAChC,4BAAQW,MAAM,YAAYX,MAAM,MAChC,4BAAQW,MAAM,QAAQX,MAAM,OAE9B,4BAAQF,UAAU,UAAU5F,QA1EhB,WAClB,IAAMsF,EAAcrC,SAASC,uBAAuB,WACpDqC,MAAMC,KAAKF,GAAaG,SAAQ,SAAAC,GAAM,OAAIA,EAAOC,UAAW,KAC5D,IAAMe,EAAQ,CAACjD,EAAmBY,EAAsBS,EAAsBM,GACxEuB,EAAgB1D,SAAS2D,eAAe,mBAAmBC,QAAQC,cAEzEJ,EADgBK,OAAOJ,QAqEjB,SACA,4BAAQf,UAAU,UAAU5F,QAAS,WACnCoD,IACAN,EAAY,eAFd,YGzTK,SAASkE,EAAiBC,EAAMC,EAAWC,GAGxD,OAIF,SAASC,EAAqBC,EAAaJ,EAAMK,GAAwB,IAAb1G,EAAY,uDAAJ,GAClE,GAAIyG,EAAYE,SAAU,OAC1B1H,QAAQC,IAAIuH,EAAaJ,GACpBI,EAAYG,UACfH,EAAYI,WAAY,EACH,IAAjB7G,EAAMmB,QAAgBsF,IAAgBzG,EAAMA,EAAMmB,OAAS,IAC7DnB,EAAMG,KAAKsG,KAGfC,EAAYI,EAAaL,EAAaJ,IACxB,GACZG,EAAqBE,EAAU,GAAIL,EAAMK,EAAW1G,GAC3CA,EAAMA,EAAMmB,OAAS,IAAM2F,EAAa9G,EAAMA,EAAMmB,OAAS,GAAIkF,KAC1ErG,EAAM+G,MACNP,EAAqBxG,EAAMA,EAAMmB,OAAS,GAAIkF,EAAMK,EAAW1G,IAEjE,OAAOA,EArBawG,CAAqBF,EAAWD,GAyBtD,SAASS,EAAaE,EAAMX,GAC1B,IAAMK,EAAY,GACVO,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,IAmBb,OAlBIA,EAAM,IACJb,EAAKa,EAAM,GAAGD,GAAKJ,YACnBR,EAAKa,EAAM,GAAGD,GAAKE,SACnBd,EAAKa,EAAM,GAAGD,GAAKL,SACvBF,EAAUvG,KAAKkG,EAAKa,EAAM,GAAGD,IAC3BA,EAAMZ,EAAK,GAAGlF,OAAS,IACrBkF,EAAKa,GAAKD,EAAM,GAAGJ,YACnBR,EAAKa,GAAKD,EAAM,GAAGE,SACnBd,EAAKa,GAAKD,EAAM,GAAGL,SACvBF,EAAUvG,KAAKkG,EAAKa,GAAKD,EAAM,IAC7BC,EAAMb,EAAKlF,OAAS,IAClBkF,EAAKa,EAAM,GAAGD,GAAKJ,YACnBR,EAAKa,EAAM,GAAGD,GAAKE,SACnBd,EAAKa,EAAM,GAAGD,GAAKL,SAASF,EAAUvG,KAAKkG,EAAKa,EAAM,GAAGD,IAC3DA,EAAM,IACJZ,EAAKa,GAAKD,EAAM,GAAGJ,YACnBR,EAAKa,GAAKD,EAAM,GAAGE,SACnBd,EAAKa,GAAKD,EAAM,GAAGL,SAASF,EAAUvG,KAAKkG,EAAKa,GAAKD,EAAM,IAC1DP,E,YChDM,SAASU,EAAmBf,EAAMC,EAAWC,GAG1D,OAFAtH,QAAQC,IAAI,iBAUd,SAAgCoH,EAAWD,GACzCpH,QAAQC,IAAI,cAAemH,GAC3B,IAAMrG,EAAQ,GACRqH,EAAQ,CAACf,GAEf,KAAOe,EAAMlG,OAAS,GAAG,CACvB,IAAMsF,EAAcY,EAAMC,QAC1B,IAAIb,EAAYU,OAAhB,CAGA,GAFAV,EAAYI,WAAY,EACxB5H,QAAQC,IAAIuH,GACRA,EAAYE,SAAU,OAAO3G,EAC5ByG,EAAYG,SACf5G,EAAMG,KAAKsG,GAGb,IAAMC,EAAYI,EAAaL,EAAaJ,GAC5CK,EAAU7B,SAAQ,SAAAmC,GAAI,OAAIA,EAAKH,WAAY,KAE3CQ,EAAMlH,KAAN,MAAAkH,EAAK,YAASX,KAIhB,OAAO1G,EA/BauH,CAAuBjB,EAAWD,GAmCxD,SAASS,EAAaE,EAAMX,GAC1B,IAAMK,EAAY,GACVO,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,IAKb,OAJIA,EAAM,IAAMb,EAAKa,EAAM,GAAGD,GAAKJ,WAAWH,EAAUvG,KAAKkG,EAAKa,EAAM,GAAGD,IACvEA,EAAMZ,EAAK,GAAGlF,OAAS,IAAMkF,EAAKa,GAAKD,EAAM,GAAGJ,WAAWH,EAAUvG,KAAKkG,EAAKa,GAAKD,EAAM,IAC1FC,EAAMb,EAAKlF,OAAS,IAAMkF,EAAKa,EAAM,GAAGD,GAAKJ,WAAWH,EAAUvG,KAAKkG,EAAKa,EAAM,GAAGD,IACrFA,EAAM,IAAMZ,EAAKa,GAAKD,EAAM,GAAGJ,WAAWH,EAAUvG,KAAKkG,EAAKa,GAAKD,EAAM,IACtEP,EC5CM,SAASN,EAAiBC,EAAMC,EAAWC,GAExD,IAAMiB,EAAsB,GAE5BlB,EAAUmB,SAAW,EAErB,IADA,IAAMC,EAsCR,SAAqBrB,GACnB,IADyB,EACnBsB,EAAQ,GADW,cAEPtB,GAFO,IAEzB,2BAAwB,CAAC,IAAD,EAAba,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAdF,EAAa,QACtBW,EAAMxH,KAAK6G,IAFS,gCAFC,8BAOzB,OAAOW,EA7CgBC,CAAYvB,GAC5BqB,EAAevG,OAAS,GAAG,CAChC0G,EAAoBH,GACpB,IAAMI,EAAcJ,EAAeJ,QAEnC,GADAQ,EAAYjB,WAAY,GACpBiB,EAAYX,OAAhB,CACA,GAAIW,IAAgBvB,GAAWuB,EAAYL,WAAaM,IAEtD,OADAP,EAAoBF,QACbE,EAETQ,EAAyBF,EAAazB,GACtCmB,EAAoBrH,KAAK2H,KAK7B,SAASD,EAAoBH,GAC3BA,EAAeO,MAAK,SAACC,EAASC,GAAV,OAAsBD,EAAQT,SAAWU,EAAQV,YAavE,SAASO,EAAyBhB,EAAMX,GACtC,IAD4C,EACtCK,EAXR,SAA+BM,EAAMX,GACnC,IAAMK,EAAY,GACVO,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,IAKb,OAJIA,EAAM,GAAGR,EAAUvG,KAAKkG,EAAKa,EAAM,GAAGD,IACtCA,EAAMZ,EAAK,GAAGlF,OAAS,GAAGuF,EAAUvG,KAAKkG,EAAKa,GAAKD,EAAM,IACzDC,EAAMb,EAAKlF,OAAS,GAAGuF,EAAUvG,KAAKkG,EAAKa,EAAM,GAAGD,IACpDA,EAAM,GAAGP,EAAUvG,KAAKkG,EAAKa,GAAKD,EAAM,IACrCP,EAAU0B,QAAO,SAAAC,GAAQ,OAAKA,EAASxB,aAI5ByB,CAAsBtB,EAAMX,GADF,cAErBK,GAFqB,IAE5C,2BAAkC,CAAC,IAAxB2B,EAAuB,QAChCA,EAASZ,SAAWT,EAAKS,SAAW,EACpCY,EAASE,aAAevB,GAJkB,+B,oCCjCzBwB,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,SAAW,GAFC,E,qDAKV/C,GAEP,OADAgD,KAAKD,SAASvI,KAAK,IAAIqI,EAAK7C,IACrBgD,O,+BAGC,IAAD,EAWHA,KAAKF,MATP9B,EAFK,EAELA,SACAC,EAHK,EAGLA,QACAC,EAJK,EAILA,UACAvH,EALK,EAKLA,SACA2H,EANK,EAMLA,IACAC,EAPK,EAOLA,IACA0B,EARK,EAQLA,YACAC,EATK,EASLA,aACAC,EAVK,EAULA,UAEIC,EACJpC,EACI,cACAC,EACE,aACAC,EACE,eACA,GACV,OACE,yBAAK7B,UAAS,eAAU+D,GACtB5J,GAAE,cAASG,GACXsJ,YAAa,kBAAMA,EAAY1B,EAAKD,IACpC4B,aAAc,kBAAMA,EAAa3B,EAAKD,IACtC6B,UAAW,kBAAMA,MAEjB,yBAAK9D,UAAU,oB,GAtCWgE,IAAMC,Y,MCMzB,SAASC,IAAkB,IAAD,EACjB7H,mBAAS,IADQ,mBAClCgF,EADkC,KAC5B8C,EAD4B,OAEZ9H,mBAAS,IAFG,mBAEhCI,EAFgC,KAGnC2H,GAHmC,MAGpB,GACbC,EAAcxH,KAAKC,MAAMzC,OAAOiK,YAAc,IAC9CC,EAAa1H,KAAKC,MAAMzC,OAAOmK,WAAa,IAC9CC,GAAU,EAMRC,EAAiB7H,KAAKC,MAAMuH,EAAc,GAC1CM,EAAiB9H,KAAKC,MAAMyH,EAAa,GACzCK,EAAe/H,KAAKC,MAAMuH,EAAc,KACxCQ,EAAehI,KAAKC,MAAMyH,EAAa,KAG7C3G,qBAAU,WACRuG,EAAQW,EACNJ,EACAC,EACAC,EACAC,EACAN,EACAF,MACD,IAEH,IAwCMU,EAA4B,WAChC,IAAMzD,EAAYD,EAAKqD,GAAgBC,GACvBtD,EAAKuD,GAAcC,IAjBL,SAACG,GAC/B,IADgD,IAAD,WACtC1J,GAEPgD,YAAW,WACT,IAAM2G,EAAkBD,EAAY1J,GACb+B,SAAS2D,eAAT,cAA+BiE,EAAgB/C,IAA/C,YAAsD+C,EAAgBhD,MAC9EiD,UAAUC,IAAI,gBACzB7J,IAAM0J,EAAY7I,OAAS,IAC7BsI,GAAU,EACV5F,OAPavD,EAAImB,IADdnB,EAAI,EAAGA,EAAI0J,EAAY7I,OAAQb,IAAM,EAArCA,GAkBT8J,CADoBhE,EAAiBC,EAAMC,KAmBvC+D,EAA8B,WAClC,IAAM/D,EAAYD,EAAKqD,GAAgBC,GACvBtD,EAAKuD,GAAcC,IAjBH,SAACG,GACjC,IADkD,IAAD,WACxC1J,GAEPgD,YAAW,WACT,IAAM2G,EAAkBD,EAAY1J,GACb+B,SAAS2D,eAAT,cAA+BiE,EAAgB/C,IAA/C,YAAsD+C,EAAgBhD,MAC9EiD,UAAUC,IAAI,gBACzB7J,IAAM0J,EAAY7I,OAAS,IAC7BsI,GAAU,EACV5F,OAPavD,EAAImB,IADdnB,EAAI,EAAGA,EAAI0J,EAAY7I,OAAQb,IAAM,EAArCA,GAkBTgK,CADoBC,EAAmBlE,EAAMC,KA8BzCkE,EAAoB,WACxB,IAAMlE,EAAYD,EAAKqD,GAAgBC,GACjCpD,EAAUF,EAAKuD,GAAcC,IA3Bb,SAACG,EAAaS,GACpC,IADsD,IAAD,WAC5CnK,GAEPgD,YAAW,WACT,IAAM2G,EAAkBD,EAAY1J,GAGpC,GAFuB+B,SAAS2D,eAAT,cAA+BiE,EAAgB/C,IAA/C,YAAsD+C,EAAgBhD,MAC9EiD,UAAUC,IAAI,gBACzB7J,IAAM0J,EAAY7I,OAAS,EAC7B,IADiC,IAAD,WACvBZ,GAEP+C,YAAW,WACT,IAAMoH,EAAmBD,EAAalK,GACV8B,SAAS2D,eAAT,cAA+B0E,EAAiBxD,IAAhD,YAAuDwD,EAAiBzD,MAChFiD,UAAUC,IAAI,sBAC9B7J,IAAM0J,EAAY7I,OAAS,GAAKZ,IAAMkK,EAAatJ,OAAS,IAC9DsI,GAAU,EACV5F,OAPgBtD,EAAIkB,IADjBlB,EAAI,EAAGA,EAAIkK,EAAatJ,OAAQZ,IAAM,EAAtCA,KANID,EAAImB,IADdnB,EAAI,EAAGA,EAAI0J,EAAY7I,OAAQb,IAAM,EAArCA,GA6BTqK,CAF6BC,EAASvE,EAAMC,EAAWC,GFjFpD,SAAgCsE,GAGrC,IAFA,IAAMJ,EAAe,GACjBhE,EAAcoE,EACK,OAAhBpE,GACLgE,EAAaK,QAAQrE,GACrBA,EAAcA,EAAY8B,aAE5B,OAAOkC,EE2EgBM,CAAuBxE,KAkC9C,SAAS1C,IACP,IAAMmH,EAAiB3I,SAASC,uBAAuB,WACvDqC,MAAMC,KAAKoG,GAAgBnG,SAAQ,SAAAC,GAAM,OAAIA,EAAOC,UAAW,KAGjE,OACE,yBAAK5F,GAAG,kBACN,yBAAKA,GAAG,iBACN,4BAAQ6F,UAAU,UAAUa,MAAM,iBAAiBF,KAAK,sBAAsBxG,GAAG,uBAC/E,4BAAQ0G,MAAM,qBAAqBX,MAAM,MACzC,4BAAQW,MAAM,uBAAuBX,MAAM,MAC3C,4BAAQW,MAAM,WAAWX,MAAM,OAEjC,4BAAQF,UAAU,UAAU5F,QAxBd,WATlBiH,EAAKxB,SAAQ,SAAAqC,GAAG,OAAIA,EAAIrC,SAAQ,SAAAmC,GACP3E,SAAS2D,eAAT,cAA+BgB,EAAKE,IAApC,YAA2CF,EAAKC,MACxDiD,UAAUe,OAAO,eAAgB,sBAChDjE,EAAKH,WAAY,QAEnBsC,EAAQ9C,GAMRoD,GAAU,EACV,IAAMuB,EAAiB3I,SAASC,uBAAuB,WACvDqC,MAAMC,KAAKoG,GAAgBnG,SAAQ,SAAAC,GAAM,OAAIA,EAAOC,UAAW,KAC/D,IAAMe,EAAQ,CAACiE,EAA2BM,EAA6BG,GACjEzE,EAAgB1D,SAAS2D,eAAe,uBAAuBC,QAAQC,cAE7EJ,EADgBK,OAAOJ,QAiBnB,WACA,4BAAQf,UAAU,UAAU5F,QA5ChB,WAChBiH,EAAKxB,SAAQ,SAAAqC,GAAG,OAAIA,EAAIrC,SAAQ,SAAAmC,GACP3E,SAAS2D,eAAT,cAA+BgB,EAAKE,IAApC,YAA2CF,EAAKC,MACxDiD,UAAUe,OAAO,eAAgB,eAAgB,4BAElE9B,EAAQ,IACRA,EAAQW,EAAaJ,EAAgBC,EAAgBC,EAAcC,EAAcN,EAAYF,MAsCzF,eA+BR,SAA2BhD,EAAM6E,EAAiBC,EAAkBC,GAClE,OACE,yBAAKpG,UAAU,QACZqB,EAAKpB,KAAI,SAACiC,EAAKmE,GACd,OACE,yBAAKlG,IAAKkG,EAAQrG,UAAU,YACzBkC,EAAIjC,KAAI,SAAC+B,GAAU,IACVJ,EAA2CI,EAA3CJ,QAASD,EAAkCK,EAAlCL,SAAUE,EAAwBG,EAAxBH,UAAWI,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,IAC3C,OACE,kBAAC,EAAD,CACEN,QAASA,EACTD,SAAUA,EACVxB,IAAK8B,EAAM,IAAMC,EACjB5H,SAAU4H,EAAM,IAAMD,EACtBqE,KAAM,cACNzE,UAAWA,EACXK,IAAKA,EACLD,IAAKA,EACL2B,YAAasC,EACbrC,aAAcsC,EACdrC,UAAWsC,YAhDtBG,CAAkBlF,GAtJC,SAACa,EAAKD,GAC5B,IAAMuE,EAAanF,EAAKa,GAAKD,GAC7B,KAAIC,IAAQwC,GAAkBzC,IAAQ0C,GACjCzC,IAAQ0C,GAAgB3C,IAAQ4C,GAChCJ,GAFL,CAKAL,GAAe,EACfoC,EAAWrE,QAAUqE,EAAWrE,OAChC,IAAMsE,EAAgBpJ,SAAS2D,eAAT,cAA+BkB,EAA/B,YAAsCD,IAC5DuE,EAAWrE,OAASsE,EAAcvB,UAAUC,IAAI,gBAAkBsB,EAAcvB,UAAUe,OAAO,oBAE1E,SAAC/D,EAAKD,GAC7B,IAAMuE,EAAanF,EAAKa,GAAKD,GAC7B,MAAKmC,GACAlC,IAAQwC,GAAkBzC,IAAQ0C,GAClCzC,IAAQ0C,GAAgB3C,IAAQ4C,GAChC2B,EAAWrE,QAHhB,CAIAqE,EAAWrE,QAAUqE,EAAWrE,OAChC,IAAMsE,EAAgBpJ,SAAS2D,eAAT,cAA+BkB,EAA/B,YAAsCD,IAC5DuE,EAAWrE,OAASsE,EAAcvB,UAAUC,IAAI,gBAAkBsB,EAAcvB,UAAUe,OAAO,oBAE7E,WACpB7B,GAAe,MAqInB,SAASU,EAAa4B,EAAUC,EAAUC,EAAQC,EAAQC,EAAWC,GAEnE,IADA,IAAM1F,EAAO,GACJa,EAAM,EAAGA,EAAM6E,EAAY7E,IAAO,CAEzC,IADA,IAAM8E,EAAa,GACV/E,EAAM,EAAGA,EAAM6E,EAAW7E,IAAO,CACxC,IAAMR,EAAc,CAClBQ,MACAC,MACAN,QAASM,IAAQwE,GAAYzE,IAAQ0E,EACrChF,SAAUO,IAAQ0E,GAAU3E,IAAQ4E,EACpCpE,SAAUM,IACVlB,WAAW,EACXM,QAAQ,EACRoB,aAAc,MAEhByD,EAAW7L,KAAKsG,GAElBJ,EAAKlG,KAAK6L,GAEZ,OAAO3F,E,UChNM,aAMbzD,qBAAU,WACRqJ,MACC,IAGH,IAAMA,EAAY,SAACC,GAEjB,IADA,IAAMC,EAAW9J,SAASC,uBAAuB,mBADhB,WAExBhC,GACP,IAAM8L,EAAUD,EAAS7L,GACzBrB,QAAQC,IAAIkN,GACZ9I,YAAW,WACT8I,EAAQlC,UAAUC,IAAI,QACtBiC,EAAQC,QAAS,EACb/L,IAAM6L,EAAShL,OAAS,GAC1BmC,YAAW,WACT,IAAMgJ,EAAiBjK,SAAS2D,eAAe,WAC/CsG,EAAe9M,MAAM4F,QAAU,OAC/BkH,EAAe9M,MAAM+M,eAAiB,SACtCD,EAAeD,QAAS,IACvB,QAEJ,KAAO/L,IAdHA,EAAI,EAAGA,EAAI6L,EAAShL,OAAQb,IAAM,EAAlCA,IAiBX,OACE,yBAAK0E,UAAU,SA9BL,CAAC,4BACX,8BACA,gCA6BSC,KAAI,SAACuH,GACV,OAAO,yBAAKxH,UAAU,kBAAkBqH,QAAM,GAAvC,IAAyC,2BAAIG,GAA7C,QAET,yBAAKrN,GAAG,UAAUkN,QAAQ,GACxB,4BAAQlN,GAAG,aACT,yBAAKC,QAAS,kBAAMC,OAAOC,SAAW,YAAYC,IAAI,0BAExD,8BACE,gKAEA,4IACA,oIACA,qGACA,uBAAGC,MAAO,CAAEiN,SAAU,SAAtB,oHCdKC,MAzBf,WAEI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,KACd,kBAACC,EAAD,UCrBpBC,IAASC,OAEP,kBAAC,EAAD,MACA1K,SAAS2D,eAAe,W","file":"static/js/main.ec49af07.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Slider from '../SortingViz/SpeedControls';\nimport './NavBar.css'\n\n\nexport default function NavBar() {\n  const history = useHistory();\n\n  const handleClickSort = () => {\n    history.push('/sorting');\n  }\n  const handleClickPath = () => {\n    history.push('/pathfinding');\n  }\n  console.log(history)\n  return (\n    <nav id='navbar'>\n      <img onClick={() => { window.location = '/' }}\n        id='logo'\n        src='favicon.ico'\n        style={{\n          height: '40px',\n          width: '40px',\n          margin: 0,\n          marginLeft: '15px',\n          marginRight: '20px'\n        }} />\n      <a href='/sorting'>\n        Sorting\n        </a>\n      <a href='/pathfinding'>\n        Pathfinding\n        </a>\n    </nav>\n  )\n}\n","export default function framerize(array) {\n  const framedAnimations = [];\n  for (const frame of array) {\n    framedAnimations.push(frame.comparison);\n    framedAnimations.push(frame.comparison);\n    framedAnimations.push(frame.swap);\n  }\n  return framedAnimations;\n}\n","import framerize from './util';\n\nexport default function insertionSort(array) {\n  const animations = [];\n  for (let i = 1; i < array.length; i++) {\n    let j = i;\n    animations.push({ comparison: [j, j - 1], swap: [0, 0] });\n    console.log(animations[0])\n\n    while (j > 0 && array[j] < array[j - 1]) {\n      swap(j, j - 1, array);\n      animations.push({ comparison: [j, j - 1], swap: [j, j - 1] });\n      j -= 1;\n\n    }\n  }\n  return framerize(animations);\n}\n\nfunction swap(i, j, array) {\n  const temp = array[i];\n  array[i] = array[j]\n  array[j] = temp\n}\n","import framerize from './util';\n\nexport default function quickSort(array) {\n  // Write your code here.\n  const frames = framerize(quickSortHelper(array, 0, array.length - 1));\n  return frames;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations = []) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    const animation = {};\n    animation.comparison = [leftIdx, rightIdx, pivotIdx]\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(array, leftIdx, rightIdx);\n      animation.swap = [leftIdx, rightIdx, pivotIdx];\n    } else {\n      animation.swap = [0, 0, pivotIdx]\n    }\n    animations.push(animation);\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx += 1;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx -= 1;\n  }\n  swap(array, pivotIdx, rightIdx);\n  const animation = {};\n  animation.comparison = [pivotIdx, rightIdx, pivotIdx];\n  animation.swap = [pivotIdx, rightIdx, pivotIdx];\n  animations.push(animation);\n  const leftSubArrIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1)\n  if (leftSubArrIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n  }\n  return animations\n}\n\nfunction swap(array, i, j) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","import React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nimport Slider from './SpeedControls';\n\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  let [NUM_BARS, SET_NUM_BARS] = useState(20);\n  const handleBarChange = (e) => {\n    NUM_BARS = e.target.value;\n    SET_NUM_BARS(NUM_BARS);\n    resetArray()\n    resetColors()\n  }\n\n  let [SPEED, setSpeed] = useState(200)\n  const handleChange = (e) => {\n    SPEED = e.target.value;\n    setSpeed(SPEED)\n  }\n  let convertedSpeed = SPEED >= 100 && SPEED < 300\n    ? 400 - SPEED - 30\n    : SPEED >= 300 && SPEED < 350\n      ? 400 - SPEED - 94\n      : SPEED >= 350 && SPEED < 400\n        ? 400 - SPEED - 48\n        : 400 - SPEED;\n  console.log('converted speed:', convertedSpeed)\n\n  let comparisonColor = 'green';\n  let swapColor = 'white';\n  let otherColor = 'orange';\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n\n  let stopLoop = false;\n  let numStops = 0;\n  let sorting = false;\n\n  const resetColors = (color) => {\n    const bars = document.getElementsByClassName('array-bar');\n    for (const bar of bars) {\n      bar.style.backgroundColor = color;\n    }\n  }\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight))\n    }\n    setArray(array)\n  }\n\n\n  const stop = () => {\n    if (!stopLoop) {\n      stopLoop = !stopLoop;\n      stopLoop = !stopLoop;\n    }\n    while (numStops >= 0) {\n      clearTimeout(numStops);\n      console.log(\"STOPPPPPP\");\n      numStops--;\n    }\n    numStops = 0;\n  }\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    sorting = true;\n    const animations = bubbleSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n            if (barOneIdx === bars.length - 1) {\n              resetColors('green')\n            }\n          }\n        }, i * convertedSpeed);\n      }\n      numStops += 1;\n    }\n  }\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    console.log(array.length)\n    console.log(animations)\n    const bars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = otherColor;\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i]\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          if (i === animations.length - 1) enableButtons();\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n            const splice = (currIdx, startIdx, subArr) => {\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height\n                subArr[currIdx - 1].style.height = temp\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor\n                subArr[currIdx - 1].style.backgroundColor = tempColor\n                currIdx -= 1;\n              }\n            }\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                splice(currIdx, otherIdx, bars)\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          }\n          if (i === animations.length - 1) bars[currIdx - 1].style.backgroundColor = comparisonColor;\n        }, i * convertedSpeed)\n      }\n    }\n    // resetColors(comparisonColor);\n  }\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          if (i === animations.length - 1) enableButtons();\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1];\n          if (barOneIdx !== prevBarOneIdx\n            || barTwoIdx !== prevBarTwoIdx\n            || barTwoIdx === array.length - 1\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n          }\n          if (i === animations.length - 1) resetColors('green');\n\n        }, i * convertedSpeed)\n      }\n    }\n\n  }\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? otherColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barPivot.backgroundColor = swapColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          if (i === animations.length - 1) enableButtons();\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = comparisonColor;\n            barTwo.backgroundColor = comparisonColor;\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) { // special \"pivot\" swap\n            barPivot.backgroundColor = swapColor;\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = comparisonColor;\n\n          }\n          barTwo.backgroundColor = comparisonColor;\n        }, i * convertedSpeed)\n      }\n    }\n  }\n\n  const animateAlgo = () => {\n    const sortButtons = document.getElementsByClassName('disable');\n    Array.from(sortButtons).forEach(button => button.disabled = true);\n    const algos = [bubbleSortAnimate, insertionSortAnimate, selectionSortAnimate, quickSortAnimate]\n    const algoIdxString = document.getElementById('sorting-options').options.selectedIndex;\n    const algoIdx = Number(algoIdxString)\n    algos[algoIdx]();\n  }\n\n  function enableButtons() {\n    const sortButtons = document.getElementsByClassName('disable');\n    Array.from(sortButtons).forEach(button => button.disabled = false);\n  }\n\n  return (\n    <div className=\"algo-container\">\n      <div className=\"array-container\">\n        {array.map((value, i) => (\n          <div\n            className=\"array-bar\"\n            key={i}\n            style={{\n              height: `${value / 11}vh`,\n              backgroundColor: 'orangered',\n              width: `${90 / NUM_BARS}vh`,\n              display: 'inline-block',\n              margin: 1,\n              borderRadius: '10px'\n            }}\n          >\n          </div>\n        ))}\n      </div>\n      <div className='controls-container'>\n        <div className=\"slidercontainer\">\n          <div className='slideritem'>\n            <input onChange={handleChange}\n              type=\"range\"\n              // list='tickmarks'\n              min=\"200\"\n              max=\"400\"\n              // value={SPEED}\n              // onChange={setSpeed}\n              step='50'\n              className=\"slidercontianer disable\"\n              id=\"my-range\"\n              name='Speed'\n            />\n            <label className='sliderlabel' for='myRange'>Speed</label>\n          </div>\n          <div className='slideritem'>\n            <input onChange={handleBarChange}\n              type=\"range\"\n              min=\"8\"\n              max=\"200\"\n              value={NUM_BARS}\n              className=\"slider disable\"\n              id=\"myBarRange\"\n              name='Length'\n            />\n            <label className='sliderlabel' for='myBarRange'>Length</label>\n          </div>\n        </div>\n        {/* <div className=\"slidercontainer\"> */}\n        {/* </div> */}\n        <div className=\"buttons\">\n          {/* <button onClick={stop}>Stop</button> */}\n          {/* <button onClick={resetColors}>Reset Colors</button> */}\n          <select className='disable' label='Choose an Algo' name=\"sorting-options\" id=\"sorting-options\">\n            <option label='Bubble' value='0'></option>\n            <option label='Insertion' value='1'></option>\n            <option label='Selection' value='2'></option>\n            <option label='Quick' value='3'></option>\n          </select>\n          <button className='disable' onClick={animateAlgo}>Sort!</button>\n          <button className='disable' onClick={() => {\n            resetArray();\n            resetColors('orangered');\n          }}>Reset</button>\n        </div>\n      </div>\n    </div >\n  )\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min)\n}\n","import framerize from './util';\n\nexport default function bubbleSort(array) {\n  const animations = []\n  let swapped = true;\n  while (swapped) {\n    swapped = false;\n    for (let i = 0; i < array.length - 1; i++) {\n      const animation = {};\n      animation.comparison = [i, i + 1];\n      if (array[i] > array[i + 1]) {\n        animation.swap = [i + 1, i];\n        const first = array[i];\n        const second = array[i + 1];\n        array[i] = second;\n        array[i + 1] = first;\n        swapped = true;\n      } else {\n        animation.swap = [i, i + 1];\n      }\n      animations.push(animation)\n    }\n  }\n  return framerize(animations);\n}\n","import framerize from './util';\n\nexport default function selectionSort(array) {\n  const animations = [];\n  let startIdx = 0;\n  while (startIdx < array.length - 1) {\n    let smallestIdx = startIdx;\n    for (let i = startIdx + 1; i < array.length; i++) {\n      const animation = {};\n      animation.comparison = [startIdx, i];\n      if (array[i] < array[smallestIdx]) {\n        smallestIdx = i;\n      }\n      if (i === array.length - 1) {\n        animation.swap = [startIdx, smallestIdx];\n      } else {\n        animation.swap = animation.comparison;\n      }\n      animations.push(animation);\n    }\n    const tempSmallVal = array[smallestIdx];\n    array[smallestIdx] = array[startIdx];\n    array[startIdx] = tempSmallVal;\n    startIdx += 1;\n  }\n  return framerize(animations);\n};\n","export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  if (currentNode.isFinish) return;\n  console.log(currentNode, grid)\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    if (array.length === 1 || currentNode !== array[array.length - 1]) {\n      array.push(currentNode);\n    }\n  }\n  neighbors = getNeighbors(currentNode, grid);\n  if (neighbors[0]) {\n    depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  } else if (array[array.length - 2] && getNeighbors(array[array.length - 2], grid)) {\n    array.pop()\n    depthFirstSearchHelp(array[array.length - 1], grid, neighbors, array);\n  }\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0\n    && !grid[row - 1][col].isVisited\n    && !grid[row - 1][col].isWall\n    && !grid[row - 1][col].isStart\n  ) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1\n    && !grid[row][col + 1].isVisited\n    && !grid[row][col + 1].isWall\n    && !grid[row][col + 1].isStart\n  ) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1\n    && !grid[row + 1][col].isVisited\n    && !grid[row + 1][col].isWall\n    && !grid[row + 1][col].isStart) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0\n    && !grid[row][col - 1].isVisited\n    && !grid[row][col - 1].isWall\n    && !grid[row][col - 1].isStart) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n","export default function breadthSearchFirst(grid, startNode, endNode) {\n  console.log('BST start ===')\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction breadthSearchFirstHelp(startNode, grid) {\n  console.log('BST help...', grid)\n  const array = []\n  const queue = [startNode]\n  // let i = 10\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    if (currentNode.isWall) continue;\n    currentNode.isVisited = true;\n    console.log(currentNode)\n    if (currentNode.isFinish) return array;\n    if (!currentNode.isStart) {\n      array.push(currentNode);\n    }\n    // grid[currentNode.row][currentNode.col].isVisited = true\n    const neighbors = getNeighbors(currentNode, grid);\n    neighbors.forEach(node => node.isVisited = true);\n    // console.log(neighbors)\n    queue.push(...neighbors)\n    // i--;\n  }\n\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n","export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const visitedNodesInOrder = [];\n\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes)\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    if (nearestNode.isWall) continue;\n    if (nearestNode === endNode || nearestNode.distance === Infinity) {\n      visitedNodesInOrder.shift();\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(nearestNode, grid);\n    visitedNodesInOrder.push(nearestNode);\n  }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const neighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPath(finishNode) {\n  const shortestPath = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    shortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPath;\n}\n","import React from 'react';\nimport './Node.css'\nexport default class Node extends React.Component {\n  constructor(props) {\n    super(props);\n    this.children = [];\n  }\n\n  addChild(name) {\n    this.children.push(new Node(name));\n    return this;\n  }\n\n  render() {\n    const {\n      isFinish,\n      isStart,\n      isVisited,\n      location,\n      col,\n      row,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp\n    } = this.props;\n    const extraClassName =\n      isFinish\n        ? 'node-finish'\n        : isStart\n          ? 'node-start'\n          : isVisited\n            ? 'node-visited'\n            : '';\n    return (\n      <div className={`node ${extraClassName}`}\n        id={`loc-${location}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      >\n        <div className='inner-node'></div>\n      </div>\n    )\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n  const GRID_HEIGHT = Math.floor(window.innerHeight / 35);\n  const GRID_WIDTH = Math.floor(window.innerWidth / 27);\n  let finding = false;\n\n  // const START_NODE_ROW = 8;\n  // const START_NODE_COL = 12;\n  // const END_NODE_ROW = 22;\n  // const END_NODE_COL = 37;\n  const START_NODE_ROW = Math.floor(GRID_HEIGHT / 3);\n  const START_NODE_COL = Math.floor(GRID_WIDTH / 4);\n  const END_NODE_ROW = Math.floor(GRID_HEIGHT / 1.5);\n  const END_NODE_COL = Math.floor(GRID_WIDTH / 1.3);\n\n\n  useEffect(() => {\n    setGrid(getBlankGrid(\n      START_NODE_ROW,\n      START_NODE_COL,\n      END_NODE_ROW,\n      END_NODE_COL,\n      GRID_WIDTH,\n      GRID_HEIGHT));\n  }, [])\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n    if (row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || finding) {\n      return;\n    }\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  }\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed\n      || row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n  }\n  const handleMouseUp = () => {\n    mousePressed = false;\n  }\n  const depthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          finding = false;\n          enableButtons();\n        }\n      }, interval)\n    }\n  }\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const breadthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          finding = false;\n          enableButtons();\n        }\n      }, interval)\n    }\n  }\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    breadthFirstSearchAnimate(pathOfNodes)\n  }\n\n\n  const dijkstraAnimate = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n              if (i === pathOfNodes.length - 1 && j === shortestPath.length - 1) {\n                finding = false;\n                enableButtons();\n              }\n            }, newInterval);\n          }\n        }\n      }, interval)\n    }\n  }\n\n  const dijkstraVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode)\n    dijkstraAnimate(visitiedNodesInOrder, shortestPath)\n  }\n\n  const resetGrid = () => {\n    grid.forEach(row => row.forEach(node => {\n      const currentDomNode = document.getElementById(`loc-${node.row}-${node.col}`)\n      currentDomNode.classList.remove('node-visited', 'node-is-wall', 'node-short-visited')\n    }))\n    setGrid([])\n    setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL, GRID_WIDTH, GRID_HEIGHT));\n  }\n\n  const resetPath = () => {\n    grid.forEach(row => row.forEach(node => {\n      const currentDomNode = document.getElementById(`loc-${node.row}-${node.col}`);\n      currentDomNode.classList.remove('node-visited', 'node-short-visited');\n      node.isVisited = false;\n    }))\n    setGrid(grid)\n    // setGrid(getBlankGrid(START_NODE_ROW, START_NODE_COL, END_NODE_ROW, END_NODE_COL, GRID_WIDTH, GRID_HEIGHT));\n  }\n\n  const animateAlgo = () => {\n    resetPath();\n    finding = true;\n    const findingButtons = document.getElementsByClassName('disable');\n    Array.from(findingButtons).forEach(button => button.disabled = true);\n    const algos = [depthFirstSearchVisualize, breadthFirstSearchVisualize, dijkstraVisualize]\n    const algoIdxString = document.getElementById('pathfinding-options').options.selectedIndex;\n    const algoIdx = Number(algoIdxString)\n    algos[algoIdx]();\n  }\n\n  function enableButtons() {\n    const findingButtons = document.getElementsByClassName('disable');\n    Array.from(findingButtons).forEach(button => button.disabled = false);\n  }\n\n  return (\n    <div id='grid-container'>\n      <div id='grid-controls'>\n        <select className='disable' label='Choose an Algo' name=\"pathfinding-options\" id=\"pathfinding-options\">\n          <option label='Depth First Search' value='0'></option>\n          <option label='Breadth First Search' value='1'></option>\n          <option label='Dijkstra' value='2'></option>\n        </select>\n        <button className='disable' onClick={animateAlgo}>Search!</button>\n        <button className='disable' onClick={resetGrid}>Reset Grid</button>\n\n      </div>\n      {getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp)}\n    </div>\n  );\n}\n\n\nfunction getBlankGrid(startRow, startCol, endRow, endCol, gridWidth, gridHeight) {\n  const grid = [];\n  for (let row = 0; row < gridHeight; row++) {\n    const currentRow = [];\n    for (let col = 0; col < gridWidth; col++) {\n      const currentNode = {\n        col,\n        row,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === endRow && col === endCol,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n      currentRow.push(currentNode);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\nfunction getInitialDomGrid(grid, handleMouseDown, handleMouseEnter, handleMouseUp) {\n  return (\n    <div className='grid'>\n      {grid.map((row, rowIdx) => {\n        return (\n          <div key={rowIdx} className='grid-row'>\n            {row.map((node) => {\n              const { isStart, isFinish, isVisited, col, row } = node;\n              return (\n                <Node\n                  isStart={isStart}\n                  isFinish={isFinish}\n                  key={col + '-' + row}\n                  location={row + '-' + col}\n                  test={'hello there'}\n                  isVisited={isVisited}\n                  row={row}\n                  col={col}\n                  onMouseDown={handleMouseDown}\n                  onMouseEnter={handleMouseEnter}\n                  onMouseUp={handleMouseUp}\n                ></Node>\n              );\n            })}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import React, { useEffect } from 'react';\nimport './about.css';\n\nexport default function () {\n  let lines = ['so...what\\'s an algorithm?',\n    'and why would you need one?',\n    'and what does one look like?',\n  ]\n\n  useEffect(() => {\n    showLines()\n  }, [])\n\n\n  const showLines = (altDomArray) => {\n    const domLines = document.getElementsByClassName('invisible-lines');\n    for (let i = 0; i < domLines.length; i++) {\n      const domLine = domLines[i];\n      console.log(domLine)\n      setTimeout(() => {\n        domLine.classList.add('line');\n        domLine.hidden = false;\n        if (i === domLines.length - 1) {\n          setTimeout(() => {\n            const exploreToggles = document.getElementById('explore');\n            exploreToggles.style.display = 'flex';\n            exploreToggles.style.justifyContent = 'center';\n            exploreToggles.hidden = false;\n          }, 3500)\n        }\n      }, 3300 * i)\n    }\n  }\n  return (\n    <div className='lines'>\n      {lines.map((line) => {\n        return <div className='invisible-lines' hidden> <p>{line}</p> </div>\n      })}\n      <div id='explore' hidden={true}>\n        <button id='go-button'>\n          <img onClick={() => window.location = '/sorting'} src='apple-touch-icon.png'></img>\n        </button>\n        <span>\n          <p>An algorithm is a process determined by rules a computer can follow.\n              The process happens for a provided group of things, or data.</p>\n          <p>Perhaps your phone wants to get you to the nearest grocery store, or show you your mutual friend connections.</p>\n          <p>Your phone doesn't just know how to do this. Someone taught it how to know. Someone left it a letter.</p>\n          <p>That someone is a Software Engineer, and that letter is an algorithm.*</p>\n          <p style={{ fontSize: '10px' }}>*Yes, it's a bit more complicated than that, but haven't we already argued\n                                            enough this year? Click the logo!</p>\n        </span>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport NavBar from './layout/NavBar';\nimport SortingViz from './SortingViz/SortingViz';\nimport PathFindingViz from './PathfindingViz/PathfindingViz';\nimport WhatsAnAlgorithm from './About/WhatsAnAlgorithm';\n\n\nfunction App() {\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/pathfinding\">\n                    <NavBar />\n                    <PathFindingViz></PathFindingViz>\n                </Route>\n            </Switch>\n            <Switch>\n                <Route exact path=\"/sorting\">\n                    <NavBar />\n                    <SortingViz></SortingViz>\n                </Route>\n            </Switch>\n            <Switch>\n                <Route exact path=\"/\">\n                    <WhatsAnAlgorithm />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}