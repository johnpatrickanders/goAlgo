{"version":3,"sources":["layout/NavBar.js","SortingViz/util.js","SortingViz/insertionSort.js","SortingViz/quickSort.js","SortingViz/SortingViz.js","SortingViz/bubbleSort.js","SortingViz/selectionSort.js","PathfindingViz/depthFirstSearch.js","PathfindingViz/breadthFirstSearch.js","PathfindingViz/dijkstra.js","PathfindingViz/Node/Node.js","PathfindingViz/PathfindingViz.js","App.js","index.js"],"names":["NavBar","history","useHistory","console","log","id","onClick","push","framerize","array","framedAnimations","frame","comparison","swap","i","j","temp","quickSort","quickSortHelper","startIdx","endIdx","animations","pivotIdx","leftIdx","rightIdx","animation","leftSubArrIsSmaller","length","SortingViz","useState","setArray","NUM_BARS","SET_NUM_BARS","SPEED","setSpeed","convertedSpeed","maxBarHeight","Math","floor","window","screen","availHeight","stopLoop","availWidth","resetColors","color","bars","document","getElementsByClassName","style","backgroundColor","resetArray","min","max","random","useEffect","bubbleSortAnimate","swapped","first","second","bubbleSort","barOneIdx","barTwoIdx","barOne","barTwo","setTimeout","currentBarColor","tempHeight","height","insertionSortAnimate","insertionSort","currIdx","otherIdx","initIdx","splice","subArr","tempColor","selectionSortAnimate","smallestIdx","tempSmallVal","selectionSort","prevBarOneIdx","prevBarTwoIdx","quickSortAnimate","barPivot","className","map","value","key","width","display","margin","borderRadius","onChange","e","target","type","list","step","name","for","label","algos","algoIdxString","getElementById","options","selectedIndex","Number","depthFirstSearch","grid","startNode","endNode","depthFirstSearchHelp","currentNode","neighbors","isFinish","isStart","isVisited","getNeighbors","pop","node","col","row","isWall","breadthSearchFirst","queue","shift","forEach","breadthSearchFirstHelp","visitedNodesInOrder","distance","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","nearestNode","Infinity","updateUnvisitedNeighbors","sort","nodeOne","nodeTwo","filter","neighbor","getUnvisitedNeighbors","previousNode","Node","props","children","this","location","onMouseDown","onMouseEnter","onMouseUp","extraClassName","React","Component","PathfindingViz","setGrid","mousePressed","currentRow","handleMouseDown","targetNode","targetDomNode","classList","add","remove","handleMouseEnter","handleMouseUp","depthFirstSearchVisualize","pathOfNodes","interval","currentPathNode","depthFirstSearchAnimate","breadthFirstSearchVisualize","breadthFirstSearch","breadthFirstSearchAnimate","dijkstraAnimate","visitiedNodesInOrder","dijkstra","shortestPath","finishNode","unshift","getNodesInShortestPath","currentShortNode","dijkstraVisualize","rowIdx","nodeIdx","test","App","exact","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e4a4ee2e.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Slider from '../SortingViz/SpeedControls';\nimport './NavBar.css'\n\n\nexport default function NavBar() {\n  const history = useHistory();\n\n  const handleClickSort = () => {\n    history.push('/');\n  }\n  const handleClickPath = () => {\n    history.push('/pathfinding');\n  }\n  console.log(history)\n  return (\n    <nav id='navbar'>\n      <button onClick={handleClickSort}>\n        Sorting\n        </button>\n      <button onClick={handleClickPath}>\n        Pathfinding\n        </button>\n    </nav>\n  )\n}\n","export default function framerize(array) {\n  const framedAnimations = [];\n  for (const frame of array) {\n    // if (frame === undefined) continue;\n    framedAnimations.push(frame.comparison);\n    framedAnimations.push(frame.comparison);\n    framedAnimations.push(frame.swap);\n  }\n  return framedAnimations;\n}\n","import framerize from './util';\n\nexport default function insertionSort(array) {\n  const animations = [];\n  for (let i = 1; i < array.length; i++) {\n    let j = i;\n    // let animation = {}\n    // animation.comparison = [j, j - 1];\n    // animation.swap = [0, 0];\n    // console.log(animation.swap)\n    animations.push({ comparison: [j, j - 1], swap: [0, 0] });\n    console.log(animations[0])\n\n    while (j > 0 && array[j] < array[j - 1]) {\n      swap(j, j - 1, array);\n      // animation.comparison = [j, j - 1];\n      // animation.swap = [i, j - 1];\n      // animations.push(animation);\n      animations.push({ comparison: [j, j - 1], swap: [j, j - 1] });\n      j -= 1;\n\n    }\n    // if (!animation.swap) {\n    //   animation.swap = [0, 0]\n    // }\n  }\n  // console.log(animations)\n  return framerize(animations);\n}\n\nfunction swap(i, j, array) {\n  const temp = array[i];\n  array[i] = array[j]\n  array[j] = temp\n}\n","import framerize from './util';\n\nexport default function quickSort(array) {\n  // Write your code here.\n  const frames = framerize(quickSortHelper(array, 0, array.length - 1));\n  return frames;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations = []) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    const animation = {};\n    animation.comparison = [leftIdx, rightIdx, pivotIdx]\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(array, leftIdx, rightIdx);\n      animation.swap = [leftIdx, rightIdx, pivotIdx];\n    } else {\n      animation.swap = [0, 0, pivotIdx]\n    }\n    animations.push(animation);\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx += 1;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx -= 1;\n  }\n  swap(array, pivotIdx, rightIdx);\n  const animation = {};\n  animation.comparison = [pivotIdx, rightIdx, pivotIdx];\n  animation.swap = [pivotIdx, rightIdx, pivotIdx];\n  animations.push(animation);\n  const leftSubArrIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1)\n  if (leftSubArrIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n  }\n  return animations\n}\n\nfunction swap(array, i, j) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","import React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nimport Slider from './SpeedControls';\n\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  let [NUM_BARS, SET_NUM_BARS] = useState(20);\n  const handleBarChange = (e) => {\n    NUM_BARS = e.target.value;\n    SET_NUM_BARS(NUM_BARS);\n    resetArray()\n    resetColors()\n  }\n\n  let [SPEED, setSpeed] = useState(150)\n  const handleChange = (e) => {\n    SPEED = e.target.value;\n    setSpeed(SPEED)\n  }\n  let convertedSpeed = 301 - SPEED;\n\n  let comparisonColor = 'green';\n  let swapColor = 'white';\n  let otherColor = 'orange';\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 150);\n\n  let stopLoop = false;\n  let numStops = 0;\n\n  const resetColors = (color) => {\n    const bars = document.getElementsByClassName('array-bar');\n    // if (!color) color = 'orangered';\n    for (const bar of bars) {\n      bar.style.backgroundColor = color;\n    }\n    // setArray(array)\n  }\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight))\n    }\n    setArray(array)\n  }\n\n\n  const stop = () => {\n    if (!stopLoop) {\n      stopLoop = !stopLoop;\n      stopLoop = !stopLoop;\n    }\n    while (numStops >= 0) {\n      clearTimeout(numStops);\n      console.log(\"STOPPPPPP\");\n      numStops--;\n    }\n    numStops = 0;\n  }\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n            if (barOneIdx === bars.length - 1) {\n              resetColors('green')\n            }\n          }\n        }, i * convertedSpeed);\n      }\n      numStops += 1;\n    }\n\n  }\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    console.log(array.length)\n    console.log(animations)\n    const bars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = otherColor;\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i]\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          let [prevCurrIdx, prevOtherIdx] = animations[i - 3] ? animations[i - 3] : [0, 0]\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n            const splice = (currIdx, startIdx, subArr) => {\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height\n                subArr[currIdx - 1].style.height = temp\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor\n                subArr[currIdx - 1].style.backgroundColor = tempColor\n                currIdx -= 1;\n              }\n            }\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                splice(currIdx, otherIdx, bars)\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          }\n          if (i === animations.length - 1) bars[currIdx - 1].style.backgroundColor = comparisonColor;\n        }, i * convertedSpeed)\n      }\n    }\n    // resetColors(comparisonColor);\n  }\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1];\n          if (barOneIdx !== prevBarOneIdx\n            || barTwoIdx !== prevBarTwoIdx\n            || barTwoIdx === array.length - 1\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n          }\n        }, i * convertedSpeed)\n      }\n    }\n\n  }\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? otherColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barPivot.backgroundColor = swapColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = comparisonColor;\n            barTwo.backgroundColor = comparisonColor;\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) { // special \"pivot\" swap\n            barPivot.backgroundColor = swapColor;\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = comparisonColor;\n\n          }\n          // barPivot.backgroundColor = comparisonColor;\n          barTwo.backgroundColor = comparisonColor;\n        }, i * convertedSpeed)\n      }\n    }\n  }\n\n  const animateAlgo = () => {\n    const algos = [bubbleSortAnimate, insertionSortAnimate, selectionSortAnimate, quickSortAnimate]\n    const algoIdxString = document.getElementById('sorting-options').options.selectedIndex;\n    const algoIdx = Number(algoIdxString)\n    algos[algoIdx]();\n  }\n\n  return (\n    <div className=\"algo-container\">\n      <div className=\"array-container\">\n        {array.map((value, i) => (\n          <div\n            className=\"array-bar\"\n            key={i}\n            style={{\n              height: `${value}px`,\n              backgroundColor: 'orangered',\n              width: `${90 / NUM_BARS}vh`,\n              display: 'inline-block',\n              margin: 1,\n              borderRadius: '10px'\n            }}\n          >\n          </div>\n        ))}\n      </div>\n      <div className=\"slidercontainer\">\n        <input onChange={handleChange}\n          type=\"range\"\n          list='tickmarks'\n          min=\"1\"\n          max=\"301\"\n          // value={SPEED}\n          // onChange={setSpeed}\n          step='60'\n          className=\"slidercontianer\"\n          id=\"my-range\"\n          name='Speed'\n        />\n\n        <label className='sliderlabel' for='myRange'>Speed</label>\n      </div>\n      <div className=\"slidercontainer\">\n        <input onChange={handleBarChange}\n          type=\"range\"\n          min=\"8\"\n          max=\"200\"\n          value={NUM_BARS}\n          className=\"slider\"\n          id=\"myBarRange\"\n          name='Length'\n        />\n        <label className='sliderlabel' for='myBarRange'>Length</label>\n      </div>\n      <div className=\"buttons\">\n        {/* <button onClick={stop}>Stop</button> */}\n        <button onClick={resetColors}>Reset Colors</button>\n        <button onClick={() => {\n          resetArray();\n          resetColors('orangered');\n        }}>Get New Array</button>\n        <select label='Choose an Algo' name=\"sorting-options\" id=\"sorting-options\">\n          <option label='Bubble' value='0'></option>\n          <option label='Insertion' value='1'></option>\n          <option label='Selection' value='2'></option>\n          <option label='Quick' value='3'></option>\n        </select>\n        <button onClick={animateAlgo}>Sort!</button>\n      </div>\n    </div >\n  )\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min)\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n  return true;\n}\n\n// console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))\n","import framerize from './util';\n\nexport default function bubbleSort(array) {\n  // Write your code here.\n  const animations = []\n  let swapped = true;\n  while (swapped) {\n    swapped = false;\n    for (let i = 0; i < array.length - 1; i++) {\n      const animation = {};\n      animation.comparison = [i, i + 1];\n      if (array[i] > array[i + 1]) {\n        animation.swap = [i + 1, i];\n        const first = array[i];\n        const second = array[i + 1];\n        array[i] = second;\n        array[i + 1] = first;\n        swapped = true;\n      } else {\n        animation.swap = [i, i + 1];\n      }\n      animations.push(animation)\n    }\n  }\n  return framerize(animations);\n}\n","import framerize from './util';\n\nexport default function selectionSort(array) {\n  const animations = [];\n  let startIdx = 0;\n  while (startIdx < array.length - 1) {\n    let smallestIdx = startIdx;\n    for (let i = startIdx + 1; i < array.length; i++) {\n      const animation = {};\n      animation.comparison = [startIdx, i];\n      if (array[i] < array[smallestIdx]) {\n        smallestIdx = i;\n        // console.log(smallestIdx)\n      }\n      if (i === array.length - 1) {\n        animation.swap = [startIdx, smallestIdx];\n        // console.log(smallestIdx);\n      } else {\n        animation.swap = animation.comparison;\n      }\n      animations.push(animation);\n    }\n    const tempSmallVal = array[smallestIdx];\n    array[smallestIdx] = array[startIdx];\n    array[startIdx] = tempSmallVal;\n    startIdx += 1;\n  }\n  return framerize(animations);\n};\n","export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  // if (!currentNode) currentNode = array.pop();\n  if (currentNode.isFinish) return;\n  console.log(currentNode, grid)\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    if (array.length === 1 || currentNode !== array[array.length - 1]) {\n      array.push(currentNode);\n    }\n  }\n  neighbors = getNeighbors(currentNode, grid);\n  // let nextNode = neighbors[0] ? neighbors[0] : array[array.length - 2]\n  if (neighbors[0]) {\n    depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  } else if (array[array.length - 2] && getNeighbors(array[array.length - 2], grid)) {\n    array.pop()\n    depthFirstSearchHelp(array[array.length - 1], grid, neighbors, array);\n  }\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0\n    && !grid[row - 1][col].isVisited\n    && !grid[row - 1][col].isWall\n    && !grid[row - 1][col].isStart\n  ) neighbors.push(grid[row - 1][col]); // \"top\"\n  // else neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1\n    && !grid[row][col + 1].isVisited\n    && !grid[row][col + 1].isWall\n    && !grid[row][col + 1].isStart\n  ) neighbors.push(grid[row][col + 1]) // \"right\"\n  // else neighbors.push(grid[row][col - 1]);\n  if (row < grid.length - 1\n    && !grid[row + 1][col].isVisited\n    && !grid[row + 1][col].isWall\n    && !grid[row + 1][col].isStart) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  // else neighbors.push(grid[row - 1][col]);\n  if (col > 0\n    && !grid[row][col - 1].isVisited\n    && !grid[row][col - 1].isWall\n    && !grid[row][col - 1].isStart) neighbors.push(grid[row][col - 1]) // \"left\"\n  // else neighbors.push(grid[row][col + 1]);\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n","export default function breadthSearchFirst(grid, startNode, endNode) {\n  console.log('BST start ===')\n  const pathOfNodes = breadthSearchFirstHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction breadthSearchFirstHelp(startNode, grid) {\n  console.log('BST help...', grid)\n  const array = []\n  const queue = [startNode]\n  // let i = 10\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    if (currentNode.isWall) continue;\n    currentNode.isVisited = true;\n    console.log(currentNode)\n    if (currentNode.isFinish) return array;\n    if (!currentNode.isStart) {\n      array.push(currentNode);\n    }\n    // grid[currentNode.row][currentNode.col].isVisited = true\n    const neighbors = getNeighbors(currentNode, grid);\n    neighbors.forEach(node => node.isVisited = true);\n    // console.log(neighbors)\n    queue.push(...neighbors)\n    // i--;\n  }\n\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n","export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const visitedNodesInOrder = [];\n\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes)\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    if (nearestNode.isWall) continue;\n    if (nearestNode === endNode || nearestNode.distance === Infinity) {\n      visitedNodesInOrder.shift();\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(nearestNode, grid);\n    visitedNodesInOrder.push(nearestNode);\n  }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const neighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPath(finishNode) {\n  const shortestPath = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    shortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPath;\n}\n","import React from 'react';\nimport './Node.css'\nexport default class Node extends React.Component {\n  constructor(props) {\n    super(props);\n    this.children = [];\n  }\n\n  addChild(name) {\n    this.children.push(new Node(name));\n    return this;\n  }\n\n  render() {\n    const {\n      isFinish,\n      isStart,\n      isVisited,\n      location,\n      col,\n      row,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp\n    } = this.props;\n    const extraClassName =\n      isFinish\n        ? 'node-finish'\n        : isStart\n          ? 'node-start'\n          : isVisited\n            ? 'node-visited'\n            : '';\n    return (\n      <div className={`node ${extraClassName}`}\n        id={`loc-${location}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      >\n        <div className='inner-node'></div>\n      </div>\n    )\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n\n  const START_NODE_ROW = 10;\n  const START_NODE_COL = 15;\n  const END_NODE_ROW = 10;\n  const END_NODE_COL = 35;\n\n  useEffect(() => {\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === END_NODE_ROW && col === END_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n      grid.push(currentRow);\n    }\n    setGrid([...grid]);\n    console.log('useEffect once?')\n  }, [])\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n    if (row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL) {\n      return;\n    }\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  }\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed\n      || row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  }\n  const handleMouseUp = () => {\n    mousePressed = false;\n  }\n  const depthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const breadthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    console.log(pathOfNodes)\n    breadthFirstSearchAnimate(pathOfNodes)\n  }\n\n\n  const dijkstraVisualize = (pathOfNodes, shortestPath) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n        if (i === pathOfNodes.length - 1) {\n          for (let j = 0; j < shortestPath.length; j++) {\n            const newInterval = j * SPEED;\n            setTimeout(() => {\n              const currentShortNode = shortestPath[j];\n              const currentShortDomNode = document.getElementById(`loc-${currentShortNode.row}-${currentShortNode.col}`);\n              currentShortDomNode.classList.add('node-short-visited');\n            }, newInterval);\n          }\n        }\n      }, interval)\n    }\n  }\n\n  const dijkstraAnimate = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getNodesInShortestPath(endNode)\n    console.log(shortestPath);\n    dijkstraVisualize(visitiedNodesInOrder, shortestPath)\n  }\n  return (\n    <>\n      <button onClick={() => dijkstraAnimate()}>Dijkstra</button>\n      <button onClick={() => depthFirstSearchVisualize()}>Depth First Search</button>\n      <button onClick={() => breadthFirstSearchVisualize()}>Breadth First Search</button>\n      <div className='grid'>\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} className='grid-row'>\n              {row.map((node, nodeIdx) => {\n                const { isStart, isFinish, isVisited, col, row } = node;\n                return (\n                  <Node\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    key={col + '-' + row}\n                    location={row + '-' + col}\n                    test={'hello there'}\n                    isVisited={isVisited}\n                    row={row}\n                    col={col}\n                    onMouseDown={handleMouseDown}\n                    onMouseEnter={handleMouseEnter}\n                    onMouseUp={handleMouseUp}\n                  ></Node>\n                );\n              })}\n            </div>\n          )\n        })}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport NavBar from './layout/NavBar';\nimport SortingViz from './SortingViz/SortingViz';\nimport PathFindingViz from './PathfindingViz/PathfindingViz';\n\n\nfunction App() {\n\n    return (\n        <BrowserRouter>\n            <NavBar />\n            <Switch>\n                <Route exact path=\"/pathfinding\">\n                    <PathFindingViz></PathFindingViz>\n                </Route>\n            </Switch>\n            <Switch>\n                <Route exact path=\"/\">\n                    <SortingViz></SortingViz>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}