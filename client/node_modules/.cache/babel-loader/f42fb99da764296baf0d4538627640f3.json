{"ast":null,"code":"export default function depthFirstSearch(grid, startNode, endNode) {\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid);\n  return pathOfNodes;\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  if (!currentNode) currentNode = array.pop();\n  if (currentNode.isFinish) return;\n  console.log(currentNode, grid);\n\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    array.push(currentNode);\n  }\n\n  neighbors = getNeighbors(currentNode, grid); // let nextNode = neighbors[0] ? neighbors[0] : array[array.length - 2]\n\n  depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited && !grid[row - 1][col].isWall && !grid[row - 1][col].isStart) neighbors.push(grid[row - 1][col]); // \"top\"\n  // else neighbors.push(grid[row + 1][col]);\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited && !grid[row][col + 1].isWall && !grid[row][col + 1].isStart) neighbors.push(grid[row][col + 1]); // \"right\"\n  // else neighbors.push(grid[row][col - 1]);\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited && !grid[row + 1][col].isWall && !grid[row + 1][col].isStart) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  // else neighbors.push(grid[row - 1][col]);\n\n  if (col > 0 && !grid[row][col - 1].isVisited && !grid[row][col - 1].isWall && !grid[row][col - 1].isStart) neighbors.push(grid[row][col - 1]); // \"left\"\n  // else neighbors.push(grid[row][col + 1]);\n\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/depthFirstSearch.js"],"names":["depthFirstSearch","grid","startNode","endNode","pathOfNodes","depthFirstSearchHelp","currentNode","neighbors","array","pop","isFinish","console","log","isStart","isVisited","push","getNeighbors","node","col","row","isWall","length","updateNeighbors","neighbor","distance","sortNodesByDistance","unvisitedNodes","sort","nodeOne","nodeTwo"],"mappings":"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","sourcesContent":["export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  if (!currentNode) currentNode = array.pop();\n  if (currentNode.isFinish) return;\n  console.log(currentNode, grid)\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    array.push(currentNode);\n  }\n  neighbors = getNeighbors(currentNode, grid);\n  // let nextNode = neighbors[0] ? neighbors[0] : array[array.length - 2]\n  depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0\n    && !grid[row - 1][col].isVisited\n    && !grid[row - 1][col].isWall\n    && !grid[row - 1][col].isStart\n  ) neighbors.push(grid[row - 1][col]); // \"top\"\n  // else neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1\n    && !grid[row][col + 1].isVisited\n    && !grid[row][col + 1].isWall\n    && !grid[row][col + 1].isStart\n  ) neighbors.push(grid[row][col + 1]) // \"right\"\n  // else neighbors.push(grid[row][col - 1]);\n  if (row < grid.length - 1\n    && !grid[row + 1][col].isVisited\n    && !grid[row + 1][col].isWall\n    && !grid[row + 1][col].isStart) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  // else neighbors.push(grid[row - 1][col]);\n  if (col > 0\n    && !grid[row][col - 1].isVisited\n    && !grid[row][col - 1].isWall\n    && !grid[row][col - 1].isStart) neighbors.push(grid[row][col - 1]) // \"left\"\n  // else neighbors.push(grid[row][col + 1]);\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n"]},"metadata":{},"sourceType":"module"}