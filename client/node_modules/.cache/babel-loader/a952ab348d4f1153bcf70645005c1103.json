{"ast":null,"code":"export default function depthFirstSearch(grid, startNode, endNode) {\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid);\n  return pathOfNodes;\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  neighbors = getNeighbors(currentNode, grid); // console.log('array:', array);\n  // console.log('current node:', currentNode)\n\n  if (currentNode.isFinish || currentNode.isWall) return;\n\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    array.push(currentNode);\n  }\n\n  depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/depthFirstSearch.js"],"names":["depthFirstSearch","grid","startNode","endNode","pathOfNodes","depthFirstSearchHelp","currentNode","neighbors","array","getNeighbors","isFinish","isWall","isStart","isVisited","push","node","col","row","length"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoD;AAEjE,QAAMC,WAAW,GAAGC,oBAAoB,CAACH,SAAD,EAAYD,IAAZ,CAAxC;AACA,SAAOG,WAAP;AAED;;AAED,SAASC,oBAAT,CAA8BC,WAA9B,EAA2CL,IAA3C,EAAiDM,SAAjD,EAA4DC,KAAK,GAAG,EAApE,EAAwE;AACtED,EAAAA,SAAS,GAAGE,YAAY,CAACH,WAAD,EAAcL,IAAd,CAAxB,CADsE,CAEtE;AACA;;AACA,MAAIK,WAAW,CAACI,QAAZ,IAAwBJ,WAAW,CAACK,MAAxC,EAAgD;;AAChD,MAAI,CAACL,WAAW,CAACM,OAAjB,EAA0B;AACxBN,IAAAA,WAAW,CAACO,SAAZ,GAAwB,IAAxB;AACAL,IAAAA,KAAK,CAACM,IAAN,CAAWR,WAAX;AACD;;AACDD,EAAAA,oBAAoB,CAACE,SAAS,CAAC,CAAD,CAAV,EAAeN,IAAf,EAAqBM,SAArB,EAAgCC,KAAhC,CAApB;AACA,SAAOA,KAAP;AACD;;AAGD,SAASC,YAAT,CAAsBM,IAAtB,EAA4Bd,IAA5B,EAAkC;AAChC,QAAMM,SAAS,GAAG,EAAlB;AACA,QAAM;AAAES,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeF,IAArB;AACA,MAAIE,GAAG,GAAG,CAAN,IAAW,CAAChB,IAAI,CAACgB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBH,SAAnC,EAA8CN,SAAS,CAACO,IAAV,CAAeb,IAAI,CAACgB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAHd,CAGkD;;AAClF,MAAIA,GAAG,GAAGf,IAAI,CAAC,CAAD,CAAJ,CAAQiB,MAAR,GAAiB,CAAvB,IAA4B,CAACjB,IAAI,CAACgB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBH,SAApD,EAA+DN,SAAS,CAACO,IAAV,CAAeb,IAAI,CAACgB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EAJ/B,CAIkE;;AAClG,MAAIC,GAAG,GAAGhB,IAAI,CAACiB,MAAL,GAAc,CAApB,IAAyB,CAACjB,IAAI,CAACgB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBH,SAAjD,EAA4DN,SAAS,CAACO,IAAV,CAAeb,IAAI,CAACgB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAL5B,CAKgE;;AAChG,MAAIA,GAAG,GAAG,CAAN,IAAW,CAACf,IAAI,CAACgB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBH,SAAnC,EAA8CN,SAAS,CAACO,IAAV,CAAeb,IAAI,CAACgB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EANd,CAMiD;;AACjF,SAAOT,SAAP;AACD","sourcesContent":["export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  neighbors = getNeighbors(currentNode, grid);\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  if (currentNode.isFinish || currentNode.isWall) return;\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    array.push(currentNode);\n  }\n  depthFirstSearchHelp(neighbors[0], grid, neighbors, array);\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n"]},"metadata":{},"sourceType":"module"}