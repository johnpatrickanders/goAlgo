{"ast":null,"code":"export default function depthFirstSearch(grid, startNode, endNode) {\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid);\n  return pathOfNodes;\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  if (!currentNode) return;\n  if (currentNode.isFinish) return;\n  console.log(currentNode, grid);\n\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    array.push(currentNode);\n  }\n\n  neighbors = getNeighbors(currentNode, grid); // let nextNode = neighbors[0] ? neighbors[0] : array[array.length - 2]\n\n  depthFirstSearchHelp(nextNode[0], grid, neighbors, array);\n  depthFirstSearchHelp(nextNode[1], grid, neighbors, array);\n  depthFirstSearchHelp(nextNode[2], grid, neighbors, array);\n  depthFirstSearchHelp(nextNode[3], grid, neighbors, array);\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited && !grid[row - 1][col].isWall && !grid[row - 1][col].isStart) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited && !grid[row][col + 1].isWall && !grid[row][col + 1].isStart) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited && !grid[row + 1][col].isWall && !grid[row + 1][col].isStart) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !grid[row][col - 1].isVisited && !grid[row][col - 1].isWall && !grid[row][col - 1].isStart) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/depthFirstSearch.js"],"names":["depthFirstSearch","grid","startNode","endNode","pathOfNodes","depthFirstSearchHelp","currentNode","neighbors","array","isFinish","console","log","isStart","isVisited","push","getNeighbors","nextNode","node","col","row","isWall","length"],"mappings":"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","sourcesContent":["export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const pathOfNodes = depthFirstSearchHelp(startNode, grid)\n  return pathOfNodes;\n\n}\n\nfunction depthFirstSearchHelp(currentNode, grid, neighbors, array = []) {\n  // console.log('array:', array);\n  // console.log('current node:', currentNode)\n  if (!currentNode) return;\n  if (currentNode.isFinish) return;\n  console.log(currentNode, grid)\n  if (!currentNode.isStart) {\n    currentNode.isVisited = true;\n    array.push(currentNode);\n  }\n  neighbors = getNeighbors(currentNode, grid);\n  // let nextNode = neighbors[0] ? neighbors[0] : array[array.length - 2]\n  depthFirstSearchHelp(nextNode[0], grid, neighbors, array);\n  depthFirstSearchHelp(nextNode[1], grid, neighbors, array);\n  depthFirstSearchHelp(nextNode[2], grid, neighbors, array);\n  depthFirstSearchHelp(nextNode[3], grid, neighbors, array);\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0\n    && !grid[row - 1][col].isVisited\n    && !grid[row - 1][col].isWall\n    && !grid[row - 1][col].isStart\n  ) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1\n    && !grid[row][col + 1].isVisited\n    && !grid[row][col + 1].isWall\n    && !grid[row][col + 1].isStart\n  ) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1\n    && !grid[row + 1][col].isVisited\n    && !grid[row + 1][col].isWall\n    && !grid[row + 1][col].isStart) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0\n    && !grid[row][col - 1].isVisited\n    && !grid[row][col - 1].isWall\n    && !grid[row][col - 1].isStart) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n"]},"metadata":{},"sourceType":"module"}