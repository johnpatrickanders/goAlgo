{"ast":null,"code":"import framerize from'./util';export default function selectionSort(array){var animations=[];var startIdx=0;while(startIdx<array.length-1){var smallestIdx=startIdx;for(var i=startIdx+1;i<array.length;i++){var animation={};animation.comparison=[startIdx,i];if(array[i]<array[smallestIdx]){smallestIdx=i;// console.log(smallestIdx)\n}if(i===array.length-1){animation.swap=[startIdx,smallestIdx];// console.log(smallestIdx);\n}else{animation.swap=animation.comparison;}animations.push(animation);}var tempSmallVal=array[smallestIdx];array[smallestIdx]=array[startIdx];array[startIdx]=tempSmallVal;startIdx+=1;}return framerize(animations);};","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/SortingViz/selectionSort.js"],"names":["framerize","selectionSort","array","animations","startIdx","length","smallestIdx","i","animation","comparison","swap","push","tempSmallVal"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,QAAtB,CAEA,cAAe,SAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,CAC3C,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAIC,CAAAA,QAAQ,CAAG,CAAf,CACA,MAAOA,QAAQ,CAAGF,KAAK,CAACG,MAAN,CAAe,CAAjC,CAAoC,CAClC,GAAIC,CAAAA,WAAW,CAAGF,QAAlB,CACA,IAAK,GAAIG,CAAAA,CAAC,CAAGH,QAAQ,CAAG,CAAxB,CAA2BG,CAAC,CAAGL,KAAK,CAACG,MAArC,CAA6CE,CAAC,EAA9C,CAAkD,CAChD,GAAMC,CAAAA,SAAS,CAAG,EAAlB,CACAA,SAAS,CAACC,UAAV,CAAuB,CAACL,QAAD,CAAWG,CAAX,CAAvB,CACA,GAAIL,KAAK,CAACK,CAAD,CAAL,CAAWL,KAAK,CAACI,WAAD,CAApB,CAAmC,CACjCA,WAAW,CAAGC,CAAd,CACA;AACD,CACD,GAAIA,CAAC,GAAKL,KAAK,CAACG,MAAN,CAAe,CAAzB,CAA4B,CAC1BG,SAAS,CAACE,IAAV,CAAiB,CAACN,QAAD,CAAWE,WAAX,CAAjB,CACA;AACD,CAHD,IAGO,CACLE,SAAS,CAACE,IAAV,CAAiBF,SAAS,CAACC,UAA3B,CACD,CACDN,UAAU,CAACQ,IAAX,CAAgBH,SAAhB,EACD,CACD,GAAMI,CAAAA,YAAY,CAAGV,KAAK,CAACI,WAAD,CAA1B,CACAJ,KAAK,CAACI,WAAD,CAAL,CAAqBJ,KAAK,CAACE,QAAD,CAA1B,CACAF,KAAK,CAACE,QAAD,CAAL,CAAkBQ,YAAlB,CACAR,QAAQ,EAAI,CAAZ,CACD,CACD,MAAOJ,CAAAA,SAAS,CAACG,UAAD,CAAhB,CACD","sourcesContent":["import framerize from './util';\n\nexport default function selectionSort(array) {\n  const animations = [];\n  let startIdx = 0;\n  while (startIdx < array.length - 1) {\n    let smallestIdx = startIdx;\n    for (let i = startIdx + 1; i < array.length; i++) {\n      const animation = {};\n      animation.comparison = [startIdx, i];\n      if (array[i] < array[smallestIdx]) {\n        smallestIdx = i;\n        // console.log(smallestIdx)\n      }\n      if (i === array.length - 1) {\n        animation.swap = [startIdx, smallestIdx];\n        // console.log(smallestIdx);\n      } else {\n        animation.swap = animation.comparison;\n      }\n      animations.push(animation);\n    }\n    const tempSmallVal = array[smallestIdx];\n    array[smallestIdx] = array[startIdx];\n    array[startIdx] = tempSmallVal;\n    startIdx += 1;\n  }\n  return framerize(animations);\n};\n"]},"metadata":{},"sourceType":"module"}