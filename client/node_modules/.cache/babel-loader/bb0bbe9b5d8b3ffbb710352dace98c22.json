{"ast":null,"code":"import framerize from './util';\nexport default function quickSort(array) {\n  // Write your code here.\n  const frames = framerize(quickSortHelper(array, 0, array.length - 1));\n  return frames;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations = []) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n\n  while (rightIdx >= leftIdx) {\n    const animation = {};\n    animation.comparison = [leftIdx, rightIdx, pivotIdx];\n\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(array, leftIdx, rightIdx);\n      animation.swap = [leftIdx, rightIdx, pivotIdx];\n    } else {\n      animation.swap = [0, 0, pivotIdx];\n    }\n\n    animations.push(animation);\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx += 1;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx -= 1;\n  }\n\n  swap(array, pivotIdx, rightIdx);\n  const animation = {};\n  animation.comparison = [pivotIdx, rightIdx, pivotIdx];\n  animation.swap = [pivotIdx, rightIdx, pivotIdx];\n  animations.push(animation);\n  const leftSubArrIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n\n  if (leftSubArrIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n  }\n\n  return animations;\n}\n\nfunction swap(array, i, j) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/src/SortingViz/quickSort.js"],"names":["framerize","quickSort","array","frames","quickSortHelper","length","startIdx","endIdx","animations","pivotIdx","leftIdx","rightIdx","animation","comparison","swap","push","leftSubArrIsSmaller","i","j","temp"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,QAAtB;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACvC;AACA,QAAMC,MAAM,GAAGH,SAAS,CAACI,eAAe,CAACF,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACG,MAAN,GAAe,CAA1B,CAAhB,CAAxB;AACA,SAAOF,MAAP;AACD;;AAED,SAASC,eAAT,CAAyBF,KAAzB,EAAgCI,QAAhC,EAA0CC,MAA1C,EAAkDC,UAAU,GAAG,EAA/D,EAAmE;AACjE,MAAIF,QAAQ,IAAIC,MAAhB,EAAwB;AACxB,QAAME,QAAQ,GAAGH,QAAjB;AACA,MAAII,OAAO,GAAGJ,QAAQ,GAAG,CAAzB;AACA,MAAIK,QAAQ,GAAGJ,MAAf;;AACA,SAAOI,QAAQ,IAAID,OAAnB,EAA4B;AAC1B,UAAME,SAAS,GAAG,EAAlB;AACAA,IAAAA,SAAS,CAACC,UAAV,GAAuB,CAACH,OAAD,EAAUC,QAAV,EAAoBF,QAApB,CAAvB;;AACA,QAAIP,KAAK,CAACQ,OAAD,CAAL,GAAiBR,KAAK,CAACO,QAAD,CAAtB,IAAoCP,KAAK,CAACS,QAAD,CAAL,GAAkBT,KAAK,CAACO,QAAD,CAA/D,EAA2E;AACzEK,MAAAA,IAAI,CAACZ,KAAD,EAAQQ,OAAR,EAAiBC,QAAjB,CAAJ;AACAC,MAAAA,SAAS,CAACE,IAAV,GAAiB,CAACJ,OAAD,EAAUC,QAAV,EAAoBF,QAApB,CAAjB;AACD,KAHD,MAGO;AACLG,MAAAA,SAAS,CAACE,IAAV,GAAiB,CAAC,CAAD,EAAI,CAAJ,EAAOL,QAAP,CAAjB;AACD;;AACDD,IAAAA,UAAU,CAACO,IAAX,CAAgBH,SAAhB;AACA,QAAIV,KAAK,CAACQ,OAAD,CAAL,IAAkBR,KAAK,CAACO,QAAD,CAA3B,EAAuCC,OAAO,IAAI,CAAX;AACvC,QAAIR,KAAK,CAACS,QAAD,CAAL,IAAmBT,KAAK,CAACO,QAAD,CAA5B,EAAwCE,QAAQ,IAAI,CAAZ;AACzC;;AACDG,EAAAA,IAAI,CAACZ,KAAD,EAAQO,QAAR,EAAkBE,QAAlB,CAAJ;AACA,QAAMC,SAAS,GAAG,EAAlB;AACAA,EAAAA,SAAS,CAACC,UAAV,GAAuB,CAACJ,QAAD,EAAWE,QAAX,EAAqBF,QAArB,CAAvB;AACAG,EAAAA,SAAS,CAACE,IAAV,GAAiB,CAACL,QAAD,EAAWE,QAAX,EAAqBF,QAArB,CAAjB;AACAD,EAAAA,UAAU,CAACO,IAAX,CAAgBH,SAAhB;AACA,QAAMI,mBAAmB,GAAGL,QAAQ,GAAG,CAAX,GAAeL,QAAf,GAA0BC,MAAM,IAAII,QAAQ,GAAG,CAAf,CAA5D;;AACA,MAAIK,mBAAJ,EAAyB;AACvBZ,IAAAA,eAAe,CAACF,KAAD,EAAQI,QAAR,EAAkBK,QAAQ,GAAG,CAA7B,EAAgCH,UAAhC,CAAf;AACAJ,IAAAA,eAAe,CAACF,KAAD,EAAQS,QAAQ,GAAG,CAAnB,EAAsBJ,MAAtB,EAA8BC,UAA9B,CAAf;AACD,GAHD,MAGO;AACLJ,IAAAA,eAAe,CAACF,KAAD,EAAQS,QAAQ,GAAG,CAAnB,EAAsBJ,MAAtB,EAA8BC,UAA9B,CAAf;AACAJ,IAAAA,eAAe,CAACF,KAAD,EAAQI,QAAR,EAAkBK,QAAQ,GAAG,CAA7B,EAAgCH,UAAhC,CAAf;AACD;;AACD,SAAOA,UAAP;AACD;;AAED,SAASM,IAAT,CAAcZ,KAAd,EAAqBe,CAArB,EAAwBC,CAAxB,EAA2B;AACzB,QAAMC,IAAI,GAAGjB,KAAK,CAACe,CAAD,CAAlB;AACAf,EAAAA,KAAK,CAACe,CAAD,CAAL,GAAWf,KAAK,CAACgB,CAAD,CAAhB;AACAhB,EAAAA,KAAK,CAACgB,CAAD,CAAL,GAAWC,IAAX;AACD","sourcesContent":["import framerize from './util';\n\nexport default function quickSort(array) {\n  // Write your code here.\n  const frames = framerize(quickSortHelper(array, 0, array.length - 1));\n  return frames;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations = []) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    const animation = {};\n    animation.comparison = [leftIdx, rightIdx, pivotIdx]\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(array, leftIdx, rightIdx);\n      animation.swap = [leftIdx, rightIdx, pivotIdx];\n    } else {\n      animation.swap = [0, 0, pivotIdx]\n    }\n    animations.push(animation);\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx += 1;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx -= 1;\n  }\n  swap(array, pivotIdx, rightIdx);\n  const animation = {};\n  animation.comparison = [pivotIdx, rightIdx, pivotIdx];\n  animation.swap = [pivotIdx, rightIdx, pivotIdx];\n  animations.push(animation);\n  const leftSubArrIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1)\n  if (leftSubArrIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n  }\n  return animations\n}\n\nfunction swap(array, i, j) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n"]},"metadata":{},"sourceType":"module"}