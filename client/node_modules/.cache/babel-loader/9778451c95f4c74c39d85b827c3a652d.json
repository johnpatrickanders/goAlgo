{"ast":null,"code":"export default function depthFirstSearch(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    if (nearestNode.isWall) continue;\n\n    if (nearestNode === endNode || nearestNode.distance === Infinity) {\n      visitedNodesInOrder.shift();\n      return visitedNodesInOrder;\n    }\n\n    updateUnvisitedNeighbors(nearestNode, grid);\n    visitedNodesInOrder.push(nearestNode);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const neighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/dijkstra.js"],"names":["depthFirstSearch","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","nearestNode","shift","isVisited","isWall","Infinity","updateUnvisitedNeighbors","push","sort","nodeOne","nodeTwo","getUnvisitedNeighbors","node","neighbors","col","row","filter","neighbor","nodes"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoD;AAEjE,QAAMC,mBAAmB,GAAG,EAA5B;AAEAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC;;AACA,SAAOK,cAAc,CAACE,MAAf,GAAwB,CAA/B,EAAkC;AAChCC,IAAAA,mBAAmB,CAACH,cAAD,CAAnB;AACA,UAAMI,WAAW,GAAGJ,cAAc,CAACK,KAAf,EAApB;AACAD,IAAAA,WAAW,CAACE,SAAZ,GAAwB,IAAxB;AACA,QAAIF,WAAW,CAACG,MAAhB,EAAwB;;AACxB,QAAIH,WAAW,KAAKP,OAAhB,IAA2BO,WAAW,CAACL,QAAZ,KAAyBS,QAAxD,EAAkE;AAChEV,MAAAA,mBAAmB,CAACO,KAApB;AACA,aAAOP,mBAAP;AACD;;AACDW,IAAAA,wBAAwB,CAACL,WAAD,EAAcT,IAAd,CAAxB;AACAG,IAAAA,mBAAmB,CAACY,IAApB,CAAyBN,WAAzB;AACD;AAEF;;AAED,SAASD,mBAAT,CAA6BH,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACW,IAAf,CAAoB,CAACC,OAAD,EAAUC,OAAV,KAAsBD,OAAO,CAACb,QAAR,GAAmBc,OAAO,CAACd,QAArE;AACD;;AAED,SAASe,qBAAT,CAA+BC,IAA/B,EAAqCpB,IAArC,EAA2C;AACzC,QAAMqB,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeH,IAArB;AACA,MAAIG,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACN,IAAV,CAAef,IAAI,CAACuB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAH4B,CAGQ;;AACjD,MAAIA,GAAG,GAAGtB,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,GAAiB,CAA3B,EAA8Bc,SAAS,CAACN,IAAV,CAAef,IAAI,CAACuB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EAJW,CAIwB;;AACjE,MAAIC,GAAG,GAAGvB,IAAI,CAACO,MAAL,GAAc,CAAxB,EAA2Bc,SAAS,CAACN,IAAV,CAAef,IAAI,CAACuB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EALc,CAKsB;;AAC/D,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACN,IAAV,CAAef,IAAI,CAACuB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EAN4B,CAMO;;AAChD,SAAOD,SAAS,CAACG,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACd,SAAvC,CAAP;AACD;;AAED,SAASG,wBAAT,CAAkCM,IAAlC,EAAwCpB,IAAxC,EAA8C;AAC5C,QAAMqB,SAAS,GAAGF,qBAAqB,CAACC,IAAD,EAAOpB,IAAP,CAAvC;;AACA,OAAK,MAAMyB,QAAX,IAAuBJ,SAAvB,EAAkC;AAChCI,IAAAA,QAAQ,CAACrB,QAAT,GAAoBgB,IAAI,CAAChB,QAAL,GAAgB,CAApC;AACD;AACF;;AAED,SAASE,WAAT,CAAqBN,IAArB,EAA2B;AACzB,QAAM0B,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMH,GAAX,IAAkBvB,IAAlB,EAAwB;AACtB,SAAK,MAAMoB,IAAX,IAAmBG,GAAnB,EAAwB;AACtBG,MAAAA,KAAK,CAACX,IAAN,CAAWK,IAAX;AACD;AACF;;AACD,SAAOM,KAAP;AACD","sourcesContent":["export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const visitedNodesInOrder = [];\n\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes)\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    if (nearestNode.isWall) continue;\n    if (nearestNode === endNode || nearestNode.distance === Infinity) {\n      visitedNodesInOrder.shift();\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(nearestNode, grid);\n    visitedNodesInOrder.push(nearestNode);\n  }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const neighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}