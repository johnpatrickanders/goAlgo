{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport './SortingViz.css';\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  const SPEED = 400;\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 300);\n\n  const resetArray = () => {\n    const array = [];\n\n    for (let i = 0; i < maxBarContainerWidth; i += 1) {\n      array.push(randomInt(5, maxBarHeight));\n    }\n\n    setArray(array);\n  };\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED);\n      }\n    }\n  };\n\n  const insertionSortAnimate = () => {\n    console.log(array);\n    const animations = insertionSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const barsArr = [...bars];\n      console.log('BARS:', bars);\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          console.log(animations[i]); // const [prevCurrIdx, prevOtherIdx] = animations[i - 1];\n\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n\n            const swap = (i, j, subArr) => {\n              console.log('SWAP');\n              const temp = subArr[i].style.height;\n              console.log(temp, subArr[j].style.height);\n              subArr[i].style.height = subArr[j].style.height;\n              subArr[j].style.height = temp;\n            };\n\n            const splice = (currIdx, startIdx, subArr) => {\n              // const temp = subArr[currIdx].style.height;\n              console('SPLICE:', currIdx);\n\n              while (currIdx > startIdx) {\n                swap(currIdx, currIdx - 1);\n                currIdx -= 1;\n              }\n            };\n\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                console.log('CURRENT===INIT');\n                const movedBar = bars[currIdx];\n                splice(currIdx, otherIdx, bars);\n                initIdx = -1;\n                otherIdx -= 1;\n                continue;\n              }\n\n              swap(otherIdx, otherIdx + 1, bars);\n            } // console.log(currIdx, otherIdx)\n            // const tempHeight = barTwo.height;\n            // barTwo.height = barOne.height;\n            // barOne.height = tempHeight;\n            // barOne.backgroundColor = 'purple';\n\n          }\n        }, i * SPEED);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, array.map((value, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-bar\",\n    key: i,\n    style: {\n      height: `${value}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"Get New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: bubbleSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: insertionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, \"Insertion Sort\"));\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min);\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n\n  return true;\n} // console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js"],"names":["React","useState","useEffect","bubbleSort","insertionSort","SortingViz","array","setArray","SPEED","maxBarHeight","Math","floor","window","screen","availHeight","maxBarContainerWidth","availWidth","resetArray","i","push","randomInt","bubbleSortAnimate","animations","length","bars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOne","style","barTwo","isColorChange","setTimeout","currentBarColor","backgroundColor","tempHeight","height","insertionSortAnimate","console","log","barsArr","currIdx","otherIdx","initIdx","swap","j","subArr","temp","splice","startIdx","movedBar","map","value","min","max","random","arraysEqual","array1","array2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport './SortingViz.css';\n\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n\n  const SPEED = 400;\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 300);\n\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < maxBarContainerWidth; i += 1) {\n      array.push(randomInt(5, maxBarHeight))\n    }\n    setArray(array)\n  }\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED)\n      }\n    }\n\n  }\n\n  const insertionSortAnimate = () => {\n    console.log(array)\n    const animations = insertionSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const barsArr = [...bars]\n      console.log('BARS:', bars)\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          console.log(animations[i])\n          // const [prevCurrIdx, prevOtherIdx] = animations[i - 1];\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n            const swap = (i, j, subArr) => {\n              console.log('SWAP');\n              const temp = subArr[i].style.height;\n              console.log(temp, subArr[j].style.height)\n              subArr[i].style.height = subArr[j].style.height;\n              subArr[j].style.height = temp;\n            }\n            const splice = (currIdx, startIdx, subArr) => {\n              // const temp = subArr[currIdx].style.height;\n              console('SPLICE:', currIdx)\n              while (currIdx > startIdx) {\n                swap(currIdx, currIdx - 1)\n                currIdx -= 1;\n              }\n            }\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                console.log('CURRENT===INIT');\n                const movedBar = bars[currIdx];\n                splice(currIdx, otherIdx, bars)\n                initIdx = -1;\n                otherIdx -= 1;\n                continue;\n              }\n\n              swap(otherIdx, otherIdx + 1, bars);\n            }\n            // console.log(currIdx, otherIdx)\n            // const tempHeight = barTwo.height;\n            // barTwo.height = barOne.height;\n            // barOne.height = tempHeight;\n\n            // barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED)\n      }\n    }\n  }\n\n\n  return (\n    <div className=\"array-container\">\n      {array.map((value, i) => (\n        <div\n          className=\"array-bar\"\n          key={i}\n          style={{ height: `${value}px` }}\n        >\n        </div>\n      ))}\n      <button onClick={resetArray}>Get New Array</button>\n      <button onClick={bubbleSortAnimate}>Bubble Sort</button>\n      <button onClick={insertionSortAnimate}>Insertion Sort</button>\n    </div>\n  )\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min)\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n  return true;\n}\n\n// console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))\n"]},"metadata":{},"sourceType":"module"}