{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  const SPEED = 40;\n  const NUM_BARS = 40;\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 150);\n  let stopTimeouts = [];\n  let stop1 = null;\n  let stop2 = null;\n  let stopLoop = false;\n\n  const resetArray = () => {\n    const array = [];\n\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight));\n    }\n\n    setArray(array);\n  };\n\n  const resetColors = () => {\n    const bars = document.getElementsByClassName('array-bar');\n\n    for (const bar in bars) {\n      bar.style.backgroundColor = 'pink';\n    }\n  };\n\n  const stop = () => {\n    stopTimeouts.forEach(stop => {\n      setTimeout(stop);\n      console.log(\"STOPPPPPP\");\n    });\n  };\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        stop1 = setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED);\n      } else {\n        stop2 = setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED);\n      }\n\n      stopTimeouts.push(stop1);\n      stopTimeouts.push(stop2);\n      console.log(stopTimeouts);\n    }\n  };\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    const bars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animations.length; i++) {\n      const barsArr = [...bars];\n      console.log('BARS:', bars);\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = 'orange';\n\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i];\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          console.log(animations[i]);\n\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n\n            const splice = (currIdx, startIdx, subArr) => {\n              console.log('SPLICE:', currIdx);\n\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height;\n                subArr[currIdx - 1].style.height = temp;\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor;\n                subArr[currIdx - 1].style.backgroundColor = tempColor;\n                currIdx -= 1;\n              }\n            };\n\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                console.log('CURRENT===INIT');\n                splice(currIdx, otherIdx, bars);\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          } // setTimeout(() => {\n          //   barTwo.backgroundColor = 'green';\n          // }, i * SPEED)\n\n        }, i * SPEED);\n      }\n    }\n  };\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1]; // const prevSortedBar = barOneIdx > 0 ? bars[barOneIdx - 1].style : barTwo;\n          // if (barTwo.height < prevSortedBar.height) {\n          //   barTwo.backgroundColor = 'yellow'\n          // }\n\n          if (barOneIdx !== prevBarOneIdx || barTwoIdx !== prevBarTwoIdx || barTwoIdx === array.length - 1 || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED);\n      }\n    }\n  };\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n\n          barPivot.backgroundColor = 'purple';\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor; // if (barOneIdx === barTwoIdx) {\n          //   barTwo.backgroundColor = 'orange';\n          // }\n\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n          || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'green';\n            barTwo.backgroundColor = 'green';\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            // special \"pivot\" swap\n            barPivot.backgroundColor = 'purple';\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = 'green';\n          } // barPivot.backgroundColor = 'green';\n\n\n          barTwo.backgroundColor = 'green';\n        }, i * SPEED);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }, array.map((value, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-bar\",\n    key: i,\n    style: {\n      height: `${value}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, \"Get New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: bubbleSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: insertionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: selectionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, \"Selection Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: quickSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, \"Quick Sort\")));\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min);\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n\n  return true;\n} // console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js"],"names":["React","useState","useEffect","bubbleSort","insertionSort","selectionSort","quickSort","SortingViz","array","setArray","SPEED","NUM_BARS","maxBarHeight","Math","floor","window","screen","availHeight","maxBarContainerWidth","availWidth","stopTimeouts","stop1","stop2","stopLoop","resetArray","i","push","randomInt","resetColors","bars","document","getElementsByClassName","bar","style","backgroundColor","stop","forEach","setTimeout","console","log","bubbleSortAnimate","animations","length","barOneIdx","barTwoIdx","barOne","barTwo","isColorChange","currentBarColor","tempHeight","height","insertionSortAnimate","barsArr","currIdx","otherIdx","initIdx","splice","startIdx","subArr","temp","tempColor","selectionSortAnimate","prevBarOneIdx","prevBarTwoIdx","quickSortAnimate","pivotIdx","barPivot","map","value","min","max","random","arraysEqual","array1","array2"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,kBAAP;AAEA,eAAe,SAASC,UAAT,GAAsB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMS,KAAK,GAAG,EAAd;AACA,QAAMC,QAAQ,GAAG,EAAjB;AAEA,QAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,MAAP,CAAcC,WAAd,GAA4B,EAAvC,CAArB;AACA,QAAMC,oBAAoB,GAAGL,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,MAAP,CAAcG,UAAd,GAA2B,GAAtC,CAA7B;AAEA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,QAAQ,GAAG,KAAf;;AAEA,QAAMC,UAAU,GAAG,MAAM;AACvB,UAAMhB,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,QAApB,EAA8Bc,CAAC,IAAI,CAAnC,EAAsC;AACpCjB,MAAAA,KAAK,CAACkB,IAAN,CAAWC,SAAS,CAAC,CAAD,EAAIf,YAAJ,CAApB;AACD;;AACDH,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GAND;;AAQA,QAAMoB,WAAW,GAAG,MAAM;AACxB,UAAMC,IAAI,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAb;;AACA,SAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtBG,MAAAA,GAAG,CAACC,KAAJ,CAAUC,eAAV,GAA4B,MAA5B;AACD;AACF,GALD;;AAOA,QAAMC,IAAI,GAAG,MAAM;AACjBf,IAAAA,YAAY,CAACgB,OAAb,CAAqBD,IAAI,IAAI;AAC3BE,MAAAA,UAAU,CAACF,IAAD,CAAV;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,KAHD;AAID,GALD;;AAOArC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMgB,iBAAiB,GAAG,MAAM;AAC9B,UAAMC,UAAU,GAAGtC,UAAU,CAACK,KAAD,CAA7B;;AACA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,UAAU,CAACC,MAAf,IAAyB,CAACnB,QAA1C,EAAoDE,CAAC,EAArD,EAAyD;AACvD,YAAMI,IAAI,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAb;AACA,YAAM,CAACY,SAAD,EAAYC,SAAZ,IAAyBH,UAAU,CAAChB,CAAD,CAAzC;AACA,YAAMoB,MAAM,GAAGhB,IAAI,CAACc,SAAD,CAAJ,CAAgBV,KAA/B;AACA,YAAMa,MAAM,GAAGjB,IAAI,CAACe,SAAD,CAAJ,CAAgBX,KAA/B;AACA,YAAMc,aAAa,GAAGtB,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIsB,aAAJ,EAAmB;AAAE;AACnB1B,QAAAA,KAAK,GAAGgB,UAAU,CAAC,MAAM;AACvB,gBAAMW,eAAe,GAAGvB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc,MAAd,GAAuB,OAA/C,CADuB,CACiC;;AACxDoB,UAAAA,MAAM,CAACX,eAAP,GAAyBc,eAAzB;AACAF,UAAAA,MAAM,CAACZ,eAAP,GAAyBc,eAAzB;AACD,SAJiB,EAIfvB,CAAC,GAAGf,KAJW,CAAlB;AAKD,OAND,MAMO;AACLY,QAAAA,KAAK,GAAGe,UAAU,CAAC,MAAM;AACvB,cAAIM,SAAS,GAAGC,SAAhB,EAA2B;AACzB,kBAAMK,UAAU,GAAGJ,MAAM,CAACK,MAA1B;AACAL,YAAAA,MAAM,CAACK,MAAP,GAAgBJ,MAAM,CAACI,MAAvB;AACAJ,YAAAA,MAAM,CAACI,MAAP,GAAgBD,UAAhB;AACAJ,YAAAA,MAAM,CAACX,eAAP,GAAyB,QAAzB;AACD;AACF,SAPiB,EAOfT,CAAC,GAAGf,KAPW,CAAlB;AAQD;;AACDU,MAAAA,YAAY,CAACM,IAAb,CAAkBL,KAAlB;AACAD,MAAAA,YAAY,CAACM,IAAb,CAAkBJ,KAAlB;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,YAAZ;AACD;AAEF,GA7BD;;AA+BA,QAAM+B,oBAAoB,GAAG,MAAM;AACjC,UAAMV,UAAU,GAAGrC,aAAa,CAACI,KAAD,CAAhC;AACA,UAAMqB,IAAI,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAb;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,UAAU,CAACC,MAA/B,EAAuCjB,CAAC,EAAxC,EAA4C;AAC1C,YAAM2B,OAAO,GAAG,CAAC,GAAGvB,IAAJ,CAAhB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,IAArB;AACA,UAAI,CAACwB,OAAD,EAAUC,QAAV,IAAsBb,UAAU,CAAChB,CAAD,CAApC;AACA,YAAMoB,MAAM,GAAGhB,IAAI,CAACwB,OAAD,CAAJ,CAAcpB,KAA7B;AACA,YAAMa,MAAM,GAAGjB,IAAI,CAACyB,QAAD,CAAJ,CAAerB,KAA9B;AACA,YAAMc,aAAa,GAAGtB,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIsB,aAAJ,EAAmB;AAAE;AACnBV,QAAAA,UAAU,CAAC,MAAM;AACf,gBAAMW,eAAe,GAAGvB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc,MAAd,GAAuB,OAA/C,CADe,CACyC;;AACxDoB,UAAAA,MAAM,CAACX,eAAP,GAAyB,QAAzB;;AACA,eAAK,IAAIT,CAAC,GAAG4B,OAAO,GAAG,CAAvB,EAA0B5B,CAAC,IAAI,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACrC,gBAAIO,GAAG,GAAGH,IAAI,CAACJ,CAAD,CAAd;AACAO,YAAAA,GAAG,CAACC,KAAJ,CAAUC,eAAV,GAA4Bc,eAA5B;AACD;AACF,SAPS,EAOPvB,CAAC,GAAGf,KAPG,CAAV;AAQD,OATD,MASO;AACL2B,QAAAA,UAAU,CAAC,MAAM;AACfC,UAAAA,OAAO,CAACC,GAAR,CAAYE,UAAU,CAAChB,CAAD,CAAtB;;AACA,cAAI4B,OAAO,KAAKC,QAAhB,EAA0B;AACxB,gBAAIC,OAAO,GAAGF,OAAd;;AACA,kBAAMG,MAAM,GAAG,CAACH,OAAD,EAAUI,QAAV,EAAoBC,MAApB,KAA+B;AAC5CpB,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBc,OAAvB;;AACA,qBAAOA,OAAO,GAAGI,QAAjB,EAA2B;AACzB,sBAAME,IAAI,GAAGD,MAAM,CAACL,OAAD,CAAN,CAAgBpB,KAAhB,CAAsBiB,MAAnC;AACAQ,gBAAAA,MAAM,CAACL,OAAD,CAAN,CAAgBpB,KAAhB,CAAsBiB,MAAtB,GAA+BQ,MAAM,CAACL,OAAO,GAAG,CAAX,CAAN,CAAoBpB,KAApB,CAA0BiB,MAAzD;AACAQ,gBAAAA,MAAM,CAACL,OAAO,GAAG,CAAX,CAAN,CAAoBpB,KAApB,CAA0BiB,MAA1B,GAAmCS,IAAnC;AACA,sBAAMC,SAAS,GAAGF,MAAM,CAACL,OAAD,CAAN,CAAgBpB,KAAhB,CAAsBC,eAAxC;AACAwB,gBAAAA,MAAM,CAACL,OAAD,CAAN,CAAgBpB,KAAhB,CAAsBC,eAAtB,GAAwCwB,MAAM,CAACL,OAAO,GAAG,CAAX,CAAN,CAAoBpB,KAApB,CAA0BC,eAAlE;AACAwB,gBAAAA,MAAM,CAACL,OAAO,GAAG,CAAX,CAAN,CAAoBpB,KAApB,CAA0BC,eAA1B,GAA4C0B,SAA5C;AACAP,gBAAAA,OAAO,IAAI,CAAX;AACD;AACF,aAXD;;AAYA,iBAAKC,QAAL,EAAeA,QAAQ,GAAGD,OAA1B,EAAmCC,QAAQ,EAA3C,EAA+C;AAC7C,kBAAID,OAAO,KAAKE,OAAhB,EAAyB;AACvBjB,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAiB,gBAAAA,MAAM,CAACH,OAAD,EAAUC,QAAV,EAAoBzB,IAApB,CAAN;AACA0B,gBAAAA,OAAO,GAAG,CAAC,CAAX;AACAD,gBAAAA,QAAQ,IAAI,CAAZ;AACD;AACF;AACF,WAxBc,CAyBf;AACA;AAEA;;AACD,SA7BS,EA6BP7B,CAAC,GAAGf,KA7BG,CAAV;AA8BD;AACF;AACF,GApDD;;AAsDA,QAAMmD,oBAAoB,GAAG,MAAM;AACjC,UAAMpB,UAAU,GAAGpC,aAAa,CAACG,KAAD,CAAhC;AACA8B,IAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;;AACA,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,UAAU,CAACC,MAA/B,EAAuCjB,CAAC,EAAxC,EAA4C;AAC1C,YAAMI,IAAI,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAb;AACA,YAAM,CAACY,SAAD,EAAYC,SAAZ,IAAyBH,UAAU,CAAChB,CAAD,CAAzC;AACA,YAAMoB,MAAM,GAAGhB,IAAI,CAACc,SAAD,CAAJ,CAAgBV,KAA/B;AACA,YAAMa,MAAM,GAAGjB,IAAI,CAACe,SAAD,CAAJ,CAAgBX,KAA/B;AACA,YAAMc,aAAa,GAAGtB,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIsB,aAAJ,EAAmB;AAAE;AACnBV,QAAAA,UAAU,CAAC,MAAM;AACf,gBAAMW,eAAe,GAAGvB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc,MAAd,GAAuB,OAA/C,CADe,CACyC;;AACxDoB,UAAAA,MAAM,CAACX,eAAP,GAAyBc,eAAzB;AACAF,UAAAA,MAAM,CAACZ,eAAP,GAAyBc,eAAzB;AACD,SAJS,EAIPvB,CAAC,GAAGf,KAJG,CAAV;AAKD,OAND,MAMO;AACL2B,QAAAA,UAAU,CAAC,MAAM;AACf,gBAAM,CAACyB,aAAD,EAAgBC,aAAhB,IAAiCtB,UAAU,CAAChB,CAAC,GAAG,CAAL,CAAjD,CADe,CAEf;AACA;AACA;AACA;;AACA,cAAIkB,SAAS,KAAKmB,aAAd,IACClB,SAAS,KAAKmB,aADf,IAECnB,SAAS,KAAKpC,KAAK,CAACkC,MAAN,GAAe,CAF9B,IAGCjB,CAAC,KAAKgB,UAAU,CAACC,MAAX,GAAoB,CAH/B,EAGkC;AAChC,kBAAMO,UAAU,GAAGJ,MAAM,CAACK,MAA1B;AACAL,YAAAA,MAAM,CAACK,MAAP,GAAgBJ,MAAM,CAACI,MAAvB;AACAJ,YAAAA,MAAM,CAACI,MAAP,GAAgBD,UAAhB;AACAJ,YAAAA,MAAM,CAACX,eAAP,GAAyB,QAAzB;AACD;AACF,SAfS,EAePT,CAAC,GAAGf,KAfG,CAAV;AAgBD;AACF;AAEF,GAnCD;;AAqCA,QAAMsD,gBAAgB,GAAG,MAAM;AAC7B,UAAMvB,UAAU,GAAGnC,SAAS,CAACE,KAAD,CAA5B;AACA8B,IAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;;AACA,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,UAAU,CAACC,MAA/B,EAAuCjB,CAAC,EAAxC,EAA4C;AAC1C,YAAMI,IAAI,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAb;AACA,YAAM,CAACY,SAAD,EAAYC,SAAZ,EAAuBqB,QAAvB,IAAmCxB,UAAU,CAAChB,CAAD,CAAnD;AACA,YAAMoB,MAAM,GAAGhB,IAAI,CAACc,SAAD,CAAJ,CAAgBV,KAA/B;AACA,YAAMa,MAAM,GAAGjB,IAAI,CAACe,SAAD,CAAJ,CAAgBX,KAA/B;AACA,YAAMiC,QAAQ,GAAGrC,IAAI,CAACoC,QAAD,CAAJ,CAAehC,KAAhC;AACA,YAAMc,aAAa,GAAGtB,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIsB,aAAJ,EAAmB;AAAE;AACnBV,QAAAA,UAAU,CAAC,MAAM;AACf,gBAAMW,eAAe,GAAGvB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc,MAAd,GAAuB,OAA/C,CADe,CACyC;;AACxDyC,UAAAA,QAAQ,CAAChC,eAAT,GAA2B,QAA3B;AACAW,UAAAA,MAAM,CAACX,eAAP,GAAyBc,eAAzB;AACAF,UAAAA,MAAM,CAACZ,eAAP,GAAyBc,eAAzB,CAJe,CAKf;AACA;AACA;;AACA,cAAIL,SAAS,KAAKsB,QAAd,IAA0BrB,SAAS,GAAG,CAA1C,EAA6C;AAC3CC,YAAAA,MAAM,CAACX,eAAP,GAAyB,QAAzB;AACAY,YAAAA,MAAM,CAACZ,eAAP,GAAyB,QAAzB;AACD;AACF,SAZS,EAYPT,CAAC,GAAGf,KAZG,CAAV;AAaD,OAdD,MAcO;AACL2B,QAAAA,UAAU,CAAC,MAAM;AACf,cAAIM,SAAS,KAAK,CAAd,IAAmBC,SAAS,KAAK,CAAjC,CAAmC;AAAnC,aACCnB,CAAC,KAAKgB,UAAU,CAACC,MAAX,GAAoB,CAD/B,EACkC;AAChC,kBAAMO,UAAU,GAAGJ,MAAM,CAACK,MAA1B;AACAL,YAAAA,MAAM,CAACK,MAAP,GAAgBJ,MAAM,CAACI,MAAvB;AACAJ,YAAAA,MAAM,CAACI,MAAP,GAAgBD,UAAhB;AACAJ,YAAAA,MAAM,CAACX,eAAP,GAAyB,OAAzB;AACAY,YAAAA,MAAM,CAACZ,eAAP,GAAyB,OAAzB;AACD,WAPD,MAOO,IAAIS,SAAS,KAAKsB,QAAd,IAA0BrB,SAAS,GAAG,CAA1C,EAA6C;AAAE;AACpDsB,YAAAA,QAAQ,CAAChC,eAAT,GAA2B,QAA3B;AACA,kBAAMe,UAAU,GAAGJ,MAAM,CAACK,MAA1B;AACAL,YAAAA,MAAM,CAACK,MAAP,GAAgBJ,MAAM,CAACI,MAAvB;AACAJ,YAAAA,MAAM,CAACI,MAAP,GAAgBD,UAAhB;AACAiB,YAAAA,QAAQ,CAAChC,eAAT,GAA2B,OAA3B;AAED,WAfc,CAgBf;;;AACAY,UAAAA,MAAM,CAACZ,eAAP,GAAyB,OAAzB;AACD,SAlBS,EAkBPT,CAAC,GAAGf,KAlBG,CAAV;AAmBD;AACF;AAEF,GA/CD;;AAiDA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAAC2D,GAAN,CAAU,CAACC,KAAD,EAAQ3C,CAAR,kBACT;AACE,IAAA,SAAS,EAAC,WADZ;AAEE,IAAA,GAAG,EAAEA,CAFP;AAGE,IAAA,KAAK,EAAE;AAAEyB,MAAAA,MAAM,EAAG,GAAEkB,KAAM;AAAnB,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,eASE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEjC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,IAAA,OAAO,EAAEX,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,eAGE;AAAQ,IAAA,OAAO,EAAEgB,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,eAIE;AAAQ,IAAA,OAAO,EAAEW,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,eAKE;AAAQ,IAAA,OAAO,EAAEU,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,eAME;AAAQ,IAAA,OAAO,EAAEG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,CATF,CADF;AAqBD;;AAED,SAASrC,SAAT,CAAmB0C,GAAnB,EAAwBC,GAAxB,EAA6B;AAC3B,SAAOzD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC0D,MAAL,MAAiBD,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAED,SAASG,WAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqC;AACnC,MAAID,MAAM,CAAC/B,MAAP,KAAkBgC,MAAM,CAAChC,MAA7B,EAAqC,OAAO,KAAP;;AACrC,OAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgD,MAAM,CAAC/B,MAA3B,EAAmCjB,CAAC,IAAI,CAAxC,EAA2C;AACzC,QAAIgD,MAAM,CAAChD,CAAD,CAAN,KAAciD,MAAM,CAACjD,CAAD,CAAxB,EAA6B;AAC3Ba,MAAAA,OAAO,CAACC,GAAR,CAAYkC,MAAM,CAAChD,CAAD,CAAlB,EAAuBiD,MAAM,CAACjD,CAAD,CAA7B;AACA,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,C,CAED;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\n\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n\n  const SPEED = 40;\n  const NUM_BARS = 40;\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 150);\n\n  let stopTimeouts = [];\n  let stop1 = null;\n  let stop2 = null;\n  let stopLoop = false;\n\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight))\n    }\n    setArray(array)\n  }\n\n  const resetColors = () => {\n    const bars = document.getElementsByClassName('array-bar');\n    for (const bar in bars) {\n      bar.style.backgroundColor = 'pink'\n    }\n  }\n\n  const stop = () => {\n    stopTimeouts.forEach(stop => {\n      setTimeout(stop)\n      console.log(\"STOPPPPPP\")\n    });\n  }\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        stop1 = setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED)\n      } else {\n        stop2 = setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED)\n      }\n      stopTimeouts.push(stop1);\n      stopTimeouts.push(stop2);\n      console.log(stopTimeouts)\n    }\n\n  }\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    const bars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      const barsArr = [...bars]\n      console.log('BARS:', bars)\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = 'orange';\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i]\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          console.log(animations[i])\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n            const splice = (currIdx, startIdx, subArr) => {\n              console.log('SPLICE:', currIdx)\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height\n                subArr[currIdx - 1].style.height = temp\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor\n                subArr[currIdx - 1].style.backgroundColor = tempColor\n                currIdx -= 1;\n              }\n            }\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                console.log('CURRENT===INIT');\n                splice(currIdx, otherIdx, bars)\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          }\n          // setTimeout(() => {\n          //   barTwo.backgroundColor = 'green';\n\n          // }, i * SPEED)\n        }, i * SPEED)\n      }\n    }\n  }\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1];\n          // const prevSortedBar = barOneIdx > 0 ? bars[barOneIdx - 1].style : barTwo;\n          // if (barTwo.height < prevSortedBar.height) {\n          //   barTwo.backgroundColor = 'yellow'\n          // }\n          if (barOneIdx !== prevBarOneIdx\n            || barTwoIdx !== prevBarTwoIdx\n            || barTwoIdx === array.length - 1\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'purple';\n          }\n        }, i * SPEED)\n      }\n    }\n\n  }\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? 'blue' : 'green'; // if the index falls on the \"swap\" value...\n          barPivot.backgroundColor = 'purple';\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          // if (barOneIdx === barTwoIdx) {\n          //   barTwo.backgroundColor = 'orange';\n          // }\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * SPEED)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = 'green';\n            barTwo.backgroundColor = 'green';\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) { // special \"pivot\" swap\n            barPivot.backgroundColor = 'purple';\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = 'green';\n\n          }\n          // barPivot.backgroundColor = 'green';\n          barTwo.backgroundColor = 'green';\n        }, i * SPEED)\n      }\n    }\n\n  }\n\n  return (\n    <div className=\"array-container\">\n      {array.map((value, i) => (\n        <div\n          className=\"array-bar\"\n          key={i}\n          style={{ height: `${value}px` }}\n        >\n        </div>\n      ))}\n      <div className=\"buttons\">\n        <button onClick={stop}>Stop</button>\n        <button onClick={resetArray}>Get New Array</button>\n        <button onClick={bubbleSortAnimate}>Bubble Sort</button>\n        <button onClick={insertionSortAnimate}>Insertion Sort</button>\n        <button onClick={selectionSortAnimate}>Selection Sort</button>\n        <button onClick={quickSortAnimate}>Quick Sort</button>\n      </div>\n    </div>\n  )\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min)\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n  return true;\n}\n\n// console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))\n"]},"metadata":{},"sourceType":"module"}