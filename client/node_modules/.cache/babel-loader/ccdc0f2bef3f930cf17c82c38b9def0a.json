{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/PathfindingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\nimport './PathfindingViz.css';\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n  const START_NODE_ROW = 10;\n  const START_NODE_COL = 15;\n  const END_NODE_ROW = 10;\n  const END_NODE_COL = 35;\n  useEffect(() => {\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === END_NODE_ROW && col === END_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    setGrid([...grid]);\n    console.log('useEffect once?');\n  }, []);\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n\n    if (row === START_NODE_ROW && col === START_NODE_COL || row === END_NODE_ROW && col === END_NODE_COL) {\n      return;\n    }\n\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  };\n\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed || row === START_NODE_ROW && col === START_NODE_COL || row === END_NODE_ROW && col === END_NODE_COL || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  };\n\n  const handleMouseUp = () => {\n    mousePressed = false;\n  };\n\n  const depthFirstSearchAnimate = pathOfNodes => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval);\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval);\n    }\n  };\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes);\n  };\n\n  const breadthFirstSearchAnimate = pathOfNodes => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval);\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval);\n    }\n  };\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    console.log(pathOfNodes);\n    breadthFirstSearchAnimate(pathOfNodes);\n  };\n\n  const dijkstraAnimate = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getShortestPath(endNode);\n    console.log(pathOfNodes);\n    breadthFirstSearchAnimate(pathOfNodes);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dijkstraAnimate(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, \"Dijkstra\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => depthFirstSearchVisualize(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, \"Depth First Search\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => breadthFirstSearchVisualize(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Breadth First Search\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, grid.map((row, rowIdx) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIdx,\n      className: \"grid-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, row.map((node, nodeIdx) => {\n      const {\n        isStart,\n        isFinish,\n        isVisited,\n        col,\n        row\n      } = node;\n      return /*#__PURE__*/React.createElement(Node, {\n        isStart: isStart,\n        isFinish: isFinish,\n        key: col + '-' + row,\n        location: row + '-' + col,\n        test: 'hello there',\n        isVisited: isVisited,\n        row: row,\n        col: col,\n        onMouseDown: handleMouseDown,\n        onMouseEnter: handleMouseEnter,\n        onMouseUp: handleMouseUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 19\n        }\n      });\n    }));\n  })));\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/PathfindingViz.js"],"names":["React","useState","useEffect","depthFirstSearch","breadthFirstSearch","dijkstra","getNodesInShortestPath","Node","PathfindingViz","grid","setGrid","SPEED","SET_SPEED","mousePressed","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","row","currentRow","col","currentNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","push","console","log","handleMouseDown","targetNode","targetDomNode","document","getElementById","classList","add","remove","handleMouseEnter","handleMouseUp","depthFirstSearchAnimate","pathOfNodes","i","length","interval","setTimeout","currentPathNode","currentDomNode","depthFirstSearchVisualize","startNode","endNode","breadthFirstSearchAnimate","breadthFirstSearchVisualize","dijkstraAnimate","visitiedNodesInOrder","shortestPath","getShortestPath","map","rowIdx","node","nodeIdx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport breadthFirstSearch from './breadthFirstSearch';\nimport dijkstra, { getNodesInShortestPath } from './dijkstra';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(20);\n  let mousePressed = false;\n\n  const START_NODE_ROW = 10;\n  const START_NODE_COL = 15;\n  const END_NODE_ROW = 10;\n  const END_NODE_COL = 35;\n\n  useEffect(() => {\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === END_NODE_ROW && col === END_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n      grid.push(currentRow);\n    }\n    setGrid([...grid]);\n    console.log('useEffect once?')\n  }, [])\n\n  const handleMouseDown = (row, col) => {\n    const targetNode = grid[row][col];\n    if (row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL) {\n      return;\n    }\n    mousePressed = true;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  }\n  const handleMouseEnter = (row, col) => {\n    const targetNode = grid[row][col];\n    if (!mousePressed\n      || row === START_NODE_ROW && col === START_NODE_COL\n      || row === END_NODE_ROW && col === END_NODE_COL\n      || targetNode.isWall) return;\n    targetNode.isWall = !targetNode.isWall;\n    const targetDomNode = document.getElementById(`loc-${row}-${col}`);\n    targetNode.isWall ? targetDomNode.classList.add('node-is-wall') : targetDomNode.classList.remove('node-is-wall');\n    console.log(row, col, grid);\n  }\n  const handleMouseUp = () => {\n    mousePressed = false;\n  }\n  const depthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`);\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const depthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = depthFirstSearch(grid, startNode, endNode);\n    depthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const breadthFirstSearchAnimate = (pathOfNodes) => {\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      const interval = i * SPEED;\n      console.log(\"interval: \", interval)\n      setTimeout(() => {\n        const currentPathNode = pathOfNodes[i];\n        const currentDomNode = document.getElementById(`loc-${currentPathNode.row}-${currentPathNode.col}`)\n        currentDomNode.classList.add('node-visited');\n      }, interval)\n    }\n  }\n\n  const breadthFirstSearchVisualize = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const pathOfNodes = breadthFirstSearch(grid, startNode, endNode);\n    console.log(pathOfNodes)\n    breadthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const dijkstraAnimate = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitiedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPath = getShortestPath(endNode)\n    console.log(pathOfNodes);\n    breadthFirstSearchAnimate(pathOfNodes)\n  }\n  return (\n    <>\n      <button onClick={() => dijkstraAnimate()}>Dijkstra</button>\n      <button onClick={() => depthFirstSearchVisualize()}>Depth First Search</button>\n      <button onClick={() => breadthFirstSearchVisualize()}>Breadth First Search</button>\n      <div className='grid'>\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} className='grid-row'>\n              {row.map((node, nodeIdx) => {\n                const { isStart, isFinish, isVisited, col, row } = node;\n                return (\n                  <Node\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    key={col + '-' + row}\n                    location={row + '-' + col}\n                    test={'hello there'}\n                    isVisited={isVisited}\n                    row={row}\n                    col={col}\n                    onMouseDown={handleMouseDown}\n                    onMouseEnter={handleMouseEnter}\n                    onMouseUp={handleMouseUp}\n                  ></Node>\n                );\n              })}\n            </div>\n          )\n        })}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}