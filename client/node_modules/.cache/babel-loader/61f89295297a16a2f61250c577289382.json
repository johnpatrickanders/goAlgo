{"ast":null,"code":"const testGrid = [[7, 9, 10, 3, 5], [1, 5, 3, 6, 8], [5, 4, 6, 2, 9]];\nexport default function depthFirstSearch(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length >= 0) {\n    console.log(depthFirstSearchHelp(unvisitedNodes, startNode, endNode, grid)); // sortNodesByDistance(unvisitedNodes)\n    // const nearestNode = unvisitedNodes.shift();\n    // nearestNode.isVisited = true;\n    // if (nearestNode === endNode) return visitedNodesInOrder;\n    // updateNeighbors(nearestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction depthFirstSearchHelp(array, currentNode, endNode, grid) {\n  if (currentNode === endNode) return;\n  const neighbors = getNeighbors(currentNode, grid);\n  array.push(currentNode);\n  neighbors.forEach(child => {\n    depthFirstSearchHelp(array, child, endNode);\n  });\n  return array;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    console.log(row);\n\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n\n  console.log(nodes);\n  return nodes;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/depthFirstSearch.js"],"names":["testGrid","depthFirstSearch","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","console","log","depthFirstSearchHelp","sortNodesByDistance","sort","nodeOne","nodeTwo","array","currentNode","neighbors","getNeighbors","push","forEach","child","node","col","row","updateNeighbors","neighbor","nodes"],"mappings":"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","sourcesContent":["const testGrid = [\n  [7, 9, 10, 3, 5],\n  [1, 5, 3, 6, 8],\n  [5, 4, 6, 2, 9]\n]\n\nexport default function depthFirstSearch(grid, startNode, endNode) {\n\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length >= 0) {\n\n    console.log(depthFirstSearchHelp(unvisitedNodes, startNode, endNode, grid));\n\n    // sortNodesByDistance(unvisitedNodes)\n    // const nearestNode = unvisitedNodes.shift();\n    // nearestNode.isVisited = true;\n    // if (nearestNode === endNode) return visitedNodesInOrder;\n    // updateNeighbors(nearestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction depthFirstSearchHelp(array, currentNode, endNode, grid) {\n  if (currentNode === endNode) return;\n  const neighbors = getNeighbors(currentNode, grid);\n  array.push(currentNode);\n  neighbors.forEach(child => {\n    depthFirstSearchHelp(array, child, endNode)\n  })\n  return array;\n}\n\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0) neighbors.push(grid[row][col - 1]) // \"left\"\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]) // \"right\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    console.log(row)\n    for (const node in row) {\n      nodes.push(node);\n    }\n  }\n  console.log(nodes)\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}