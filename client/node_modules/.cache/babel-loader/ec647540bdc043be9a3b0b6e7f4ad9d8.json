{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nimport Slider from './SpeedControls';\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  let [NUM_BARS, SET_NUM_BARS] = useState(20);\n\n  const handleBarChange = e => {\n    NUM_BARS = e.target.value;\n    SET_NUM_BARS(NUM_BARS);\n    resetArray();\n    resetColors();\n  };\n\n  let [SPEED, setSpeed] = useState(150);\n\n  const handleChange = e => {\n    SPEED = e.target.value;\n    setSpeed(SPEED);\n  };\n\n  let convertedSpeed = 301 - SPEED;\n  let comparisonColor = 'green';\n  let swapColor = 'white';\n  let otherColor = 'orange';\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 150);\n  let stopLoop = false;\n  let numStops = 0;\n\n  const resetArray = () => {\n    const array = [];\n\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight));\n    }\n\n    setArray(array);\n  };\n\n  const resetColors = () => {\n    const bars = document.getElementsByClassName('array-bar');\n\n    for (let bar of bars) {\n      bar.style.backgroundColor = \"orangered\";\n    }\n  };\n\n  const stop = () => {\n    if (!stopLoop) {\n      stopLoop = !stopLoop;\n      stopLoop = !stopLoop;\n    }\n\n    while (numStops >= 0) {\n      clearTimeout(numStops);\n      console.log(\"STOPPPPPP\");\n      numStops--;\n    }\n\n    numStops = 0;\n  };\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n          }\n        }, i * convertedSpeed);\n      }\n\n      numStops += 1;\n    }\n  };\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    console.log(array.length);\n    console.log(animations);\n    const bars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animations.length; i++) {\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = otherColor;\n\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i];\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          let [prevCurrIdx, prevOtherIdx] = animations[i - 3] ? animations[i - 3] : [0, 0];\n\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n\n            const splice = (currIdx, startIdx, subArr) => {\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height;\n                subArr[currIdx - 1].style.height = temp;\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor;\n                subArr[currIdx - 1].style.backgroundColor = tempColor;\n                currIdx -= 1;\n              }\n            };\n\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                splice(currIdx, otherIdx, bars);\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          }\n        }, i * convertedSpeed);\n      }\n    }\n  };\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1];\n\n          if (barOneIdx !== prevBarOneIdx || barTwoIdx !== prevBarTwoIdx || barTwoIdx === array.length - 1 || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n          }\n        }, i * convertedSpeed);\n      }\n    }\n  };\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? otherColor : comparisonColor; // if the index falls on the \"swap\" value...\n\n          barPivot.backgroundColor = swapColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * convertedSpeed);\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n          || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = comparisonColor;\n            barTwo.backgroundColor = comparisonColor;\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            // special \"pivot\" swap\n            barPivot.backgroundColor = swapColor;\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = comparisonColor;\n          } // barPivot.backgroundColor = comparisonColor;\n\n\n          barTwo.backgroundColor = comparisonColor;\n        }, i * convertedSpeed);\n      }\n    }\n  };\n\n  const animateAlgo = () => {\n    const algo = document.getElementById('sorting-options').options[document.getElementById('sorting-options').selectedIndex];\n    console.log(algo);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"algo-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, array.map((value, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-bar\",\n    key: i,\n    style: {\n      height: `${value}px`,\n      backgroundColor: 'orangered',\n      width: `${90 / NUM_BARS}vh`,\n      display: 'inline-block',\n      margin: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slidercontainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange,\n    type: \"range\",\n    min: \"1\",\n    max: \"300\",\n    value: SPEED,\n    className: \"slider\",\n    id: \"myRange\",\n    name: \"Speed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"sliderlabel\",\n    for: \"myRange\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, \"Speed\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slidercontainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleBarChange,\n    type: \"range\",\n    min: \"8\",\n    max: \"200\",\n    value: NUM_BARS,\n    className: \"slider\",\n    id: \"myBarRange\",\n    name: \"Length\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"sliderlabel\",\n    for: \"myBarRange\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }\n  }, \"Length\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetColors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, \"Reset Colors\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }, \"Get New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: bubbleSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: insertionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: selectionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }, \"Selection Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: quickSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }\n  }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"sorting-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }, \"Choose an algo\"), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"sorting-options\",\n    id: \"sorting-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: bubbleSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }\n  }, \"Bubble\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: insertionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, \"Insertion\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: selectionSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }, \"Selection\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: quickSortAnimate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }, \"Quick\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: animateAlgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }\n  }, \"Sort!\")));\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min);\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n\n  return true;\n} // console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/SortingViz/SortingViz.js"],"names":["React","useState","useEffect","bubbleSort","insertionSort","selectionSort","quickSort","Slider","SortingViz","array","setArray","NUM_BARS","SET_NUM_BARS","handleBarChange","e","target","value","resetArray","resetColors","SPEED","setSpeed","handleChange","convertedSpeed","comparisonColor","swapColor","otherColor","maxBarHeight","Math","floor","window","screen","availHeight","maxBarContainerWidth","availWidth","stopLoop","numStops","i","push","randomInt","bars","document","getElementsByClassName","bar","style","backgroundColor","stop","clearTimeout","console","log","bubbleSortAnimate","animations","length","barOneIdx","barTwoIdx","barOne","barTwo","isColorChange","setTimeout","currentBarColor","tempHeight","height","insertionSortAnimate","currIdx","otherIdx","prevCurrIdx","prevOtherIdx","initIdx","splice","startIdx","subArr","temp","tempColor","selectionSortAnimate","prevBarOneIdx","prevBarTwoIdx","quickSortAnimate","pivotIdx","barPivot","animateAlgo","algo","getElementById","options","selectedIndex","map","width","display","margin","min","max","random","arraysEqual","array1","array2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport bubbleSort from './bubbleSort';\nimport insertionSort from './insertionSort';\nimport selectionSort from './selectionSort';\nimport quickSort from './quickSort';\nimport './SortingViz.css';\nimport Slider from './SpeedControls';\n\nexport default function SortingViz() {\n  const [array, setArray] = useState([]);\n  let [NUM_BARS, SET_NUM_BARS] = useState(20);\n  const handleBarChange = (e) => {\n    NUM_BARS = e.target.value;\n    SET_NUM_BARS(NUM_BARS);\n    resetArray()\n    resetColors()\n  }\n\n  let [SPEED, setSpeed] = useState(150)\n  const handleChange = (e) => {\n    SPEED = e.target.value;\n    setSpeed(SPEED)\n  }\n  let convertedSpeed = 301 - SPEED;\n\n  let comparisonColor = 'green';\n  let swapColor = 'white';\n  let otherColor = 'orange';\n\n  const maxBarHeight = Math.floor(window.screen.availHeight / 10);\n  const maxBarContainerWidth = Math.floor(window.screen.availWidth / 150);\n\n  let stopLoop = false;\n  let numStops = 0;\n\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < NUM_BARS; i += 1) {\n      array.push(randomInt(5, maxBarHeight))\n    }\n    setArray(array)\n  }\n\n  const resetColors = () => {\n    const bars = document.getElementsByClassName('array-bar');\n    for (let bar of bars) {\n      bar.style.backgroundColor = \"orangered\"\n    }\n  }\n\n  const stop = () => {\n    if (!stopLoop) {\n      stopLoop = !stopLoop;\n      stopLoop = !stopLoop;\n    }\n    while (numStops >= 0) {\n      clearTimeout(numStops);\n      console.log(\"STOPPPPPP\");\n      numStops--;\n    }\n    numStops = 0;\n  }\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  const bubbleSortAnimate = () => {\n    const animations = bubbleSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length && !stopLoop; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx > barTwoIdx) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n          }\n        }, i * convertedSpeed);\n      }\n      numStops += 1;\n    }\n\n  }\n\n  const insertionSortAnimate = () => {\n    const animations = insertionSort(array);\n    console.log(array.length)\n    console.log(animations)\n    const bars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      let [currIdx, otherIdx] = animations[i];\n      const barOne = bars[currIdx].style;\n      const barTwo = bars[otherIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = otherColor;\n          for (let i = currIdx - 1; i >= 0; i--) {\n            let bar = bars[i]\n            bar.style.backgroundColor = currentBarColor;\n          }\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          let [prevCurrIdx, prevOtherIdx] = animations[i - 3] ? animations[i - 3] : [0, 0]\n          if (currIdx !== otherIdx) {\n            let initIdx = currIdx;\n            const splice = (currIdx, startIdx, subArr) => {\n              while (currIdx > startIdx) {\n                const temp = subArr[currIdx].style.height;\n                subArr[currIdx].style.height = subArr[currIdx - 1].style.height\n                subArr[currIdx - 1].style.height = temp\n                const tempColor = subArr[currIdx].style.backgroundColor;\n                subArr[currIdx].style.backgroundColor = subArr[currIdx - 1].style.backgroundColor\n                subArr[currIdx - 1].style.backgroundColor = tempColor\n                currIdx -= 1;\n              }\n            }\n            for (otherIdx; otherIdx < currIdx; otherIdx++) {\n              if (currIdx === initIdx) {\n                splice(currIdx, otherIdx, bars)\n                initIdx = -1;\n                otherIdx -= 1;\n              }\n            }\n          }\n        }, i * convertedSpeed)\n      }\n    }\n  }\n\n  const selectionSortAnimate = () => {\n    const animations = selectionSort(array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? swapColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          const [prevBarOneIdx, prevBarTwoIdx] = animations[i - 1];\n          if (barOneIdx !== prevBarOneIdx\n            || barTwoIdx !== prevBarTwoIdx\n            || barTwoIdx === array.length - 1\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = otherColor;\n          }\n        }, i * convertedSpeed)\n      }\n    }\n\n  }\n\n  const quickSortAnimate = () => {\n    const animations = quickSort(array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, pivotIdx] = animations[i];\n      const barOne = bars[barOneIdx].style;\n      const barTwo = bars[barTwoIdx].style;\n      const barPivot = bars[pivotIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) { // if the index falls just BEFORE the swap (i.e. on 2nd comparison)\n        setTimeout(() => {\n          const currentBarColor = i % 3 === 0 ? otherColor : comparisonColor; // if the index falls on the \"swap\" value...\n          barPivot.backgroundColor = swapColor;\n          barOne.backgroundColor = currentBarColor;\n          barTwo.backgroundColor = currentBarColor;\n          if (barOneIdx === pivotIdx && barTwoIdx > 0) {\n            barOne.backgroundColor = 'yellow';\n            barTwo.backgroundColor = 'yellow';\n          }\n        }, i * convertedSpeed)\n      } else {\n        setTimeout(() => {\n          if (barOneIdx !== 0 && barTwoIdx !== 0 // normal \"while\" swap\n            || i === animations.length - 1) {\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barOne.backgroundColor = comparisonColor;\n            barTwo.backgroundColor = comparisonColor;\n          } else if (barOneIdx === pivotIdx && barTwoIdx > 0) { // special \"pivot\" swap\n            barPivot.backgroundColor = swapColor;\n            const tempHeight = barOne.height;\n            barOne.height = barTwo.height;\n            barTwo.height = tempHeight;\n            barPivot.backgroundColor = comparisonColor;\n\n          }\n          // barPivot.backgroundColor = comparisonColor;\n          barTwo.backgroundColor = comparisonColor;\n        }, i * convertedSpeed)\n      }\n    }\n  }\n\n  const animateAlgo = () => {\n    const algo = document.getElementById('sorting-options').options[document.getElementById('sorting-options').selectedIndex];\n    console.log(algo)\n  }\n\n  return (\n    <div className=\"algo-container\">\n      <div className=\"array-container\">\n        {array.map((value, i) => (\n          <div\n            className=\"array-bar\"\n            key={i}\n            style={{\n              height: `${value}px`,\n              backgroundColor: 'orangered',\n              width: `${90 / NUM_BARS}vh`,\n              display: 'inline-block',\n              margin: 1\n            }}\n          >\n          </div>\n        ))}\n      </div>\n      <div className=\"slidercontainer\">\n        <input onChange={handleChange}\n          type=\"range\"\n          min=\"1\"\n          max=\"300\"\n          value={SPEED}\n          className=\"slider\"\n          id=\"myRange\"\n          name='Speed'\n        />\n        <label className='sliderlabel' for='myRange'>Speed</label>\n      </div>\n      <div className=\"slidercontainer\">\n        <input onChange={handleBarChange}\n          type=\"range\"\n          min=\"8\"\n          max=\"200\"\n          value={NUM_BARS}\n          className=\"slider\"\n          id=\"myBarRange\"\n          name='Length'\n        />\n        <label className='sliderlabel' for='myBarRange'>Length</label>\n      </div>\n      <div className=\"buttons\">\n        <button onClick={stop}>Stop</button>\n        <button onClick={resetColors}>Reset Colors</button>\n        <button onClick={resetArray}>Get New Array</button>\n        <button onClick={bubbleSortAnimate}>Bubble Sort</button>\n        <button onClick={insertionSortAnimate}>Insertion Sort</button>\n        <button onClick={selectionSortAnimate}>Selection Sort</button>\n        <button onClick={quickSortAnimate}>Quick Sort</button>\n        <label for=\"sorting-options\">Choose an algo</label>\n        <select name=\"sorting-options\" id=\"sorting-options\">\n          <option value={bubbleSortAnimate}>Bubble</option>\n          <option value={insertionSortAnimate}>Insertion</option>\n          <option value={selectionSortAnimate}>Selection</option>\n          <option value={quickSortAnimate}>Quick</option>\n        </select>\n        <button onClick={animateAlgo}>Sort!</button>\n      </div>\n    </div>\n  )\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) * min)\n}\n\nfunction arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n  for (let i = 0; i < array1.length; i += 1) {\n    if (array1[i] !== array2[i]) {\n      console.log(array1[i], array2[i]);\n      return false;\n    }\n  }\n  return true;\n}\n\n// console.log(\"Should be TRUE:\", arraysEqual([1, 5, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 5, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 50, 4]))\n// console.log(\"Should be FALSE:\", arraysEqual([1, 0, 4], [1, 0, -1]))\n"]},"metadata":{},"sourceType":"module"}