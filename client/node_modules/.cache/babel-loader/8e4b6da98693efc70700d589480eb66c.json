{"ast":null,"code":"export default function depthFirstSearch(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); // console.log(unvisitedNodes);\n\n  let i = 10;\n\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes);\n    console.log(visitedNodesInOrder);\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    if (nearestNode === endNode) return visitedNodesInOrder;\n    updateNeighbors(nearestNode, grid);\n    visitedNodesInOrder.push(nearestNode);\n    i--;\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]); // \"right\"\n\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]); // \"left\"\n\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/dijkstra.js"],"names":["depthFirstSearch","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","i","length","sortNodesByDistance","console","log","nearestNode","shift","isVisited","updateNeighbors","push","sort","nodeOne","nodeTwo","getNeighbors","node","neighbors","col","row","neighbor","nodes"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoD;AAEjE,QAAMC,mBAAmB,GAAG,EAA5B;AAEAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC,CALiE,CAMjE;;AACA,MAAIO,CAAC,GAAG,EAAR;;AACA,SAAOF,cAAc,CAACG,MAAf,GAAwB,CAA/B,EAAkC;AAChCC,IAAAA,mBAAmB,CAACJ,cAAD,CAAnB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYR,mBAAZ;AACA,UAAMS,WAAW,GAAGP,cAAc,CAACQ,KAAf,EAApB;AACAD,IAAAA,WAAW,CAACE,SAAZ,GAAwB,IAAxB;AACA,QAAIF,WAAW,KAAKV,OAApB,EAA6B,OAAOC,mBAAP;AAC7BY,IAAAA,eAAe,CAACH,WAAD,EAAcZ,IAAd,CAAf;AACAG,IAAAA,mBAAmB,CAACa,IAApB,CAAyBJ,WAAzB;AACAL,IAAAA,CAAC;AACF;AAEF;;AAED,SAASE,mBAAT,CAA6BJ,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACY,IAAf,CAAoB,CAACC,OAAD,EAAUC,OAAV,KAAsBD,OAAO,CAACd,QAAR,GAAmBe,OAAO,CAACf,QAArE;AACD;;AAED,SAASgB,YAAT,CAAsBC,IAAtB,EAA4BrB,IAA5B,EAAkC;AAChC,QAAMsB,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeH,IAArB;AACA,MAAIG,GAAG,GAAG,CAAN,IAAW,CAACxB,IAAI,CAACwB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBT,SAAnC,EAA8CQ,SAAS,CAACN,IAAV,CAAehB,IAAI,CAACwB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAHd,CAGkD;;AAClF,MAAIA,GAAG,GAAGvB,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAR,GAAiB,CAAvB,IAA4B,CAACR,IAAI,CAACwB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBT,SAApD,EAA+DQ,SAAS,CAACN,IAAV,CAAehB,IAAI,CAACwB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EAJ/B,CAIkE;;AAClG,MAAIC,GAAG,GAAGxB,IAAI,CAACQ,MAAL,GAAc,CAApB,IAAyB,CAACR,IAAI,CAACwB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,EAAmBT,SAAjD,EAA4DQ,SAAS,CAACN,IAAV,CAAehB,IAAI,CAACwB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAL5B,CAKgE;;AAChG,MAAIA,GAAG,GAAG,CAAN,IAAW,CAACvB,IAAI,CAACwB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,EAAmBT,SAAnC,EAA8CQ,SAAS,CAACN,IAAV,CAAehB,IAAI,CAACwB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf,EANd,CAMiD;;AACjF,SAAOD,SAAP;AACD;;AAED,SAASP,eAAT,CAAyBM,IAAzB,EAA+BrB,IAA/B,EAAqC;AACnC,QAAMsB,SAAS,GAAGF,YAAY,CAACC,IAAD,EAAOrB,IAAP,CAA9B;;AACA,OAAK,MAAMyB,QAAX,IAAuBH,SAAvB,EAAkC;AAChCG,IAAAA,QAAQ,CAACrB,QAAT,GAAoBiB,IAAI,CAACjB,QAAL,GAAgB,CAApC;AACD;AACF;;AAED,SAASE,WAAT,CAAqBN,IAArB,EAA2B;AACzB,QAAM0B,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMF,GAAX,IAAkBxB,IAAlB,EAAwB;AACtB,SAAK,MAAMqB,IAAX,IAAmBG,GAAnB,EAAwB;AACtBE,MAAAA,KAAK,CAACV,IAAN,CAAWK,IAAX;AACD;AACF;;AACD,SAAOK,KAAP;AACD","sourcesContent":["export default function depthFirstSearch(grid, startNode, endNode) {\n\n  const visitedNodesInOrder = [];\n\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  // console.log(unvisitedNodes);\n  let i = 10;\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes)\n    console.log(visitedNodesInOrder);\n    const nearestNode = unvisitedNodes.shift();\n    nearestNode.isVisited = true;\n    if (nearestNode === endNode) return visitedNodesInOrder;\n    updateNeighbors(nearestNode, grid);\n    visitedNodesInOrder.push(nearestNode);\n    i--;\n  }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeOne, nodeTwo) => nodeOne.distance - nodeTwo.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && !grid[row - 1][col].isVisited) neighbors.push(grid[row - 1][col]); // \"top\"\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) neighbors.push(grid[row][col + 1]) // \"right\"\n  if (row < grid.length - 1 && !grid[row + 1][col].isVisited) neighbors.push(grid[row + 1][col]); // \"bottom\"\n  if (col > 0 && !grid[row][col - 1].isVisited) neighbors.push(grid[row][col - 1]) // \"left\"\n  return neighbors;\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}