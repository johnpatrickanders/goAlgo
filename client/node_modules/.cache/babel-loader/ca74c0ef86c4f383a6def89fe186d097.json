{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/PathfindingViz.js\";\nimport React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport Node from './Node/Node';\nimport './PathfindingViz.css';\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(1000);\n  const START_NODE_ROW = 10;\n  const START_NODE_COL = 15;\n  const END_NODE_ROW = 10;\n  const END_NODE_COL = 35;\n  useEffect(() => {\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === END_NODE_ROW && col === END_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    setGrid([...grid]);\n  }, []);\n\n  const depthFirstSearchAnimate = pathOfNodes => {\n    // console.log(grid);\n    // console.log(pathOfNodes)\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      setTimeout(() => {\n        const newGrid = [...grid];\n        const node = pathOfNodes[i];\n        console.log(node.row, node.col);\n        const newNode = { ...node,\n          isVisited: true\n        }; // newNode.isVisited = true;\n\n        newGrid[node.row][node.col] = newNode;\n        setGrid(newGrid);\n      }, i * SPEED);\n    }\n  };\n\n  const depthFirstSearchVisualize = () => {\n    setGrid(grid); // const gridCopy = [...grid];\n    // const startNode = gridCopy[START_NODE_ROW][START_NODE_COL];\n    // const endNode = gridCopy[END_NODE_ROW][END_NODE_COL];\n    // const pathOfNodes = depthFirstSearch(gridCopy, startNode, endNode);\n    // depthFirstSearchAnimate(pathOfNodes)\n  };\n\n  const dijkstraAnimate = () => {};\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: depthFirstSearchVisualize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Find the Path\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, grid.map((row, rowIdx) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIdx,\n      className: \"grid-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, row.map((node, nodeIdx) => {\n      const {\n        isStart,\n        isFinish,\n        isVisited\n      } = node; // console.log(isVisited)\n\n      return /*#__PURE__*/React.createElement(Node, {\n        isStart: isStart,\n        isFinish: isFinish,\n        key: nodeIdx,\n        test: 'hello there',\n        isVisited: isVisited,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 19\n        }\n      });\n    }));\n  })));\n}","map":{"version":3,"sources":["/Users/jpa/Desktop/goAlgo/client/src/PathfindingViz/PathfindingViz.js"],"names":["React","useState","useEffect","depthFirstSearch","Node","PathfindingViz","grid","setGrid","SPEED","SET_SPEED","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","row","currentRow","col","currentNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","push","depthFirstSearchAnimate","pathOfNodes","i","length","setTimeout","newGrid","node","console","log","newNode","depthFirstSearchVisualize","dijkstraAnimate","map","rowIdx","nodeIdx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport depthFirstSearch from './depthFirstSearch';\nimport Node from './Node/Node';\n\nimport './PathfindingViz.css';\n\nexport default function PathfindingViz() {\n  let [grid, setGrid] = useState([]);\n  const [SPEED, SET_SPEED] = useState(1000)\n\n  const START_NODE_ROW = 10;\n  const START_NODE_COL = 15;\n  const END_NODE_ROW = 10;\n  const END_NODE_COL = 35;\n\n  useEffect(() => {\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === END_NODE_ROW && col === END_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n      grid.push(currentRow);\n    }\n    setGrid([...grid]);\n\n  }, [])\n\n  const depthFirstSearchAnimate = (pathOfNodes) => {\n    // console.log(grid);\n    // console.log(pathOfNodes)\n    for (let i = 0; i < pathOfNodes.length; i++) {\n      setTimeout(() => {\n        const newGrid = [...grid];\n        const node = pathOfNodes[i];\n        console.log(node.row, node.col)\n        const newNode = {\n          ...node,\n          isVisited: true\n        };\n        // newNode.isVisited = true;\n        newGrid[node.row][node.col] = newNode;\n        setGrid(newGrid);\n      }, i * SPEED)\n    }\n  }\n\n  const depthFirstSearchVisualize = () => {\n    setGrid(grid)\n    // const gridCopy = [...grid];\n    // const startNode = gridCopy[START_NODE_ROW][START_NODE_COL];\n    // const endNode = gridCopy[END_NODE_ROW][END_NODE_COL];\n    // const pathOfNodes = depthFirstSearch(gridCopy, startNode, endNode);\n    // depthFirstSearchAnimate(pathOfNodes)\n  }\n\n  const dijkstraAnimate = () => {\n\n  }\n  return (\n    <>\n      <button onClick={depthFirstSearchVisualize}>Find the Path</button>\n      <div className='grid'>\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} className='grid-row'>\n              {row.map((node, nodeIdx) => {\n                const { isStart, isFinish, isVisited } = node;\n                // console.log(isVisited)\n                return (\n                  <Node\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    key={nodeIdx}\n                    test={'hello there'}\n                    isVisited={isVisited}\n                  ></Node>\n                );\n              })}\n            </div>\n          )\n        })}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}